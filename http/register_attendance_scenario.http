# 교회 출석 관리 시스템 테스트 시나리오
# 
# 이 시나리오는 Attendly 시스템의 주요 기능을 테스트합니다:
# 1. ADMIN 계정 생성 및 로그인
# 2. 부서(univ4)와 마을(R village) 생성
# 3. 교역자/리더/조원 계정 생성 및 관리
# 4. GBS 그룹 생성 및 구성원 배정
# 5. 각 GBS별 출석 등록 및 조회
#
# 실행 방법: Visual Studio Code의 REST Client 확장 또는 IntelliJ의 HTTP Client를 사용하여
# 순차적으로 각 요청을 실행하면 전체 시나리오가 테스트됩니다.
# 각 요청의 응답에서 얻은 ID값이 후속 요청에 자동으로 사용됩니다.

### 1. ADMIN 권한 계정 생성
# @name signup
POST http://localhost:8080/auth/signup
Content-Type: application/json

{
  "email": "hanjoo@naver.com",
  "password": "test123!@#",
  "name": "한주",
  "role": "ADMIN",
  "departmentId": 1
}

### 2. 로그인 및 토큰 발급
# @name login
POST http://localhost:8080/auth/login
Content-Type: application/json

{
  "email": "hanjoo@naver.com",
  "password": "test123!@#"
}

@accessToken = {{login.response.body.accessToken}}

### 3. "univ4" 부서 생성
# @name createDepartment
POST http://localhost:8080/api/admin/organization/departments
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "name": "univ4"
}

@departmentId = {{createDepartment.response.body.id}}

### 3-1. 마을장 계정 생성
# @name createVillageLeader
POST http://localhost:8080/api/admin/users
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "name": "마을장",
  "email": "village_leader@example.com",
  "password": "test123!@#",
  "role": "LEADER",
  "departmentId": {{departmentId}}
}

@villageLeaderId = {{createVillageLeader.response.body.id}}

### 4. "R" 마을 생성
# @name createVillage 
POST http://localhost:8080/api/admin/organization/villages
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "name": "R village",
  "departmentId": {{departmentId}},
  "villageLeaderId": {{villageLeaderId}}
}

@villageId = {{createVillage.response.body.id}}

### 5. 교역자 계정 생성 
# @name createMinister
POST http://localhost:8080/api/admin/users
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "name": "교역자1",
  "email": "minister1@example.com",
  "password": "test123!@#",
  "role": "MINISTER",
  "departmentId": {{departmentId}}
}

@ministerId = {{createMinister.response.body.id}}

### 6. 리더1 계정 생성
# @name createLeader1
POST http://localhost:8080/api/admin/users
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "name": "리더1",
  "email": "leader1@example.com",
  "password": "test123!@#",
  "role": "LEADER",
  "departmentId": {{departmentId}}
}

@leader1Id = {{createLeader1.response.body.id}}

### 7. 리더2 계정 생성
# @name createLeader2
POST http://localhost:8080/api/admin/users
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "name": "리더2",
  "email": "leader2@example.com",
  "password": "test123!@#",
  "role": "LEADER",
  "departmentId": {{departmentId}}
}

@leader2Id = {{createLeader2.response.body.id}}

### 8. 조원1 계정 생성
# @name createMember1
POST http://localhost:8080/api/admin/users
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "name": "조원1",
  "email": "member1@example.com",
  "password": "test123!@#",
  "role": "MEMBER",
  "departmentId": {{departmentId}}
}

@member1Id = {{createMember1.response.body.id}}

### 9. 조원2 계정 생성
# @name createMember2
POST http://localhost:8080/api/admin/users
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "name": "조원2",
  "email": "member2@example.com",
  "password": "test123!@#",
  "role": "MEMBER",
  "departmentId": {{departmentId}}
}

@member2Id = {{createMember2.response.body.id}}

### 10. 조원3 계정 생성
# @name createMember3
POST http://localhost:8080/api/admin/users
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "name": "조원3",
  "email": "member3@example.com",
  "password": "test123!@#",
  "role": "MEMBER",
  "departmentId": {{departmentId}}
}

@member3Id = {{createMember3.response.body.id}}

### 11. 조원4 계정 생성
# @name createMember4
POST http://localhost:8080/api/admin/users
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "name": "조원4",
  "email": "member4@example.com",
  "password": "test123!@#",
  "role": "MEMBER",
  "departmentId": {{departmentId}}
}

@member4Id = {{createMember4.response.body.id}}

### 12. GBS 그룹1 생성 (리더1 + 조원1 + 조원2)
# @name createGBS1
POST http://localhost:8080/api/admin/organization/gbs-groups
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "name": "GBS1",
  "villageId": {{villageId}},
  "termStartDate": "2023-01-01",
  "termEndDate": "2023-06-30",
  "leaderId": {{leader1Id}}
}

@gbs1Id = {{createGBS1.response.body.id}}

### 13. GBS 그룹1에 조원1 배정
POST http://localhost:8080/api/admin/organization/gbs-groups/{{gbs1Id}}/members
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "memberId": {{member1Id}},
  "startDate": "2023-01-01"
}

### 14. GBS 그룹1에 조원2 배정
POST http://localhost:8080/api/admin/organization/gbs-groups/{{gbs1Id}}/members
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "memberId": {{member2Id}},
  "startDate": "2023-01-01"
}

### 15. GBS 그룹2 생성 (리더2 + 조원3 + 조원4)
# @name createGBS2
POST http://localhost:8080/api/admin/organization/gbs-groups
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "name": "GBS2",
  "villageId": {{villageId}},
  "termStartDate": "2023-01-01",
  "termEndDate": "2023-06-30",
  "leaderId": {{leader2Id}}
}

@gbs2Id = {{createGBS2.response.body.id}}

### 16. GBS 그룹2에 조원3 배정
POST http://localhost:8080/api/admin/organization/gbs-groups/{{gbs2Id}}/members
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "memberId": {{member3Id}},
  "startDate": "2023-01-01"
}

### 17. GBS 그룹2에 조원4 배정
POST http://localhost:8080/api/admin/organization/gbs-groups/{{gbs2Id}}/members
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "memberId": {{member4Id}},
  "startDate": "2023-01-01"
}

### 18. 리더1로 로그인
# @name loginLeader1
POST http://localhost:8080/auth/login
Content-Type: application/json

{
  "email": "leader1@example.com",
  "password": "test123!@#"
}

@leader1Token = {{loginLeader1.response.body.accessToken}}

### 19. GBS1 출석 등록
POST http://localhost:8080/api/attendance
Content-Type: application/json
Authorization: Bearer {{leader1Token}}

{
  "gbsId": {{gbs1Id}},
  "weekStart": "2023-01-08",
  "attendances": [
    {
      "memberId": {{member1Id}},
      "worship": "O",
      "qtCount": 5,
      "ministry": "A"
    },
    {
      "memberId": {{member2Id}},
      "worship": "O",
      "qtCount": 4,
      "ministry": "B"
    }
  ]
}

### 20. 리더2로 로그인
# @name loginLeader2
POST http://localhost:8080/auth/login
Content-Type: application/json

{
  "email": "leader2@example.com",
  "password": "test123!@#"
}

@leader2Token = {{loginLeader2.response.body.accessToken}}

### 21. GBS2 출석 등록
POST http://localhost:8080/api/attendance
Content-Type: application/json
Authorization: Bearer {{leader2Token}}

{
  "gbsId": {{gbs2Id}},
  "weekStart": "2023-01-08",
  "attendances": [
    {
      "memberId": {{member3Id}},
      "worship": "O",
      "qtCount": 6,
      "ministry": "A"
    },
    {
      "memberId": {{member4Id}},
      "worship": "X",
      "qtCount": 3,
      "ministry": "C"
    }
  ]
}

### 22. GBS1 출석 조회 (리더1 권한으로)
GET http://localhost:8080/api/attendance?gbsId={{gbs1Id}}&weekStart=2023-01-08
Authorization: Bearer {{leader1Token}}

### 23. GBS2 출석 조회 (리더2 권한으로)
GET http://localhost:8080/api/attendance?gbsId={{gbs2Id}}&weekStart=2023-01-08
Authorization: Bearer {{leader2Token}}

### 24. 마을 출석 현황 조회 (ADMIN 권한으로)
GET http://localhost:8080/api/village/{{villageId}}/attendance?weekStart=2023-01-08
Authorization: Bearer {{accessToken}} 