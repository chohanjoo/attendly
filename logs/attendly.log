2025-05-06 22:31:34 [background-preinit] [NONE] DEBUG org.jboss.logging - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-05-06 22:31:34 [Test worker] [NONE] WARN  o.s.b.t.j.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer - 

Found multiple occurrences of org.json.JSONObject on the class path:

	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/org.json/json/20230618/1ae16df7d556d02713e241086f878399e99260d6/json-20230618.jar!/org/json/JSONObject.class
	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/com.vaadin.external.google/android-json/0.0.20131108.vaadin1/fa26d351fe62a6a17f5cda1287c1c6110dec413f/android-json-0.0.20131108.vaadin1.jar!/org/json/JSONObject.class

You may wish to exclude one of them to ensure predictable runtime behavior

2025-05-06 22:31:34 [Test worker] [NONE] INFO  c.a.a.controller.AuthControllerTest - Starting AuthControllerTest using Java 21.0.1 with PID 38657 (started by user in /Users/user/study/attendly-api)
2025-05-06 22:31:34 [Test worker] [NONE] DEBUG c.a.a.controller.AuthControllerTest - Running with Spring Boot v3.4.5, Spring v6.2.6
2025-05-06 22:31:34 [Test worker] [NONE] INFO  c.a.a.controller.AuthControllerTest - The following 1 profile is active: "dev"
2025-05-06 22:31:35 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=com.attendly.service.UserService#0 bean#1
2025-05-06 22:31:35 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AuthenticationManager name=authenticationManager bean#2
2025-05-06 22:31:35 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for JwtTokenProvider name=com.attendly.security.JwtTokenProvider#0 bean#3
2025-05-06 22:31:35 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsService name=org.springframework.security.core.userdetails.UserDetailsService#0 bean#4
2025-05-06 22:31:36 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.AuthController:
	{POST [/auth/login]}: login(LoginRequest)
	{POST [/auth/refresh]}: refreshToken(TokenRefreshRequest)
	{POST [/auth/signup]}: signup(SignupRequest)
	{GET [/auth/me]}: getCurrentUser(UserDetailsAdapter)
2025-05-06 22:31:36 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	o.s.b.a.w.s.e.BasicErrorController:
	{ [/error], produces [text/html]}: errorHtml(HttpServletRequest,HttpServletResponse)
	{ [/error]}: error(HttpServletRequest)
2025-05-06 22:31:36 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 'beanNameHandlerMapping' {}
2025-05-06 22:31:36 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 'resourceHandlerMapping' {/webjars/**=ResourceHttpRequestHandler [classpath [META-INF/resources/webjars/]], /**=ResourceHttpRequestHandler [classpath [META-INF/resources/], classpath [resources/], classpath [static/], classpath [public/], ServletContext [/]]}
2025-05-06 22:31:36 [Test worker] [NONE] DEBUG com.attendly.config.RequestIdFilter - Filter 'requestIdFilter' configured for use
2025-05-06 22:31:36 [Test worker] [NONE] DEBUG c.a.config.ContentCachingFilter - Filter 'contentCachingFilter' configured for use
2025-05-06 22:31:36 [Test worker] [NONE] DEBUG c.a.security.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-05-06 22:31:36 [Test worker] [NONE] INFO  c.a.a.controller.AuthControllerTest - Started AuthControllerTest in 1.824 seconds (process running for 2.697)
2025-05-06 22:31:36 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Department name=#5
2025-05-06 22:31:36 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#6
2025-05-06 22:31:36 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #6#7
2025-05-06 22:31:36 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Department name=child of #6#8
2025-05-06 22:31:36 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LocalDate name=child of #6#9
2025-05-06 22:31:36 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LocalDateTime name=child of #6#10
2025-05-06 22:31:36 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LocalDateTime name=child of #6#11
2025-05-06 22:31:36 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#12
2025-05-06 22:31:36 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #12#13
2025-05-06 22:31:36 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering UserDetailsAdapter(#12) on UserDetailsAdapter(#12).toString()
2025-05-06 22:31:36 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Throwing io.mockk.MockKException: no answer found for UserDetailsAdapter(#12).getPassword() among the configured answers: (UserDetailsAdapter(#12).getUser())) on UserDetailsAdapter(#12).getPassword()
2025-05-06 22:31:36 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:31:36 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#2)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:31:36 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:31:36 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#4)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:31:36 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:31:36 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#2)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:31:36 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:31:36 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#4)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:31:47 [background-preinit] [NONE] DEBUG org.jboss.logging - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-05-06 22:31:47 [Test worker] [NONE] WARN  o.s.b.t.j.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer - 

Found multiple occurrences of org.json.JSONObject on the class path:

	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/org.json/json/20230618/1ae16df7d556d02713e241086f878399e99260d6/json-20230618.jar!/org/json/JSONObject.class
	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/com.vaadin.external.google/android-json/0.0.20131108.vaadin1/fa26d351fe62a6a17f5cda1287c1c6110dec413f/android-json-0.0.20131108.vaadin1.jar!/org/json/JSONObject.class

You may wish to exclude one of them to ensure predictable runtime behavior

2025-05-06 22:31:47 [Test worker] [NONE] INFO  c.a.a.controller.AuthControllerTest - Starting AuthControllerTest using Java 21.0.1 with PID 38816 (started by user in /Users/user/study/attendly-api)
2025-05-06 22:31:47 [Test worker] [NONE] DEBUG c.a.a.controller.AuthControllerTest - Running with Spring Boot v3.4.5, Spring v6.2.6
2025-05-06 22:31:47 [Test worker] [NONE] INFO  c.a.a.controller.AuthControllerTest - The following 1 profile is active: "dev"
2025-05-06 22:31:48 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=com.attendly.service.UserService#0 bean#1
2025-05-06 22:31:48 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AuthenticationManager name=authenticationManager bean#2
2025-05-06 22:31:48 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for JwtTokenProvider name=com.attendly.security.JwtTokenProvider#0 bean#3
2025-05-06 22:31:48 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsService name=org.springframework.security.core.userdetails.UserDetailsService#0 bean#4
2025-05-06 22:31:48 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.AuthController:
	{POST [/auth/login]}: login(LoginRequest)
	{POST [/auth/refresh]}: refreshToken(TokenRefreshRequest)
	{POST [/auth/signup]}: signup(SignupRequest)
	{GET [/auth/me]}: getCurrentUser(UserDetailsAdapter)
2025-05-06 22:31:48 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	o.s.b.a.w.s.e.BasicErrorController:
	{ [/error]}: error(HttpServletRequest)
	{ [/error], produces [text/html]}: errorHtml(HttpServletRequest,HttpServletResponse)
2025-05-06 22:31:48 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 'beanNameHandlerMapping' {}
2025-05-06 22:31:48 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 'resourceHandlerMapping' {/webjars/**=ResourceHttpRequestHandler [classpath [META-INF/resources/webjars/]], /**=ResourceHttpRequestHandler [classpath [META-INF/resources/], classpath [resources/], classpath [static/], classpath [public/], ServletContext [/]]}
2025-05-06 22:31:48 [Test worker] [NONE] DEBUG com.attendly.config.RequestIdFilter - Filter 'requestIdFilter' configured for use
2025-05-06 22:31:48 [Test worker] [NONE] DEBUG c.a.config.ContentCachingFilter - Filter 'contentCachingFilter' configured for use
2025-05-06 22:31:48 [Test worker] [NONE] DEBUG c.a.security.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-05-06 22:31:48 [Test worker] [NONE] INFO  c.a.a.controller.AuthControllerTest - Started AuthControllerTest in 1.964 seconds (process running for 2.716)
2025-05-06 22:31:48 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Department name=#5
2025-05-06 22:31:48 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#6
2025-05-06 22:31:48 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #6#7
2025-05-06 22:31:48 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Department name=child of #6#8
2025-05-06 22:31:48 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LocalDate name=child of #6#9
2025-05-06 22:31:48 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LocalDateTime name=child of #6#10
2025-05-06 22:31:49 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LocalDateTime name=child of #6#11
2025-05-06 22:31:49 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#12
2025-05-06 22:31:49 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #12#13
2025-05-06 22:31:49 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering UserDetailsAdapter(#12) on UserDetailsAdapter(#12).toString()
2025-05-06 22:31:49 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Throwing io.mockk.MockKException: no answer found for UserDetailsAdapter(#12).getPassword() among the configured answers: (UserDetailsAdapter(#12).getUser())) on UserDetailsAdapter(#12).getPassword()
2025-05-06 22:31:49 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:31:49 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#2)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:31:49 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:31:49 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#4)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:31:49 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:31:49 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#2)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:31:49 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:31:49 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#4)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:32:08 [background-preinit] [NONE] DEBUG org.jboss.logging - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-05-06 22:32:08 [Test worker] [NONE] WARN  o.s.b.t.j.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer - 

Found multiple occurrences of org.json.JSONObject on the class path:

	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/org.json/json/20230618/1ae16df7d556d02713e241086f878399e99260d6/json-20230618.jar!/org/json/JSONObject.class
	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/com.vaadin.external.google/android-json/0.0.20131108.vaadin1/fa26d351fe62a6a17f5cda1287c1c6110dec413f/android-json-0.0.20131108.vaadin1.jar!/org/json/JSONObject.class

You may wish to exclude one of them to ensure predictable runtime behavior

2025-05-06 22:32:08 [Test worker] [NONE] INFO  c.a.a.controller.AuthControllerTest - Starting AuthControllerTest using Java 21.0.1 with PID 39018 (started by user in /Users/user/study/attendly-api)
2025-05-06 22:32:08 [Test worker] [NONE] DEBUG c.a.a.controller.AuthControllerTest - Running with Spring Boot v3.4.5, Spring v6.2.6
2025-05-06 22:32:08 [Test worker] [NONE] INFO  c.a.a.controller.AuthControllerTest - The following 1 profile is active: "dev"
2025-05-06 22:32:09 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=com.attendly.service.UserService#0 bean#1
2025-05-06 22:32:09 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AuthenticationManager name=authenticationManager bean#2
2025-05-06 22:32:09 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for JwtTokenProvider name=com.attendly.security.JwtTokenProvider#0 bean#3
2025-05-06 22:32:09 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsService name=org.springframework.security.core.userdetails.UserDetailsService#0 bean#4
2025-05-06 22:32:09 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.AuthController:
	{POST [/auth/login]}: login(LoginRequest)
	{POST [/auth/refresh]}: refreshToken(TokenRefreshRequest)
	{POST [/auth/signup]}: signup(SignupRequest)
	{GET [/auth/me]}: getCurrentUser(UserDetailsAdapter)
2025-05-06 22:32:09 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	o.s.b.a.w.s.e.BasicErrorController:
	{ [/error], produces [text/html]}: errorHtml(HttpServletRequest,HttpServletResponse)
	{ [/error]}: error(HttpServletRequest)
2025-05-06 22:32:09 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 'beanNameHandlerMapping' {}
2025-05-06 22:32:09 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 'resourceHandlerMapping' {/webjars/**=ResourceHttpRequestHandler [classpath [META-INF/resources/webjars/]], /**=ResourceHttpRequestHandler [classpath [META-INF/resources/], classpath [resources/], classpath [static/], classpath [public/], ServletContext [/]]}
2025-05-06 22:32:09 [Test worker] [NONE] DEBUG com.attendly.config.RequestIdFilter - Filter 'requestIdFilter' configured for use
2025-05-06 22:32:09 [Test worker] [NONE] DEBUG c.a.config.ContentCachingFilter - Filter 'contentCachingFilter' configured for use
2025-05-06 22:32:09 [Test worker] [NONE] DEBUG c.a.security.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-05-06 22:32:10 [Test worker] [NONE] INFO  c.a.a.controller.AuthControllerTest - Started AuthControllerTest in 1.52 seconds (process running for 2.526)
2025-05-06 22:32:10 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Department name=#5
2025-05-06 22:32:10 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#6
2025-05-06 22:32:10 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #6#7
2025-05-06 22:32:10 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Department name=child of #6#8
2025-05-06 22:32:10 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LocalDate name=child of #6#9
2025-05-06 22:32:10 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LocalDateTime name=child of #6#10
2025-05-06 22:32:10 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LocalDateTime name=child of #6#11
2025-05-06 22:32:10 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#12
2025-05-06 22:32:10 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #12#13
2025-05-06 22:32:10 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering UserDetailsAdapter(#12) on UserDetailsAdapter(#12).toString()
2025-05-06 22:32:10 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Throwing io.mockk.MockKException: no answer found for UserDetailsAdapter(#12).getPassword() among the configured answers: (UserDetailsAdapter(#12).getUser())) on UserDetailsAdapter(#12).getPassword()
2025-05-06 22:32:10 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:32:10 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#2)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:32:10 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:32:10 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#4)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:32:10 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:32:10 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#2)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:32:10 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:32:10 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#4)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:33:12 [background-preinit] [NONE] DEBUG org.jboss.logging - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-05-06 22:33:12 [Test worker] [NONE] WARN  o.s.b.t.j.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer - 

Found multiple occurrences of org.json.JSONObject on the class path:

	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/org.json/json/20230618/1ae16df7d556d02713e241086f878399e99260d6/json-20230618.jar!/org/json/JSONObject.class
	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/com.vaadin.external.google/android-json/0.0.20131108.vaadin1/fa26d351fe62a6a17f5cda1287c1c6110dec413f/android-json-0.0.20131108.vaadin1.jar!/org/json/JSONObject.class

You may wish to exclude one of them to ensure predictable runtime behavior

2025-05-06 22:33:12 [Test worker] [NONE] INFO  c.a.a.controller.AuthControllerTest - Starting AuthControllerTest using Java 21.0.1 with PID 39580 (started by user in /Users/user/study/attendly-api)
2025-05-06 22:33:12 [Test worker] [NONE] DEBUG c.a.a.controller.AuthControllerTest - Running with Spring Boot v3.4.5, Spring v6.2.6
2025-05-06 22:33:12 [Test worker] [NONE] INFO  c.a.a.controller.AuthControllerTest - The following 1 profile is active: "dev"
2025-05-06 22:33:13 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=com.attendly.service.UserService#0 bean#1
2025-05-06 22:33:13 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AuthenticationManager name=authenticationManager bean#2
2025-05-06 22:33:13 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for JwtTokenProvider name=com.attendly.security.JwtTokenProvider#0 bean#3
2025-05-06 22:33:13 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsService name=org.springframework.security.core.userdetails.UserDetailsService#0 bean#4
2025-05-06 22:33:13 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.AuthController:
	{POST [/auth/signup]}: signup(SignupRequest)
	{GET [/auth/me]}: getCurrentUser(UserDetailsAdapter)
	{POST [/auth/login]}: login(LoginRequest)
	{POST [/auth/refresh]}: refreshToken(TokenRefreshRequest)
2025-05-06 22:33:13 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	o.s.b.a.w.s.e.BasicErrorController:
	{ [/error]}: error(HttpServletRequest)
	{ [/error], produces [text/html]}: errorHtml(HttpServletRequest,HttpServletResponse)
2025-05-06 22:33:13 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 'beanNameHandlerMapping' {}
2025-05-06 22:33:13 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 'resourceHandlerMapping' {/webjars/**=ResourceHttpRequestHandler [classpath [META-INF/resources/webjars/]], /**=ResourceHttpRequestHandler [classpath [META-INF/resources/], classpath [resources/], classpath [static/], classpath [public/], ServletContext [/]]}
2025-05-06 22:33:13 [Test worker] [NONE] DEBUG com.attendly.config.RequestIdFilter - Filter 'requestIdFilter' configured for use
2025-05-06 22:33:13 [Test worker] [NONE] DEBUG c.a.config.ContentCachingFilter - Filter 'contentCachingFilter' configured for use
2025-05-06 22:33:13 [Test worker] [NONE] DEBUG c.a.security.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-05-06 22:33:13 [Test worker] [NONE] INFO  c.a.a.controller.AuthControllerTest - Started AuthControllerTest in 1.571 seconds (process running for 2.327)
2025-05-06 22:33:13 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Department name=#5
2025-05-06 22:33:14 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#6
2025-05-06 22:33:14 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #6#7
2025-05-06 22:33:14 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Department name=child of #6#8
2025-05-06 22:33:14 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LocalDate name=child of #6#9
2025-05-06 22:33:14 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LocalDateTime name=child of #6#10
2025-05-06 22:33:14 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LocalDateTime name=child of #6#11
2025-05-06 22:33:14 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#12
2025-05-06 22:33:14 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #12#13
2025-05-06 22:33:14 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetails name=child of org.springframework.security.core.userdetails.UserDetailsService#0 bean#4#14
2025-05-06 22:33:14 [Test worker] [9155f3dd-077f-4bf0-b183-9944495e788c] ERROR c.a.exception.GlobalExceptionHandler - Unhandled Exception
java.lang.NullPointerException: Parameter specified as non-null is null: method com.attendly.api.controller.AuthController.getCurrentUser, parameter userDetails
	at com.attendly.api.controller.AuthController.getCurrentUser(AuthController.kt)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at kotlin.reflect.jvm.internal.calls.CallerImpl$Method.callMethod(CallerImpl.kt:97)
	at kotlin.reflect.jvm.internal.calls.CallerImpl$Method$Instance.call(CallerImpl.kt:113)
	at kotlin.reflect.jvm.internal.KCallableImpl.callDefaultMethod$kotlin_reflection(KCallableImpl.kt:207)
	at kotlin.reflect.jvm.internal.KCallableImpl.callBy(KCallableImpl.kt:112)
	at org.springframework.web.method.support.InvocableHandlerMethod$KotlinDelegate.invokeFunction(InvocableHandlerMethod.java:335)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:72)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:165)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at com.attendly.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.kt:27)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:165)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at com.attendly.config.RequestIdFilter.doFilter(RequestIdFilter.kt:34)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:201)
	at com.attendly.api.controller.AuthControllerTest.현재 사용자 정보 조회 테스트(AuthControllerTest.kt:191)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:767)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$8(TestMethodTestDescriptor.java:217)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:156)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:124)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:99)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:94)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:92)
	at jdk.proxy1/jdk.proxy1.$Proxy4.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:200)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:132)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:103)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:63)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:121)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
2025-05-06 22:33:14 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:33:14 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#2)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:33:14 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:33:14 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#4)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:33:14 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:33:14 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#2)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:33:14 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:33:14 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#4)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:33:49 [background-preinit] [NONE] DEBUG org.jboss.logging - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-05-06 22:33:49 [Test worker] [NONE] WARN  o.s.b.t.j.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer - 

Found multiple occurrences of org.json.JSONObject on the class path:

	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/org.json/json/20230618/1ae16df7d556d02713e241086f878399e99260d6/json-20230618.jar!/org/json/JSONObject.class
	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/com.vaadin.external.google/android-json/0.0.20131108.vaadin1/fa26d351fe62a6a17f5cda1287c1c6110dec413f/android-json-0.0.20131108.vaadin1.jar!/org/json/JSONObject.class

You may wish to exclude one of them to ensure predictable runtime behavior

2025-05-06 22:33:49 [Test worker] [NONE] INFO  c.a.a.controller.AuthControllerTest - Starting AuthControllerTest using Java 21.0.1 with PID 40021 (started by user in /Users/user/study/attendly-api)
2025-05-06 22:33:49 [Test worker] [NONE] DEBUG c.a.a.controller.AuthControllerTest - Running with Spring Boot v3.4.5, Spring v6.2.6
2025-05-06 22:33:49 [Test worker] [NONE] INFO  c.a.a.controller.AuthControllerTest - The following 1 profile is active: "dev"
2025-05-06 22:33:50 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=com.attendly.service.UserService#0 bean#1
2025-05-06 22:33:50 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AuthenticationManager name=authenticationManager bean#2
2025-05-06 22:33:50 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for JwtTokenProvider name=com.attendly.security.JwtTokenProvider#0 bean#3
2025-05-06 22:33:50 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsService name=org.springframework.security.core.userdetails.UserDetailsService#0 bean#4
2025-05-06 22:33:50 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.AuthController:
	{POST [/auth/refresh]}: refreshToken(TokenRefreshRequest)
	{POST [/auth/signup]}: signup(SignupRequest)
	{GET [/auth/me]}: getCurrentUser(UserDetailsAdapter)
	{POST [/auth/login]}: login(LoginRequest)
2025-05-06 22:33:50 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	o.s.b.a.w.s.e.BasicErrorController:
	{ [/error], produces [text/html]}: errorHtml(HttpServletRequest,HttpServletResponse)
	{ [/error]}: error(HttpServletRequest)
2025-05-06 22:33:50 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 'beanNameHandlerMapping' {}
2025-05-06 22:33:50 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 'resourceHandlerMapping' {/webjars/**=ResourceHttpRequestHandler [classpath [META-INF/resources/webjars/]], /**=ResourceHttpRequestHandler [classpath [META-INF/resources/], classpath [resources/], classpath [static/], classpath [public/], ServletContext [/]]}
2025-05-06 22:33:50 [Test worker] [NONE] DEBUG com.attendly.config.RequestIdFilter - Filter 'requestIdFilter' configured for use
2025-05-06 22:33:50 [Test worker] [NONE] DEBUG c.a.config.ContentCachingFilter - Filter 'contentCachingFilter' configured for use
2025-05-06 22:33:50 [Test worker] [NONE] DEBUG c.a.security.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-05-06 22:33:50 [Test worker] [NONE] INFO  c.a.a.controller.AuthControllerTest - Started AuthControllerTest in 1.773 seconds (process running for 2.579)
2025-05-06 22:33:51 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Department name=#5
2025-05-06 22:33:51 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#6
2025-05-06 22:33:51 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #6#7
2025-05-06 22:33:51 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Department name=child of #6#8
2025-05-06 22:33:51 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LocalDate name=child of #6#9
2025-05-06 22:33:51 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LocalDateTime name=child of #6#10
2025-05-06 22:33:51 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LocalDateTime name=child of #6#11
2025-05-06 22:33:51 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#12
2025-05-06 22:33:51 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #12#13
2025-05-06 22:33:51 [Test worker] [070ffa69-1d2c-4b72-9871-bf345ae96426] ERROR c.a.exception.GlobalExceptionHandler - Unhandled Exception
java.lang.NullPointerException: Parameter specified as non-null is null: method com.attendly.api.controller.AuthController.getCurrentUser, parameter userDetails
	at com.attendly.api.controller.AuthController.getCurrentUser(AuthController.kt)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at kotlin.reflect.jvm.internal.calls.CallerImpl$Method.callMethod(CallerImpl.kt:97)
	at kotlin.reflect.jvm.internal.calls.CallerImpl$Method$Instance.call(CallerImpl.kt:113)
	at kotlin.reflect.jvm.internal.KCallableImpl.callDefaultMethod$kotlin_reflection(KCallableImpl.kt:207)
	at kotlin.reflect.jvm.internal.KCallableImpl.callBy(KCallableImpl.kt:112)
	at org.springframework.web.method.support.InvocableHandlerMethod$KotlinDelegate.invokeFunction(InvocableHandlerMethod.java:335)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:72)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:165)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at com.attendly.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.kt:27)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:165)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at com.attendly.config.RequestIdFilter.doFilter(RequestIdFilter.kt:34)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:201)
	at com.attendly.api.controller.AuthControllerTest.현재 사용자 정보 조회 테스트(AuthControllerTest.kt:187)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:767)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$8(TestMethodTestDescriptor.java:217)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:156)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:124)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:99)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:94)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:92)
	at jdk.proxy1/jdk.proxy1.$Proxy4.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:200)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:132)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:103)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:63)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:121)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
2025-05-06 22:33:51 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:33:51 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#2)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:33:51 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:33:51 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#4)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:33:51 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:33:51 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#2)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:33:51 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:33:51 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#4)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:32 [background-preinit] [NONE] DEBUG org.jboss.logging - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-05-06 22:37:32 [Test worker] [NONE] WARN  o.s.b.t.j.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer - 

Found multiple occurrences of org.json.JSONObject on the class path:

	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/org.json/json/20230618/1ae16df7d556d02713e241086f878399e99260d6/json-20230618.jar!/org/json/JSONObject.class
	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/com.vaadin.external.google/android-json/0.0.20131108.vaadin1/fa26d351fe62a6a17f5cda1287c1c6110dec413f/android-json-0.0.20131108.vaadin1.jar!/org/json/JSONObject.class

You may wish to exclude one of them to ensure predictable runtime behavior

2025-05-06 22:37:32 [Test worker] [NONE] INFO  c.a.a.controller.AuthControllerTest - Starting AuthControllerTest using Java 21.0.6 with PID 41751 (started by user in /Users/user/study/attendly-api)
2025-05-06 22:37:32 [Test worker] [NONE] DEBUG c.a.a.controller.AuthControllerTest - Running with Spring Boot v3.4.5, Spring v6.2.6
2025-05-06 22:37:32 [Test worker] [NONE] INFO  c.a.a.controller.AuthControllerTest - The following 1 profile is active: "dev"
2025-05-06 22:37:33 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=com.attendly.service.UserService#0 bean#1
2025-05-06 22:37:33 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AuthenticationManager name=authenticationManager bean#2
2025-05-06 22:37:33 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for JwtTokenProvider name=com.attendly.security.JwtTokenProvider#0 bean#3
2025-05-06 22:37:33 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsService name=org.springframework.security.core.userdetails.UserDetailsService#0 bean#4
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.AuthController:
	{POST [/auth/login]}: login(LoginRequest)
	{POST [/auth/refresh]}: refreshToken(TokenRefreshRequest)
	{POST [/auth/signup]}: signup(SignupRequest)
	{GET [/auth/me]}: getCurrentUser(UserDetailsAdapter)
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	o.s.b.a.w.s.e.BasicErrorController:
	{ [/error], produces [text/html]}: errorHtml(HttpServletRequest,HttpServletResponse)
	{ [/error]}: error(HttpServletRequest)
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 'beanNameHandlerMapping' {}
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 'resourceHandlerMapping' {/webjars/**=ResourceHttpRequestHandler [classpath [META-INF/resources/webjars/]], /**=ResourceHttpRequestHandler [classpath [META-INF/resources/], classpath [resources/], classpath [static/], classpath [public/], ServletContext [/]]}
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG com.attendly.config.RequestIdFilter - Filter 'requestIdFilter' configured for use
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG c.a.config.ContentCachingFilter - Filter 'contentCachingFilter' configured for use
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG c.a.security.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-05-06 22:37:34 [Test worker] [NONE] INFO  c.a.a.controller.AuthControllerTest - Started AuthControllerTest in 1.459 seconds (process running for 2.15)
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SignupResponse name=child of com.attendly.service.UserService#0 bean#1#5
2025-05-06 22:37:34 [Test worker] [6dc488ec-bc40-49f3-a825-1c82b86eebec] DEBUG i.m.i.r.states.AnsweringState - Answering SignupResponse(userId=1, name=홍길동, email=test@example.com, phoneNumber=010-1234-5678, role=LEADER) on UserService(com.attendly.service.UserService#0 bean#1).signup(SignupRequest(email=test@example.com, password=password123, name=홍길동, phoneNumber=010-1234-5678, role=LEADER, departmentId=1))
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['userId']
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['userId']
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['name']
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['email']
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['role']
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#2)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#4)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#2)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#4)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:34 [Test worker] [8d5e0b5c-ff21-4d93-b4f0-91dde3aec938] ERROR c.a.exception.GlobalExceptionHandler - MethodArgumentNotValidException: {}
org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity<com.attendly.api.dto.SignupResponse> com.attendly.api.controller.AuthController.signup(com.attendly.api.dto.SignupRequest) with 3 errors: [Field error in object 'signupRequest' on field 'email': rejected value []; codes [NotBlank.signupRequest.email,NotBlank.email,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [signupRequest.email,email]; arguments []; default message [email]]; default message [이메일은 필수입니다]] [Field error in object 'signupRequest' on field 'name': rejected value []; codes [NotBlank.signupRequest.name,NotBlank.name,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [signupRequest.name,name]; arguments []; default message [name]]; default message [이름은 필수입니다]] [Field error in object 'signupRequest' on field 'password': rejected value []; codes [NotBlank.signupRequest.password,NotBlank.password,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [signupRequest.password,password]; arguments []; default message [password]]; default message [비밀번호는 필수입니다]] 
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:159)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:227)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:181)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:72)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:165)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at com.attendly.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.kt:27)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:165)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at com.attendly.config.RequestIdFilter.doFilter(RequestIdFilter.kt:34)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:201)
	at com.attendly.api.controller.AuthControllerTest.회원가입 유효성 검증 실패 테스트(AuthControllerTest.kt:109)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)
	at java.base/java.lang.reflect.Method.invoke(Unknown Source)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:767)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$8(TestMethodTestDescriptor.java:217)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:156)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(Unknown Source)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(Unknown Source)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:124)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:99)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:94)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)
	at java.base/java.lang.reflect.Method.invoke(Unknown Source)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:92)
	at jdk.proxy1/jdk.proxy1.$Proxy4.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:200)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:132)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:103)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:63)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:121)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#2)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#4)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#2)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#4)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#6
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #6#7
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#8
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #8#9
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Collection name=child of #8#10
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#11
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #11#12
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of authenticationManager bean#2#13
2025-05-06 22:37:34 [Test worker] [0d548540-12ad-4f3d-b2ca-42cd9ca70c1b] DEBUG i.m.i.r.states.AnsweringState - Answering Authentication(#11) on AuthenticationManager(authenticationManager bean#2).authenticate(UsernamePasswordAuthenticationToken [Principal=test@example.com, Credentials=[PROTECTED], Authenticated=false, Details=null, Granted Authorities=[]])
2025-05-06 22:37:34 [Test worker] [0d548540-12ad-4f3d-b2ca-42cd9ca70c1b] DEBUG i.m.i.r.states.AnsweringState - Answering UserDetailsAdapter(#8) on Authentication(#11).getPrincipal()
2025-05-06 22:37:34 [Test worker] [0d548540-12ad-4f3d-b2ca-42cd9ca70c1b] DEBUG i.m.i.r.states.AnsweringState - Answering User(#6) on UserDetailsAdapter(#8).getUser()
2025-05-06 22:37:34 [Test worker] [0d548540-12ad-4f3d-b2ca-42cd9ca70c1b] DEBUG i.m.i.r.states.AnsweringState - Answering access-token on JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3).generateToken(UserDetailsAdapter(#8))
2025-05-06 22:37:34 [Test worker] [0d548540-12ad-4f3d-b2ca-42cd9ca70c1b] DEBUG i.m.i.r.states.AnsweringState - Answering refresh-token on JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3).generateRefreshToken(UserDetailsAdapter(#8))
2025-05-06 22:37:34 [Test worker] [0d548540-12ad-4f3d-b2ca-42cd9ca70c1b] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on User(#6).getId()
2025-05-06 22:37:34 [Test worker] [0d548540-12ad-4f3d-b2ca-42cd9ca70c1b] DEBUG i.m.i.r.states.AnsweringState - Answering 홍길동 on User(#6).getName()
2025-05-06 22:37:34 [Test worker] [0d548540-12ad-4f3d-b2ca-42cd9ca70c1b] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#6).getRole()
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['userId']
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['userId']
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['name']
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['role']
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['accessToken']
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['refreshToken']
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#2)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#4)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#2)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#4)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Department name=#14
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#15
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #15#16
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Department name=child of #15#17
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LocalDate name=child of #15#18
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LocalDateTime name=child of #15#19
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LocalDateTime name=child of #15#20
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#21
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #21#22
2025-05-06 22:37:34 [Test worker] [088fb8c3-4c6e-42e8-a028-ec35768333a9] ERROR c.a.exception.GlobalExceptionHandler - Unhandled Exception
java.lang.NullPointerException: Parameter specified as non-null is null: method com.attendly.api.controller.AuthController.getCurrentUser, parameter userDetails
	at com.attendly.api.controller.AuthController.getCurrentUser(AuthController.kt)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)
	at java.base/java.lang.reflect.Method.invoke(Unknown Source)
	at kotlin.reflect.jvm.internal.calls.CallerImpl$Method.callMethod(CallerImpl.kt:97)
	at kotlin.reflect.jvm.internal.calls.CallerImpl$Method$Instance.call(CallerImpl.kt:113)
	at kotlin.reflect.jvm.internal.KCallableImpl.callDefaultMethod$kotlin_reflection(KCallableImpl.kt:207)
	at kotlin.reflect.jvm.internal.KCallableImpl.callBy(KCallableImpl.kt:112)
	at org.springframework.web.method.support.InvocableHandlerMethod$KotlinDelegate.invokeFunction(InvocableHandlerMethod.java:335)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:72)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:165)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at com.attendly.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.kt:27)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:165)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at com.attendly.config.RequestIdFilter.doFilter(RequestIdFilter.kt:34)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:201)
	at com.attendly.api.controller.AuthControllerTest.현재 사용자 정보 조회 테스트(AuthControllerTest.kt:188)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)
	at java.base/java.lang.reflect.Method.invoke(Unknown Source)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:767)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$8(TestMethodTestDescriptor.java:217)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:156)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(Unknown Source)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(Unknown Source)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:124)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:99)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:94)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)
	at java.base/java.lang.reflect.Method.invoke(Unknown Source)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:92)
	at jdk.proxy1/jdk.proxy1.$Proxy4.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:200)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:132)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:103)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:63)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:121)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#2)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#4)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#2)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#4)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:34 [Test worker] [NONE] WARN  o.s.b.t.j.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer - 

Found multiple occurrences of org.json.JSONObject on the class path:

	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/org.json/json/20230618/1ae16df7d556d02713e241086f878399e99260d6/json-20230618.jar!/org/json/JSONObject.class
	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/com.vaadin.external.google/android-json/0.0.20131108.vaadin1/fa26d351fe62a6a17f5cda1287c1c6110dec413f/android-json-0.0.20131108.vaadin1.jar!/org/json/JSONObject.class

You may wish to exclude one of them to ensure predictable runtime behavior

2025-05-06 22:37:34 [Test worker] [NONE] INFO  com.attendly.ApplicationTests - Starting ApplicationTests using Java 21.0.6 with PID 41751 (started by user in /Users/user/study/attendly-api)
2025-05-06 22:37:34 [Test worker] [NONE] DEBUG com.attendly.ApplicationTests - Running with Spring Boot v3.4.5, Spring v6.2.6
2025-05-06 22:37:34 [Test worker] [NONE] INFO  com.attendly.ApplicationTests - The following 1 profile is active: "test"
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for JwtTokenProvider name=jwtTokenProvider bean#23
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsService name=customUserDetailsService bean#24
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for JwtAuthenticationFilter name=jwtAuthenticationFilter bean#25
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AuthenticationManager name=authenticationManager bean#26
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for P6spyConfig name=p6spyConfig bean#27
2025-05-06 22:37:35 [Test worker] [NONE] WARN  org.hibernate.orm.deprecation - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists attendance cascade 
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists batch_job_logs cascade 
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists batch_jobs cascade 
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists department cascade 
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_group cascade 
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_leader_history cascade 
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_member_history cascade 
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists leader_delegation cascade 
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists system_log cascade 
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists system_settings cascade 
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade 
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists village cascade 
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists village_leader cascade 
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table attendance (
        qt_count integer not null,
        week_start date not null,
        created_at timestamp(6) not null,
        created_by bigint not null,
        gbs_id bigint not null,
        id bigint generated by default as identity,
        member_id bigint not null,
        updated_at timestamp(6) not null,
        ministry enum ('A','B','C') not null,
        worship enum ('O','X') not null,
        primary key (id)
    )
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table batch_job_logs (
        batch_job_id bigint not null,
        id bigint generated by default as identity,
        timestamp timestamp(6) not null,
        level varchar(10) not null,
        message TEXT not null,
        primary key (id)
    )
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table batch_jobs (
        created_at timestamp(6) not null,
        finished_at timestamp(6),
        id bigint generated by default as identity,
        schedule_time timestamp(6),
        started_at timestamp(6),
        error_message TEXT,
        parameters TEXT,
        job_type enum ('DATA_BACKUP','GBS_REORGANIZATION','REMINDER','STATISTICS_GENERATION') not null,
        status enum ('CANCELLED','COMPLETED','FAILED','QUEUED','RUNNING') not null,
        primary key (id)
    )
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table department (
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        name varchar(50) not null,
        primary key (id)
    )
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table gbs_group (
        term_end_dt date not null,
        term_start_dt date not null,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        village_id bigint not null,
        name varchar(50) not null,
        primary key (id)
    )
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table gbs_leader_history (
        end_dt date,
        start_dt date not null,
        created_at timestamp(6) not null,
        gbs_id bigint not null,
        id bigint generated by default as identity,
        leader_id bigint not null,
        updated_at timestamp(6) not null,
        primary key (id)
    )
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table gbs_member_history (
        end_dt date,
        start_dt date not null,
        created_at timestamp(6) not null,
        gbs_id bigint not null,
        id bigint generated by default as identity,
        member_id bigint not null,
        updated_at timestamp(6) not null,
        primary key (id)
    )
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table leader_delegation (
        end_dt date,
        start_dt date not null,
        created_at timestamp(6) not null,
        delegatee_id bigint not null,
        delegator_id bigint not null,
        gbs_id bigint not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        primary key (id)
    )
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table system_log (
        id bigint generated by default as identity,
        timestamp timestamp(6) not null,
        user_id bigint,
        level varchar(10) not null,
        category varchar(20) not null,
        ip_address varchar(39),
        server_instance varchar(50),
        message varchar(1000) not null,
        additional_info TEXT,
        user_agent varchar(255),
        primary key (id)
    )
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table system_settings (
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        setting_key varchar(50) not null unique,
        description varchar(200),
        setting_value varchar(1000) not null,
        primary key (id)
    )
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table users (
        birth_date date,
        created_at timestamp(6) not null,
        department_id bigint not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        phone_number varchar(20),
        name varchar(50) not null,
        email varchar(100) unique,
        password varchar(100),
        role enum ('ADMIN','LEADER','MEMBER','MINISTER','VILLAGE_LEADER') not null,
        primary key (id)
    )
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table village (
        created_at timestamp(6) not null,
        department_id bigint not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        name varchar(50) not null,
        primary key (id)
    )
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table village_leader (
        end_dt date,
        start_dt date not null,
        created_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        user_id bigint not null,
        village_id bigint not null,
        primary key (user_id, village_id)
    )
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists attendance 
       add constraint FKg7dtnois2g6ghgu4bl5gym92u 
       foreign key (created_by) 
       references users
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists attendance 
       add constraint FKjn82a3qvj1ho9ajauog7v0f12 
       foreign key (gbs_id) 
       references gbs_group
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists attendance 
       add constraint FK8f5fy874njy44gc8df63m187j 
       foreign key (member_id) 
       references users
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists batch_job_logs 
       add constraint FKsoyil2u66we091nme35nm6ste 
       foreign key (batch_job_id) 
       references batch_jobs
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_group 
       add constraint FKqvo83ldaqku2vayubiutcly4e 
       foreign key (village_id) 
       references village
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_leader_history 
       add constraint FKjls4dwfsilybq2sa0x35ml3f9 
       foreign key (gbs_id) 
       references gbs_group
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_leader_history 
       add constraint FK810qej66ysfs5j8cqtqbtsr1h 
       foreign key (leader_id) 
       references users
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_member_history 
       add constraint FK21l70t0cajgfj6rehvc9s21tc 
       foreign key (gbs_id) 
       references gbs_group
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_member_history 
       add constraint FKasr4qspnvhydc2xbei8rlysxy 
       foreign key (member_id) 
       references users
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists leader_delegation 
       add constraint FKs9xr3vr71pux3puk06pwiivfl 
       foreign key (delegatee_id) 
       references users
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists leader_delegation 
       add constraint FKqg0jdq2i5pfckjlqr5xfhkguc 
       foreign key (delegator_id) 
       references users
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists leader_delegation 
       add constraint FKjr2i1o6vb363gnkm6qahsaji6 
       foreign key (gbs_id) 
       references gbs_group
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint FKfi832e3qv89fq376fuh8920y4 
       foreign key (department_id) 
       references department
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists village 
       add constraint FKmp8tdn2nuthupcstb37lgifs4 
       foreign key (department_id) 
       references department
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists village_leader 
       add constraint FK446snb5j15qqkonffm6tyepm0 
       foreign key (user_id) 
       references users
2025-05-06 22:37:35 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists village_leader 
       add constraint FK9rpuj47r5r477bys6jmfthoeo 
       foreign key (village_id) 
       references village
2025-05-06 22:37:36 [Test worker] [NONE] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-05-06 22:37:36 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.LogTestController:
	{GET [/api/test/logging/info/{message}]}: testInfoLog(String)
	{GET [/api/test/logging/warn/{message}]}: testWarnLog(String)
	{GET [/api/test/logging/error/{message}]}: testErrorLog(String)
	{GET [/api/test/logging/security/{message}]}: testSecurityEvent(String)
	{GET [/api/test/logging/exception/{message}]}: testException(String)
2025-05-06 22:37:36 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.AttendanceController:
	{POST [/api/attendance]}: createAttendances(AttendanceBatchRequest)
	{GET [/api/attendance]}: getAttendancesByGbs(long,LocalDate)
	{GET [/api/village/{id}/attendance]}: getVillageAttendance(long,LocalDate)
2025-05-06 22:37:36 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.AuthController:
	{POST [/auth/login]}: login(LoginRequest)
	{POST [/auth/refresh]}: refreshToken(TokenRefreshRequest)
	{POST [/auth/signup]}: signup(SignupRequest)
	{GET [/auth/me]}: getCurrentUser(UserDetailsAdapter)
2025-05-06 22:37:36 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.GbsMemberController:
	{GET [/api/v1/gbs-members/{gbsId}]}: getGbsMembers(long,LocalDate,Authentication)
	{GET [/api/v1/gbs-members/my-gbs]}: getMyGbs(Authentication)
	{GET [/api/v1/gbs-members/leaders/{leaderId}/history]}: getLeaderGbsHistories(long,Authentication)
2025-05-06 22:37:36 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.LeaderDelegationController:
	{GET [/api/delegations/active]}: getActiveDelegations(long,LocalDate)
	{POST [/api/delegations]}: createDelegation(DelegationCreateRequest)
2025-05-06 22:37:36 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.StatisticsController:
	{GET [/api/departments/{id}/report]}: getDepartmentStatistics(long,LocalDate,LocalDate)
	{GET [/api/villages/{id}/report]}: getVillageStatistics(long,LocalDate,LocalDate)
	{GET [/api/gbs/{id}/report]}: getGbsStatistics(long,LocalDate,LocalDate)
2025-05-06 22:37:36 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.UserController:
	{POST [/api/users/by-roles]}: getUsersByRoles(UserListByRolesRequest)
2025-05-06 22:37:36 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.a.AdminBatchController:
	{GET [/api/admin/batch/jobs]}: getBatchJobs(BatchJobType,BatchJobStatus,LocalDateTime,LocalDateTime,LocalDateTime,LocalDateTime,Pageable)
	{POST [/api/admin/batch/jobs]}: createBatchJob(BatchJobRequest)
	{POST [/api/admin/batch/jobs/{jobId}/cancel]}: cancelBatchJob(long,BatchJobCancelRequest)
	{POST [/api/admin/batch/jobs/{jobId}/restart]}: restartBatchJob(long,BatchJobRestartRequest)
	{GET [/api/admin/batch/jobs/{jobId}]}: getBatchJob(long)
	{GET [/api/admin/batch/jobs/{jobId}/logs]}: getBatchJobLogs(long)
2025-05-06 22:37:36 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.a.AdminLogController:
	{GET [/api/admin/logs/levels]}: getLogLevels()
	{GET [/api/admin/logs/{id}]}: getLogById(long)
	{GET [/api/admin/logs]}: getLogs(String,String,LocalDateTime,LocalDateTime,Long,String,int,int,String)
	{GET [/api/admin/logs/categories]}: getLogCategories()
2025-05-06 22:37:36 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.a.AdminOrganizationController:
	{POST [/api/admin/organization/gbs-groups/{gbsGroupId}/members]}: assignMemberToGbs(long,GbsMemberAssignRequest)
	{POST [/api/admin/organization/departments]}: createDepartment(DepartmentCreateRequest)
	{PUT [/api/admin/organization/departments/{departmentId}]}: updateDepartment(long,DepartmentUpdateRequest)
	{DELETE [/api/admin/organization/departments/{departmentId}]}: deleteDepartment(long)
	{POST [/api/admin/organization/villages]}: createVillage(VillageCreateRequest)
	{PUT [/api/admin/organization/villages/{villageId}]}: updateVillage(long,VillageUpdateRequest)
	{POST [/api/admin/organization/gbs-groups]}: createGbsGroup(GbsGroupCreateRequest)
	{PUT [/api/admin/organization/gbs-groups/{gbsGroupId}]}: updateGbsGroup(long,GbsGroupUpdateRequest)
	{POST [/api/admin/organization/gbs-groups/{gbsGroupId}/leaders]}: assignLeaderToGbs(long,GbsLeaderAssignRequest)
	{POST [/api/admin/organization/reorganization]}: executeGbsReorganization(GbsReorganizationRequest)
	{GET [/api/admin/organization/departments/{departmentId}]}: getDepartment(long)
	{GET [/api/admin/organization/departments]}: getAllDepartments()
2025-05-06 22:37:36 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.a.AdminSystemController:
	{DELETE [/api/admin/system/settings/{key}]}: deleteSystemSetting(String)
	{POST [/api/admin/system/settings]}: saveSystemSetting(SystemSettingRequest)
	{GET [/api/admin/system/settings/{key}]}: getSystemSetting(String)
	{POST [/api/admin/system/email-settings]}: saveEmailSettings(EmailSettingRequest)
	{POST [/api/admin/system/slack-settings]}: saveSlackSettings(SlackSettingRequest)
	{GET [/api/admin/system/settings]}: getAllSystemSettings()
	{GET [/api/admin/system/email-settings]}: getEmailSettings()
	{POST [/api/admin/system/attendance-settings]}: saveAttendanceSettings(AttendanceSettingRequest)
	{POST [/api/admin/system/security-policies]}: saveSecurityPolicies(SecurityPolicyRequest)
	{POST [/api/admin/system/batch-settings]}: saveBatchSettings(BatchSettingRequest)
2025-05-06 22:37:36 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.a.AdminUserController:
	{POST [/api/admin/users]}: createUser(UserCreateRequest)
	{PUT [/api/admin/users/{userId}]}: updateUser(long,UserUpdateRequest)
	{POST [/api/admin/users/{userId}/reset-password]}: resetPassword(long,UserPasswordResetRequest)
	{DELETE [/api/admin/users/{userId}]}: deleteUser(long)
	{GET [/api/admin/users]}: getAllUsers(Pageable)
	{POST [/api/admin/users/bulk]}: bulkCreateUsers(UserBulkCreateRequest)
	{GET [/api/admin/users/{userId}]}: getUser(long)
2025-05-06 22:37:36 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	o.s.b.a.w.s.e.BasicErrorController:
	{ [/error], produces [text/html]}: errorHtml(HttpServletRequest,HttpServletResponse)
	{ [/error]}: error(HttpServletRequest)
2025-05-06 22:37:36 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	o.s.w.a.MultipleOpenApiWebMvcResource:
	{GET [/api-docs/{group}], produces [application/json]}: openapiJson(HttpServletRequest,String,String,Locale)
	{GET [/api-docs.yaml/{group}], produces [application/vnd.oai.openapi]}: openapiYaml(HttpServletRequest,String,String,Locale)
2025-05-06 22:37:36 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	o.s.w.a.OpenApiWebMvcResource:
	{GET [/api-docs], produces [application/json]}: openapiJson(HttpServletRequest,String,Locale)
	{GET [/api-docs.yaml], produces [application/vnd.oai.openapi]}: openapiYaml(HttpServletRequest,String,Locale)
2025-05-06 22:37:36 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	o.s.w.u.SwaggerWelcomeWebMvc:
	{GET [/swagger-ui.html]}: redirectToUi(HttpServletRequest)
2025-05-06 22:37:36 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	o.s.w.u.SwaggerConfigResource:
	{GET [/api-docs/swagger-config], produces [application/json]}: openapiJson(HttpServletRequest)
2025-05-06 22:37:36 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 'beanNameHandlerMapping' {}
2025-05-06 22:37:36 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 'resourceHandlerMapping' {/webjars/**=ResourceHttpRequestHandler [classpath [META-INF/resources/webjars/]], /**=ResourceHttpRequestHandler [classpath [META-INF/resources/], classpath [resources/], classpath [static/], classpath [public/], ServletContext [/]], /swagger-ui*/*swagger-initializer.js=ResourceHttpRequestHandler [classpath [META-INF/resources/webjars/]], /swagger-ui*/**=ResourceHttpRequestHandler [classpath [META-INF/resources/webjars/]]}
2025-05-06 22:37:37 [Test worker] [NONE] INFO  com.attendly.ApplicationTests - Started ApplicationTests in 2.353 seconds (process running for 5.081)
2025-05-06 22:37:37 [Test worker] [NONE] WARN  DiscordLogger - [시스템이벤트] 애플리케이션 시작: attendly-api (프로필: test)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(jwtTokenProvider bean#23)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(customUserDetailsService bean#24)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtAuthenticationFilter(jwtAuthenticationFilter bean#25)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#26)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [P6spyConfig(p6spyConfig bean#27)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(jwtTokenProvider bean#23)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(customUserDetailsService bean#24)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtAuthenticationFilter(jwtAuthenticationFilter bean#25)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#26)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [P6spyConfig(p6spyConfig bean#27)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:37 [Test worker] [NONE] WARN  o.s.b.t.j.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer - 

Found multiple occurrences of org.json.JSONObject on the class path:

	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/org.json/json/20230618/1ae16df7d556d02713e241086f878399e99260d6/json-20230618.jar!/org/json/JSONObject.class
	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/com.vaadin.external.google/android-json/0.0.20131108.vaadin1/fa26d351fe62a6a17f5cda1287c1c6110dec413f/android-json-0.0.20131108.vaadin1.jar!/org/json/JSONObject.class

You may wish to exclude one of them to ensure predictable runtime behavior

2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberService name=#28
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=#29
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#30
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #29#31
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMembersListResponse name=child of #28#32
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=1, name='리더', role=LEADER) on UserService(#29).getCurrentUser(Authentication(#30))
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsMembersListResponse(gbsId=1, gbsName=GBS1, memberCount=2, members=[GbsMemberResponse(id=2, name=조원1, email=member1@example.com, birthDate=2000-01-01, joinDate=2023-01-01, phoneNumber=null), GbsMemberResponse(id=3, name=조원2, email=member2@example.com, birthDate=2000-02-02, joinDate=2023-01-01, phoneNumber=null)]) on GbsMemberService(#28).getGbsMembers(1, 2025-05-06, User(id=1, name='리더', role=LEADER))
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberService name=#33
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=#34
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#35
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #34#36
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMembersListResponse name=child of #33#37
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=1, name='어드민', role=ADMIN) on UserService(#34).getCurrentUser(Authentication(#35))
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsMembersListResponse(gbsId=1, gbsName=GBS1, memberCount=2, members=[GbsMemberResponse(id=1, name=조원1, email=member1@example.com, birthDate=2000-01-01, joinDate=2023-01-01, phoneNumber=null), GbsMemberResponse(id=2, name=조원2, email=member2@example.com, birthDate=2000-02-02, joinDate=2023-01-01, phoneNumber=null)]) on GbsMemberService(#33).getGbsMembers(1, 2025-05-06, User(id=1, name='어드민', role=ADMIN))
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberService name=#38
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=#39
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#40
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #39#41
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderGbsResponse name=child of #38#42
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=1, name='홍길동', role=LEADER) on UserService(#39).getCurrentUser(Authentication(#40))
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LeaderGbsResponse(gbsId=1, gbsName=Test GBS, villageId=1, villageName=Test Village, leaderId=1, leaderName=홍길동, startDate=2025-05-06) on GbsMemberService(#38).getGbsForLeader(1)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberService name=#43
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=#44
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#45
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #44#46
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMembersListResponse name=child of #43#47
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=1, name='위임받은리더', role=LEADER) on UserService(#44).getCurrentUser(Authentication(#45))
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsMembersListResponse(gbsId=1, gbsName=GBS1, memberCount=2, members=[GbsMemberResponse(id=3, name=조원1, email=member1@example.com, birthDate=2000-01-01, joinDate=2023-01-01, phoneNumber=null), GbsMemberResponse(id=4, name=조원2, email=member2@example.com, birthDate=2000-02-02, joinDate=2023-01-01, phoneNumber=null)]) on GbsMemberService(#43).getGbsMembers(1, 2025-05-06, User(id=1, name='위임받은리더', role=LEADER))
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberService name=#48
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=#49
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#50
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #49#51
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderGbsHistoryListResponse name=child of #48#52
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=1, name='홍길동', role=LEADER) on UserService(#49).getCurrentUser(Authentication(#50))
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LeaderGbsHistoryListResponse(leaderId=1, leaderName=홍길동, historyCount=2, histories=[LeaderGbsHistoryResponse(historyId=2, gbsId=2, gbsName=GBS2, villageId=1, villageName=1마을, startDate=2023-01-01, endDate=null, isActive=true, members=[GbsMemberResponse(id=2, name=조원1, email=member1@example.com, birthDate=2000-01-01, joinDate=2022-01-01, phoneNumber=null), GbsMemberResponse(id=3, name=조원2, email=member2@example.com, birthDate=2000-02-02, joinDate=2022-01-01, phoneNumber=null)]), LeaderGbsHistoryResponse(historyId=1, gbsId=1, gbsName=GBS1, villageId=1, villageName=1마을, startDate=2022-01-01, endDate=2022-12-31, isActive=false, members=[GbsMemberResponse(id=2, name=조원1, email=member1@example.com, birthDate=2000-01-01, joinDate=2022-01-01, phoneNumber=null), GbsMemberResponse(id=3, name=조원2, email=member2@example.com, birthDate=2000-02-02, joinDate=2022-01-01, phoneNumber=null)])]) on GbsMemberService(#48).getLeaderGbsHistories(1, User(id=1, name='홍길동', role=LEADER))
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberService name=#53
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=#54
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#55
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #54#56
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderGbsHistoryListResponse name=child of #53#57
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=99, name='관리자', role=ADMIN) on UserService(#54).getCurrentUser(Authentication(#55))
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LeaderGbsHistoryListResponse(leaderId=1, leaderName=홍길동, historyCount=1, histories=[LeaderGbsHistoryResponse(historyId=1, gbsId=1, gbsName=GBS1, villageId=1, villageName=1마을, startDate=2022-01-01, endDate=2022-12-31, isActive=false, members=[])]) on GbsMemberService(#53).getLeaderGbsHistories(1, User(id=99, name='관리자', role=ADMIN))
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationService name=leaderDelegationService#58
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.LeaderDelegationController:
	{GET [/api/delegations/active]}: getActiveDelegations(long,LocalDate)
	{POST [/api/delegations]}: createDelegation(DelegationCreateRequest)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegation name=#59
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegation name=child of leaderDelegationService#58#60
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LeaderDelegation(#59) on LeaderDelegationService(leaderDelegationService#58).createDelegation(DelegationCreateRequest(delegatorId=1, delegateId=2, gbsGroupId=1, startDate=2025-05-07, endDate=2025-05-13))
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on LeaderDelegation(#59).getId()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #59#61
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(child of #59#61) on LeaderDelegation(#59).getDelegator()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 0 on User(child of #59#61).getId()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(child of #59#61) on LeaderDelegation(#59).getDelegator()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering  on User(child of #59#61).getName()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #59#62
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(child of #59#62) on LeaderDelegation(#59).getDelegatee()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 0 on User(child of #59#62).getId()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(child of #59#62) on LeaderDelegation(#59).getDelegatee()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering  on User(child of #59#62).getName()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroup name=child of #59#63
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsGroup(child of #59#63) on LeaderDelegation(#59).getGbsGroup()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 0 on GbsGroup(child of #59#63).getId()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsGroup(child of #59#63) on LeaderDelegation(#59).getGbsGroup()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering  on GbsGroup(child of #59#63).getName()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LocalDate name=child of #59#64
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LocalDate(child of #59#64) on LeaderDelegation(#59).getStartDate()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LocalDate name=child of #59#65
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LocalDate(child of #59#65) on LeaderDelegation(#59).getEndDate()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 0 on LocalDate(child of #59#64).getYear()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 0 on LocalDate(child of #59#64).getMonthValue()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 0 on LocalDate(child of #59#64).getDayOfMonth()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 0 on LocalDate(child of #59#65).getYear()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 0 on LocalDate(child of #59#65).getMonthValue()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 0 on LocalDate(child of #59#65).getDayOfMonth()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationService name=leaderDelegationService#66
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.LeaderDelegationController:
	{GET [/api/delegations/active]}: getActiveDelegations(long,LocalDate)
	{POST [/api/delegations]}: createDelegation(DelegationCreateRequest)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of leaderDelegationService#66#67
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on LeaderDelegationService(leaderDelegationService#66).findActiveDelegations(1, 2025-05-06)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationService name=leaderDelegationService#68
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.LeaderDelegationController:
	{GET [/api/delegations/active]}: getActiveDelegations(long,LocalDate)
	{POST [/api/delegations]}: createDelegation(DelegationCreateRequest)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#69
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#70
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroup name=#71
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegation name=#72
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #72#73
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #72#74
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroup name=child of #72#75
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LocalDate name=child of #72#76
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LocalDate name=child of #72#77
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of leaderDelegationService#68#78
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [LeaderDelegation(#72)] on LeaderDelegationService(leaderDelegationService#68).findActiveDelegations(2, 2025-05-06)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on LeaderDelegation(#72).getId()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#69) on LeaderDelegation(#72).getDelegator()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on User(#69).getId()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#69) on LeaderDelegation(#72).getDelegator()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 김위임자 on User(#69).getName()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#70) on LeaderDelegation(#72).getDelegatee()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 2 on User(#70).getId()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#70) on LeaderDelegation(#72).getDelegatee()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 이수임자 on User(#70).getName()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsGroup(#71) on LeaderDelegation(#72).getGbsGroup()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on GbsGroup(#71).getId()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsGroup(#71) on LeaderDelegation(#72).getGbsGroup()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 테스트 소그룹 on GbsGroup(#71).getName()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 2025-05-05 on LeaderDelegation(#72).getStartDate()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 2025-05-11 on LeaderDelegation(#72).getEndDate()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $[0]['id']
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $[0]['delegatorName']
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationService name=leaderDelegationService#79
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.LeaderDelegationController:
	{GET [/api/delegations/active]}: getActiveDelegations(long,LocalDate)
	{POST [/api/delegations]}: createDelegation(DelegationCreateRequest)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#80
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#81
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroup name=#82
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegation name=#83
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #83#84
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #83#85
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroup name=child of #83#86
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LocalDate name=child of #83#87
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LocalDate name=child of #83#88
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of leaderDelegationService#79#89
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [LeaderDelegation(#83)] on LeaderDelegationService(leaderDelegationService#79).findActiveDelegations(2, 2025-05-06)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on LeaderDelegation(#83).getId()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#80) on LeaderDelegation(#83).getDelegator()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on User(#80).getId()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#80) on LeaderDelegation(#83).getDelegator()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 김위임자 on User(#80).getName()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#81) on LeaderDelegation(#83).getDelegatee()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 2 on User(#81).getId()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#81) on LeaderDelegation(#83).getDelegatee()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 이수임자 on User(#81).getName()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsGroup(#82) on LeaderDelegation(#83).getGbsGroup()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on GbsGroup(#82).getId()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsGroup(#82) on LeaderDelegation(#83).getGbsGroup()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 테스트 소그룹 on GbsGroup(#82).getName()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 2025-05-05 on LeaderDelegation(#83).getStartDate()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 2025-05-11 on LeaderDelegation(#83).getEndDate()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $[0]['id']
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $[0]['delegatorId']
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $[0]['delegatorName']
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $[0]['delegateeId']
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $[0]['delegateeName']
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $[0]['gbsGroupId']
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $[0]['gbsGroupName']
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $[0]['startDate']
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $[0]['endDate']
2025-05-06 22:37:37 [Test worker] [NONE] WARN  o.s.b.t.j.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer - 

Found multiple occurrences of org.json.JSONObject on the class path:

	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/org.json/json/20230618/1ae16df7d556d02713e241086f878399e99260d6/json-20230618.jar!/org/json/JSONObject.class
	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/com.vaadin.external.google/android-json/0.0.20131108.vaadin1/fa26d351fe62a6a17f5cda1287c1c6110dec413f/android-json-0.0.20131108.vaadin1.jar!/org/json/JSONObject.class

You may wish to exclude one of them to ensure predictable runtime behavior

2025-05-06 22:37:37 [Test worker] [NONE] INFO  c.a.a.controller.UserControllerTest - Starting UserControllerTest using Java 21.0.6 with PID 41751 (started by user in /Users/user/study/attendly-api)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG c.a.a.controller.UserControllerTest - Running with Spring Boot v3.4.5, Spring v6.2.6
2025-05-06 22:37:37 [Test worker] [NONE] INFO  c.a.a.controller.UserControllerTest - The following 1 profile is active: "dev"
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=com.attendly.service.UserService#0 bean#90
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for JwtTokenProvider name=com.attendly.security.JwtTokenProvider#0 bean#91
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AuthenticationManager name=authenticationManager bean#92
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsService name=org.springframework.security.core.userdetails.UserDetailsService#0 bean#93
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.UserController:
	{POST [/api/users/by-roles]}: getUsersByRoles(UserListByRolesRequest)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	o.s.b.a.w.s.e.BasicErrorController:
	{ [/error], produces [text/html]}: errorHtml(HttpServletRequest,HttpServletResponse)
	{ [/error]}: error(HttpServletRequest)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 'beanNameHandlerMapping' {}
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 'resourceHandlerMapping' {/webjars/**=ResourceHttpRequestHandler [classpath [META-INF/resources/webjars/]], /**=ResourceHttpRequestHandler [classpath [META-INF/resources/], classpath [resources/], classpath [static/], classpath [public/], ServletContext [/]]}
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG com.attendly.config.RequestIdFilter - Filter 'requestIdFilter' configured for use
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG c.a.config.ContentCachingFilter - Filter 'contentCachingFilter' configured for use
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG c.a.security.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-05-06 22:37:37 [Test worker] [NONE] INFO  c.a.a.controller.UserControllerTest - Started UserControllerTest in 0.334 seconds (process running for 5.774)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#90)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#91)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#92)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#93)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#90)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#91)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#92)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#93)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of com.attendly.service.UserService#0 bean#90#94
2025-05-06 22:37:37 [Test worker] [a21c2985-a880-4512-a3fb-4e9184d86346] DEBUG i.m.i.r.states.AnsweringState - Answering [UserResponse(id=1, name=Leader User, email=leader@example.com, phoneNumber=010-1234-5678, role=LEADER, departmentId=1, departmentName=IT 부서, birthDate=1990-01-01, createdAt=2025-05-06T22:37:37.816116, updatedAt=2025-05-06T22:37:37.816116), UserResponse(id=2, name=Member User, email=member@example.com, phoneNumber=010-9876-5432, role=MEMBER, departmentId=1, departmentName=IT 부서, birthDate=1995-05-05, createdAt=2025-05-06T22:37:37.816116, updatedAt=2025-05-06T22:37:37.816116)] on UserService(com.attendly.service.UserService#0 bean#90).getUsersByRoles(UserListByRolesRequest(roles=[LEADER, MEMBER]))
2025-05-06 22:37:37 [Test worker] [a21c2985-a880-4512-a3fb-4e9184d86346] INFO  c.a.a.interceptor.ApiLogInterceptor - POST /api/users/by-roles - 200 (15 ms)
2025-05-06 22:37:37 [Test worker] [a21c2985-a880-4512-a3fb-4e9184d86346] DEBUG c.a.a.interceptor.ApiLogInterceptor - API 상세 정보: {"requestId":"a21c2985-a880-4512-a3fb-4e9184d86346","apiPath":"/api/users/by-roles","method":"POST","status":200,"duration":15,"requestHeaders":{"Content-Type":"application/json;charset=UTF-8","Content-Length":"29"},"responseHeaders":{"X-Request-ID":"a21c2985-a880-4512-a3fb-4e9184d86346","Content-Type":"application/json","X-Content-Type-Options":"nosniff","X-XSS-Protection":"0","Cache-Control":"no-cache, no-store, max-age=0, must-revalidate","Pragma":"no-cache","Expires":"0","X-Frame-Options":"DENY"},"requestBody":null,"responseBody":null,"queryParams":null}
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['users']
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['users'].length()
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['users'][0]['name']
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['users'][0]['role']
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['users'][1]['name']
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['users'][1]['role']
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of com.attendly.service.UserService#0 bean#90#95
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#90)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#91)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#92)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#93)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#90)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#91)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#92)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#93)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of com.attendly.service.UserService#0 bean#90#96
2025-05-06 22:37:37 [Test worker] [7a0cdd82-2c9e-44a7-a5bf-9df8f39383a6] ERROR c.a.exception.GlobalExceptionHandler - MethodArgumentNotValidException: {}
org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity<com.attendly.api.dto.UserListByRolesResponse> com.attendly.api.controller.UserController.getUsersByRoles(com.attendly.api.dto.UserListByRolesRequest): [Field error in object 'userListByRolesRequest' on field 'roles': rejected value [[]]; codes [NotEmpty.userListByRolesRequest.roles,NotEmpty.roles,NotEmpty.java.util.List,NotEmpty]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [userListByRolesRequest.roles,roles]; arguments []; default message [roles]]; default message [최소 하나 이상의 역할이 필요합니다]] 
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:159)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:227)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:181)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:72)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:165)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at com.attendly.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.kt:27)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:165)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at com.attendly.config.RequestIdFilter.doFilter(RequestIdFilter.kt:34)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:201)
	at com.attendly.api.controller.UserControllerTest.should return 400 when request is invalid(UserControllerTest.kt:125)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)
	at java.base/java.lang.reflect.Method.invoke(Unknown Source)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:767)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$8(TestMethodTestDescriptor.java:217)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:156)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(Unknown Source)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(Unknown Source)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:124)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:99)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:94)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)
	at java.base/java.lang.reflect.Method.invoke(Unknown Source)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:92)
	at jdk.proxy1/jdk.proxy1.$Proxy4.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:200)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:132)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:103)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:63)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:121)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
2025-05-06 22:37:37 [Test worker] [7a0cdd82-2c9e-44a7-a5bf-9df8f39383a6] WARN  c.a.a.interceptor.ApiLogInterceptor - POST /api/users/by-roles - 400 (17 ms)
2025-05-06 22:37:37 [Test worker] [7a0cdd82-2c9e-44a7-a5bf-9df8f39383a6] DEBUG c.a.a.interceptor.ApiLogInterceptor - API 상세 정보: {"requestId":"7a0cdd82-2c9e-44a7-a5bf-9df8f39383a6","apiPath":"/api/users/by-roles","method":"POST","status":400,"duration":17,"requestHeaders":{"Content-Type":"application/json;charset=UTF-8","Content-Length":"12"},"responseHeaders":{"X-Request-ID":"7a0cdd82-2c9e-44a7-a5bf-9df8f39383a6","Content-Type":"application/json","X-Content-Type-Options":"nosniff","X-XSS-Protection":"0","Cache-Control":"no-cache, no-store, max-age=0, must-revalidate","Pragma":"no-cache","Expires":"0","X-Frame-Options":"DENY"},"requestBody":null,"responseBody":null,"queryParams":null}
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#90)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#91)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#92)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#93)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#90)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#91)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#92)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:37 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#93)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] WARN  o.s.b.t.j.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer - 

Found multiple occurrences of org.json.JSONObject on the class path:

	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/org.json/json/20230618/1ae16df7d556d02713e241086f878399e99260d6/json-20230618.jar!/org/json/JSONObject.class
	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/com.vaadin.external.google/android-json/0.0.20131108.vaadin1/fa26d351fe62a6a17f5cda1287c1c6110dec413f/android-json-0.0.20131108.vaadin1.jar!/org/json/JSONObject.class

You may wish to exclude one of them to ensure predictable runtime behavior

2025-05-06 22:37:38 [Test worker] [NONE] INFO  c.a.a.c.admin.AdminLogControllerTest - Starting AdminLogControllerTest using Java 21.0.6 with PID 41751 (started by user in /Users/user/study/attendly-api)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.a.a.c.admin.AdminLogControllerTest - Running with Spring Boot v3.4.5, Spring v6.2.6
2025-05-06 22:37:38 [Test worker] [NONE] INFO  c.a.a.c.admin.AdminLogControllerTest - The following 1 profile is active: "dev"
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogService name=com.attendly.service.SystemLogService#0 bean#97
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for JwtTokenProvider name=com.attendly.security.JwtTokenProvider#0 bean#98
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsService name=org.springframework.security.core.userdetails.UserDetailsService#0 bean#99
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.a.AdminLogController:
	{GET [/api/admin/logs/levels]}: getLogLevels()
	{GET [/api/admin/logs/{id}]}: getLogById(long)
	{GET [/api/admin/logs]}: getLogs(String,String,LocalDateTime,LocalDateTime,Long,String,int,int,String)
	{GET [/api/admin/logs/categories]}: getLogCategories()
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	o.s.b.a.w.s.e.BasicErrorController:
	{ [/error], produces [text/html]}: errorHtml(HttpServletRequest,HttpServletResponse)
	{ [/error]}: error(HttpServletRequest)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 'beanNameHandlerMapping' {}
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 'resourceHandlerMapping' {/webjars/**=ResourceHttpRequestHandler [classpath [META-INF/resources/webjars/]], /**=ResourceHttpRequestHandler [classpath [META-INF/resources/], classpath [resources/], classpath [static/], classpath [public/], ServletContext [/]]}
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AuthenticationManager name=#100
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 511727350 on AuthenticationManager(#100).hashCode()
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG com.attendly.config.RequestIdFilter - Filter 'requestIdFilter' configured for use
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.a.config.ContentCachingFilter - Filter 'contentCachingFilter' configured for use
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.a.security.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-05-06 22:37:38 [Test worker] [NONE] INFO  c.a.a.c.admin.AdminLogControllerTest - Started AdminLogControllerTest in 0.206 seconds (process running for 6.204)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Page name=child of com.attendly.service.SystemLogService#0 bean#97#101
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLog name=child of com.attendly.service.SystemLogService#0 bean#97#102
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLog name=child of com.attendly.service.SystemLogService#0 bean#97#103
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of com.attendly.service.SystemLogService#0 bean#97#104
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.JvmStaticMockFactory - Creating object mockk for Companion
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [Companion(object Companion)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogResponseDto name=child of object Companion#105
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogResponseDto name=child of object Companion#106
2025-05-06 22:37:38 [Test worker] [2b711538-ea71-409c-b46b-3db22a6f24aa] DEBUG i.m.i.r.states.AnsweringState - Answering null on SystemLogService(com.attendly.service.SystemLogService#0 bean#97).getLogById(999)
2025-05-06 22:37:38 [Test worker] [2b711538-ea71-409c-b46b-3db22a6f24aa] WARN  c.a.a.interceptor.ApiLogInterceptor - GET /api/admin/logs/999 - 404 (6 ms)
2025-05-06 22:37:38 [Test worker] [2b711538-ea71-409c-b46b-3db22a6f24aa] DEBUG c.a.a.interceptor.ApiLogInterceptor - API 상세 정보: {"requestId":"2b711538-ea71-409c-b46b-3db22a6f24aa","apiPath":"/api/admin/logs/999","method":"GET","status":404,"duration":6,"requestHeaders":{"Content-Type":"application/json;charset=UTF-8"},"responseHeaders":{"X-Request-ID":"2b711538-ea71-409c-b46b-3db22a6f24aa"},"requestBody":null,"responseBody":null,"queryParams":null}
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#97)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#98)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#99)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#97)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#98)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#99)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Page name=child of com.attendly.service.SystemLogService#0 bean#97#107
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLog name=child of com.attendly.service.SystemLogService#0 bean#97#108
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLog name=child of com.attendly.service.SystemLogService#0 bean#97#109
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of com.attendly.service.SystemLogService#0 bean#97#110
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [Companion(object Companion)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogResponseDto name=child of object Companion#111
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogResponseDto name=child of object Companion#112
2025-05-06 22:37:38 [Test worker] [b3062656-976e-47a7-8daf-c67eb6cd0ac9] INFO  c.a.a.interceptor.ApiLogInterceptor - GET /api/admin/logs/levels - 200 (1 ms)
2025-05-06 22:37:38 [Test worker] [b3062656-976e-47a7-8daf-c67eb6cd0ac9] DEBUG c.a.a.interceptor.ApiLogInterceptor - API 상세 정보: {"requestId":"b3062656-976e-47a7-8daf-c67eb6cd0ac9","apiPath":"/api/admin/logs/levels","method":"GET","status":200,"duration":1,"requestHeaders":{"Content-Type":"application/json;charset=UTF-8"},"responseHeaders":{"X-Request-ID":"b3062656-976e-47a7-8daf-c67eb6cd0ac9","Content-Type":"application/json","X-Content-Type-Options":"nosniff","X-XSS-Protection":"0","Cache-Control":"no-cache, no-store, max-age=0, must-revalidate","Pragma":"no-cache","Expires":"0","X-Frame-Options":"DENY"},"requestBody":null,"responseBody":null,"queryParams":null}
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $[0]
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $[1]
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $[2]
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#97)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#98)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#99)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#97)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#98)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#99)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Page name=child of com.attendly.service.SystemLogService#0 bean#97#113
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLog name=child of com.attendly.service.SystemLogService#0 bean#97#114
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLog name=child of com.attendly.service.SystemLogService#0 bean#97#115
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of com.attendly.service.SystemLogService#0 bean#97#116
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [Companion(object Companion)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogResponseDto name=child of object Companion#117
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogResponseDto name=child of object Companion#118
2025-05-06 22:37:38 [Test worker] [b220546a-b86e-4618-85a7-e5f1f14a4e7c] DEBUG i.m.i.r.states.AnsweringState - Answering com.attendly.domain.entity.SystemLog@5435123d on SystemLogService(com.attendly.service.SystemLogService#0 bean#97).getLogById(1)
2025-05-06 22:37:38 [Test worker] [b220546a-b86e-4618-85a7-e5f1f14a4e7c] DEBUG i.m.i.r.states.AnsweringState - Answering SystemLogResponseDto(id=1, level=INFO, category=APPLICATION, message=테스트 로그 메시지 1, additionalInfo=null, timestamp=2025-05-05T22:37:38.395202, ipAddress=127.0.0.1, userId=null, userAgent=null, serverInstance=null) on Companion(object Companion).from(com.attendly.domain.entity.SystemLog@5435123d)
2025-05-06 22:37:38 [Test worker] [b220546a-b86e-4618-85a7-e5f1f14a4e7c] INFO  c.a.a.interceptor.ApiLogInterceptor - GET /api/admin/logs/1 - 200 (2 ms)
2025-05-06 22:37:38 [Test worker] [b220546a-b86e-4618-85a7-e5f1f14a4e7c] DEBUG c.a.a.interceptor.ApiLogInterceptor - API 상세 정보: {"requestId":"b220546a-b86e-4618-85a7-e5f1f14a4e7c","apiPath":"/api/admin/logs/1","method":"GET","status":200,"duration":2,"requestHeaders":{"Content-Type":"application/json;charset=UTF-8"},"responseHeaders":{"X-Request-ID":"b220546a-b86e-4618-85a7-e5f1f14a4e7c","Content-Type":"application/json","X-Content-Type-Options":"nosniff","X-XSS-Protection":"0","Cache-Control":"no-cache, no-store, max-age=0, must-revalidate","Pragma":"no-cache","Expires":"0","X-Frame-Options":"DENY"},"requestBody":null,"responseBody":null,"queryParams":null}
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['id']
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['level']
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#97)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#98)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#99)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#97)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#98)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#99)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Page name=child of com.attendly.service.SystemLogService#0 bean#97#119
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLog name=child of com.attendly.service.SystemLogService#0 bean#97#120
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLog name=child of com.attendly.service.SystemLogService#0 bean#97#121
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of com.attendly.service.SystemLogService#0 bean#97#122
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [Companion(object Companion)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogResponseDto name=child of object Companion#123
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogResponseDto name=child of object Companion#124
2025-05-06 22:37:38 [Test worker] [8eb37a58-5c8b-4564-b6ce-92be5392b24f] DEBUG i.m.i.r.states.AnsweringState - Answering Page 1 of 1 containing com.attendly.domain.entity.SystemLog instances on SystemLogService(com.attendly.service.SystemLogService#0 bean#97).getLogs(null, null, null, null, null, null, Page request [number: 0, size 20, sort: timestamp: DESC])
2025-05-06 22:37:38 [Test worker] [8eb37a58-5c8b-4564-b6ce-92be5392b24f] DEBUG i.m.i.r.states.AnsweringState - Answering SystemLogResponseDto(id=1, level=INFO, category=APPLICATION, message=테스트 로그 메시지 1, additionalInfo=null, timestamp=2025-05-05T22:37:38.405221, ipAddress=127.0.0.1, userId=null, userAgent=null, serverInstance=null) on Companion(object Companion).from(com.attendly.domain.entity.SystemLog@3ba33398)
2025-05-06 22:37:38 [Test worker] [8eb37a58-5c8b-4564-b6ce-92be5392b24f] DEBUG i.m.i.r.states.AnsweringState - Answering SystemLogResponseDto(id=2, level=ERROR, category=SECURITY, message=테스트 로그 메시지 2, additionalInfo=null, timestamp=2025-05-06T22:37:38.405221, ipAddress=127.0.0.1, userId=null, userAgent=null, serverInstance=null) on Companion(object Companion).from(com.attendly.domain.entity.SystemLog@169413)
2025-05-06 22:37:38 [Test worker] [8eb37a58-5c8b-4564-b6ce-92be5392b24f] WARN  o.s.d.w.c.SpringDataJacksonConfiguration$PageModule$WarningLoggingModifier - Serializing PageImpl instances as-is is not supported, meaning that there is no guarantee about the stability of the resulting JSON structure!
	For a stable JSON structure, please use Spring Data's PagedModel (globally via @EnableSpringDataWebSupport(pageSerializationMode = VIA_DTO))
	or Spring HATEOAS and Spring Data's PagedResourcesAssembler as documented in https://docs.spring.io/spring-data/commons/reference/repositories/core-extensions.html#core.web.pageables.

2025-05-06 22:37:38 [Test worker] [8eb37a58-5c8b-4564-b6ce-92be5392b24f] INFO  c.a.a.interceptor.ApiLogInterceptor - GET /api/admin/logs - 200 (47 ms)
2025-05-06 22:37:38 [Test worker] [8eb37a58-5c8b-4564-b6ce-92be5392b24f] DEBUG c.a.a.interceptor.ApiLogInterceptor - API 상세 정보: {"requestId":"8eb37a58-5c8b-4564-b6ce-92be5392b24f","apiPath":"/api/admin/logs","method":"GET","status":200,"duration":47,"requestHeaders":{"Content-Type":"application/json;charset=UTF-8"},"responseHeaders":{"X-Request-ID":"8eb37a58-5c8b-4564-b6ce-92be5392b24f","Content-Type":"application/json","X-Content-Type-Options":"nosniff","X-XSS-Protection":"0","Cache-Control":"no-cache, no-store, max-age=0, must-revalidate","Pragma":"no-cache","Expires":"0","X-Frame-Options":"DENY"},"requestBody":null,"responseBody":null,"queryParams":null}
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['content']
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['content'].length()
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['content'][0]['level']
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['content'][1]['level']
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Page name=child of com.attendly.service.SystemLogService#0 bean#97#125
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#97)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#98)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#99)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#97)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#98)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#99)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Page name=child of com.attendly.service.SystemLogService#0 bean#97#126
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLog name=child of com.attendly.service.SystemLogService#0 bean#97#127
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLog name=child of com.attendly.service.SystemLogService#0 bean#97#128
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of com.attendly.service.SystemLogService#0 bean#97#129
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [Companion(object Companion)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogResponseDto name=child of object Companion#130
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogResponseDto name=child of object Companion#131
2025-05-06 22:37:38 [Test worker] [2a6d1b15-7af0-4ec4-9b7e-5f773e843f4a] DEBUG i.m.i.r.states.AnsweringState - Answering Page 1 of 1 containing com.attendly.domain.entity.SystemLog instances on SystemLogService(com.attendly.service.SystemLogService#0 bean#97).getLogs(ERROR, null, null, null, null, null, Page request [number: 0, size 20, sort: timestamp: DESC])
2025-05-06 22:37:38 [Test worker] [2a6d1b15-7af0-4ec4-9b7e-5f773e843f4a] DEBUG i.m.i.r.states.AnsweringState - Answering SystemLogResponseDto(id=1, level=INFO, category=APPLICATION, message=테스트 로그 메시지 1, additionalInfo=null, timestamp=2025-05-05T22:37:38.459035, ipAddress=127.0.0.1, userId=null, userAgent=null, serverInstance=null) on Companion(object Companion).from(com.attendly.domain.entity.SystemLog@1d071eac)
2025-05-06 22:37:38 [Test worker] [2a6d1b15-7af0-4ec4-9b7e-5f773e843f4a] DEBUG i.m.i.r.states.AnsweringState - Answering SystemLogResponseDto(id=2, level=ERROR, category=SECURITY, message=테스트 로그 메시지 2, additionalInfo=null, timestamp=2025-05-06T22:37:38.459035, ipAddress=127.0.0.1, userId=null, userAgent=null, serverInstance=null) on Companion(object Companion).from(com.attendly.domain.entity.SystemLog@6d9a0566)
2025-05-06 22:37:38 [Test worker] [2a6d1b15-7af0-4ec4-9b7e-5f773e843f4a] INFO  c.a.a.interceptor.ApiLogInterceptor - GET /api/admin/logs - 200 (1 ms)
2025-05-06 22:37:38 [Test worker] [2a6d1b15-7af0-4ec4-9b7e-5f773e843f4a] DEBUG c.a.a.interceptor.ApiLogInterceptor - API 상세 정보: {"requestId":"2a6d1b15-7af0-4ec4-9b7e-5f773e843f4a","apiPath":"/api/admin/logs","method":"GET","status":200,"duration":1,"requestHeaders":{"Content-Type":"application/json;charset=UTF-8"},"responseHeaders":{"X-Request-ID":"2a6d1b15-7af0-4ec4-9b7e-5f773e843f4a","Content-Type":"application/json","X-Content-Type-Options":"nosniff","X-XSS-Protection":"0","Cache-Control":"no-cache, no-store, max-age=0, must-revalidate","Pragma":"no-cache","Expires":"0","X-Frame-Options":"DENY"},"requestBody":null,"responseBody":null,"queryParams":null}
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Page name=child of com.attendly.service.SystemLogService#0 bean#97#132
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#97)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#98)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#99)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#97)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#98)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#99)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Page name=child of com.attendly.service.SystemLogService#0 bean#97#133
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLog name=child of com.attendly.service.SystemLogService#0 bean#97#134
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLog name=child of com.attendly.service.SystemLogService#0 bean#97#135
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of com.attendly.service.SystemLogService#0 bean#97#136
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [Companion(object Companion)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogResponseDto name=child of object Companion#137
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogResponseDto name=child of object Companion#138
2025-05-06 22:37:38 [Test worker] [a77c1643-b506-48a0-9766-b6f716d87c10] DEBUG i.m.i.r.states.AnsweringState - Answering [APPLICATION, SECURITY] on SystemLogService(com.attendly.service.SystemLogService#0 bean#97).getLogCategories()
2025-05-06 22:37:38 [Test worker] [a77c1643-b506-48a0-9766-b6f716d87c10] INFO  c.a.a.interceptor.ApiLogInterceptor - GET /api/admin/logs/categories - 200 (0 ms)
2025-05-06 22:37:38 [Test worker] [a77c1643-b506-48a0-9766-b6f716d87c10] DEBUG c.a.a.interceptor.ApiLogInterceptor - API 상세 정보: {"requestId":"a77c1643-b506-48a0-9766-b6f716d87c10","apiPath":"/api/admin/logs/categories","method":"GET","status":200,"duration":0,"requestHeaders":{"Content-Type":"application/json;charset=UTF-8"},"responseHeaders":{"X-Request-ID":"a77c1643-b506-48a0-9766-b6f716d87c10","Content-Type":"application/json","X-Content-Type-Options":"nosniff","X-XSS-Protection":"0","Cache-Control":"no-cache, no-store, max-age=0, must-revalidate","Pragma":"no-cache","Expires":"0","X-Frame-Options":"DENY"},"requestBody":null,"responseBody":null,"queryParams":null}
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $[0]
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $[1]
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#97)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#98)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#99)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#97)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#98)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#99)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Page name=child of com.attendly.service.SystemLogService#0 bean#97#139
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLog name=child of com.attendly.service.SystemLogService#0 bean#97#140
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLog name=child of com.attendly.service.SystemLogService#0 bean#97#141
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of com.attendly.service.SystemLogService#0 bean#97#142
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [Companion(object Companion)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogResponseDto name=child of object Companion#143
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogResponseDto name=child of object Companion#144
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#97)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#98)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#99)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#97)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#98)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#99)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] WARN  o.s.b.t.j.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer - 

Found multiple occurrences of org.json.JSONObject on the class path:

	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/org.json/json/20230618/1ae16df7d556d02713e241086f878399e99260d6/json-20230618.jar!/org/json/JSONObject.class
	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/com.vaadin.external.google/android-json/0.0.20131108.vaadin1/fa26d351fe62a6a17f5cda1287c1c6110dec413f/android-json-0.0.20131108.vaadin1.jar!/org/json/JSONObject.class

You may wish to exclude one of them to ensure predictable runtime behavior

2025-05-06 22:37:38 [Test worker] [NONE] INFO  c.a.a.c.a.AdminUserControllerTest - Starting AdminUserControllerTest using Java 21.0.6 with PID 41751 (started by user in /Users/user/study/attendly-api)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.a.a.c.a.AdminUserControllerTest - Running with Spring Boot v3.4.5, Spring v6.2.6
2025-05-06 22:37:38 [Test worker] [NONE] INFO  c.a.a.c.a.AdminUserControllerTest - The following 1 profile is active: "dev"
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AdminUserService name=com.attendly.service.AdminUserService#0 bean#145
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for JwtTokenProvider name=com.attendly.security.JwtTokenProvider#0 bean#146
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AuthenticationManager name=authenticationManager bean#147
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsService name=org.springframework.security.core.userdetails.UserDetailsService#0 bean#148
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogService name=com.attendly.service.SystemLogService#0 bean#149
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.a.AdminUserController:
	{POST [/api/admin/users]}: createUser(UserCreateRequest)
	{PUT [/api/admin/users/{userId}]}: updateUser(long,UserUpdateRequest)
	{POST [/api/admin/users/{userId}/reset-password]}: resetPassword(long,UserPasswordResetRequest)
	{DELETE [/api/admin/users/{userId}]}: deleteUser(long)
	{GET [/api/admin/users]}: getAllUsers(Pageable)
	{POST [/api/admin/users/bulk]}: bulkCreateUsers(UserBulkCreateRequest)
	{GET [/api/admin/users/{userId}]}: getUser(long)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	o.s.b.a.w.s.e.BasicErrorController:
	{ [/error], produces [text/html]}: errorHtml(HttpServletRequest,HttpServletResponse)
	{ [/error]}: error(HttpServletRequest)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 'beanNameHandlerMapping' {}
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 'resourceHandlerMapping' {/webjars/**=ResourceHttpRequestHandler [classpath [META-INF/resources/webjars/]], /**=ResourceHttpRequestHandler [classpath [META-INF/resources/], classpath [resources/], classpath [static/], classpath [public/], ServletContext [/]]}
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG com.attendly.config.RequestIdFilter - Filter 'requestIdFilter' configured for use
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.a.config.ContentCachingFilter - Filter 'contentCachingFilter' configured for use
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.a.security.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-05-06 22:37:38 [Test worker] [NONE] INFO  c.a.a.c.a.AdminUserControllerTest - Started AdminUserControllerTest in 0.14 seconds (process running for 6.588)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Unit name=child of com.attendly.service.AdminUserService#0 bean#145#150
2025-05-06 22:37:38 [Test worker] [e0ec2fee-1a58-4b07-9e0a-2d3d6b85eaf3] DEBUG i.m.i.r.states.AnsweringState - Answering kotlin.Unit on AdminUserService(com.attendly.service.AdminUserService#0 bean#145).deleteUser(1)
2025-05-06 22:37:38 [Test worker] [e0ec2fee-1a58-4b07-9e0a-2d3d6b85eaf3] INFO  c.a.a.interceptor.ApiLogInterceptor - DELETE /api/admin/users/1 - 204 (2 ms)
2025-05-06 22:37:38 [Test worker] [e0ec2fee-1a58-4b07-9e0a-2d3d6b85eaf3] DEBUG c.a.a.interceptor.ApiLogInterceptor - API 상세 정보: {"requestId":"e0ec2fee-1a58-4b07-9e0a-2d3d6b85eaf3","apiPath":"/api/admin/users/1","method":"DELETE","status":204,"duration":2,"requestHeaders":{},"responseHeaders":{"X-Request-ID":"e0ec2fee-1a58-4b07-9e0a-2d3d6b85eaf3"},"requestBody":null,"responseBody":null,"queryParams":null}
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AdminUserService(com.attendly.service.AdminUserService#0 bean#145)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#146)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#147)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#148)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#149)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AdminUserService(com.attendly.service.AdminUserService#0 bean#145)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#146)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#147)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#148)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#149)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Unit name=child of com.attendly.service.AdminUserService#0 bean#145#151
2025-05-06 22:37:38 [Test worker] [0aeceda6-f938-4a3d-92b7-5db893da3bc1] DEBUG i.m.i.r.states.AnsweringState - Answering kotlin.Unit on AdminUserService(com.attendly.service.AdminUserService#0 bean#145).resetPassword(1, UserPasswordResetRequest(newPassword=NewPassword123!))
2025-05-06 22:37:38 [Test worker] [0aeceda6-f938-4a3d-92b7-5db893da3bc1] INFO  c.a.a.interceptor.ApiLogInterceptor - POST /api/admin/users/1/reset-password - 200 (4 ms)
2025-05-06 22:37:38 [Test worker] [0aeceda6-f938-4a3d-92b7-5db893da3bc1] DEBUG c.a.a.interceptor.ApiLogInterceptor - API 상세 정보: {"requestId":"0aeceda6-f938-4a3d-92b7-5db893da3bc1","apiPath":"/api/admin/users/1/reset-password","method":"POST","status":200,"duration":4,"requestHeaders":{"Content-Type":"application/json;charset=UTF-8","Content-Length":"33"},"responseHeaders":{"X-Request-ID":"0aeceda6-f938-4a3d-92b7-5db893da3bc1"},"requestBody":null,"responseBody":null,"queryParams":null}
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AdminUserService(com.attendly.service.AdminUserService#0 bean#145)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#146)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#147)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#148)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#149)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AdminUserService(com.attendly.service.AdminUserService#0 bean#145)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#146)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#147)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#148)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#149)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserResponse name=child of com.attendly.service.AdminUserService#0 bean#145#152
2025-05-06 22:37:38 [Test worker] [76c677dc-f7bf-4af5-bc98-1b4abf64ccd2] DEBUG i.m.i.r.states.AnsweringState - Answering UserResponse(id=1, name=홍길동, email=hong@example.com, phoneNumber=010-1234-5678, role=LEADER, departmentId=1, departmentName=청년부, birthDate=null, createdAt=2025-05-06T22:37:38.671716, updatedAt=2025-05-06T22:37:38.671723) on AdminUserService(com.attendly.service.AdminUserService#0 bean#145).getUser(1)
2025-05-06 22:37:38 [Test worker] [76c677dc-f7bf-4af5-bc98-1b4abf64ccd2] INFO  c.a.a.interceptor.ApiLogInterceptor - GET /api/admin/users/1 - 200 (7 ms)
2025-05-06 22:37:38 [Test worker] [76c677dc-f7bf-4af5-bc98-1b4abf64ccd2] DEBUG c.a.a.interceptor.ApiLogInterceptor - API 상세 정보: {"requestId":"76c677dc-f7bf-4af5-bc98-1b4abf64ccd2","apiPath":"/api/admin/users/1","method":"GET","status":200,"duration":7,"requestHeaders":{},"responseHeaders":{"X-Request-ID":"76c677dc-f7bf-4af5-bc98-1b4abf64ccd2","Content-Type":"application/json","X-Content-Type-Options":"nosniff","X-XSS-Protection":"0","Cache-Control":"no-cache, no-store, max-age=0, must-revalidate","Pragma":"no-cache","Expires":"0","X-Frame-Options":"DENY"},"requestBody":null,"responseBody":null,"queryParams":null}
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['id']
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['name']
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['email']
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['phoneNumber']
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['role']
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AdminUserService(com.attendly.service.AdminUserService#0 bean#145)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#146)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#147)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#148)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#149)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AdminUserService(com.attendly.service.AdminUserService#0 bean#145)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#146)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#147)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#148)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#149)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserBulkCreateResponse name=child of com.attendly.service.AdminUserService#0 bean#145#153
2025-05-06 22:37:38 [Test worker] [b63d7f7d-2581-4963-89f6-d3d201a96353] DEBUG i.m.i.r.states.AnsweringState - Answering UserBulkCreateResponse(createdCount=2, failedCount=0, failedEmails=[]) on AdminUserService(com.attendly.service.AdminUserService#0 bean#145).bulkCreateUsers(UserBulkCreateRequest(users=[UserCreateRequest(name=홍길동, email=hong@example.com, phoneNumber=null, password=Password123!, role=LEADER, birthDate=null, departmentId=1), UserCreateRequest(name=김철수, email=kim@example.com, phoneNumber=null, password=Password123!, role=MEMBER, birthDate=null, departmentId=1)]))
2025-05-06 22:37:38 [Test worker] [b63d7f7d-2581-4963-89f6-d3d201a96353] INFO  c.a.a.interceptor.ApiLogInterceptor - POST /api/admin/users/bulk - 201 (7 ms)
2025-05-06 22:37:38 [Test worker] [b63d7f7d-2581-4963-89f6-d3d201a96353] DEBUG c.a.a.interceptor.ApiLogInterceptor - API 상세 정보: {"requestId":"b63d7f7d-2581-4963-89f6-d3d201a96353","apiPath":"/api/admin/users/bulk","method":"POST","status":201,"duration":7,"requestHeaders":{"Content-Type":"application/json;charset=UTF-8","Content-Length":"296"},"responseHeaders":{"X-Request-ID":"b63d7f7d-2581-4963-89f6-d3d201a96353","Content-Type":"application/json","X-Content-Type-Options":"nosniff","X-XSS-Protection":"0","Cache-Control":"no-cache, no-store, max-age=0, must-revalidate","Pragma":"no-cache","Expires":"0","X-Frame-Options":"DENY"},"requestBody":null,"responseBody":null,"queryParams":null}
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['createdCount']
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['failedCount']
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['failedEmails'].length()
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AdminUserService(com.attendly.service.AdminUserService#0 bean#145)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#146)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#147)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#148)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#149)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AdminUserService(com.attendly.service.AdminUserService#0 bean#145)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#146)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#147)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#148)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#149)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Page name=child of com.attendly.service.AdminUserService#0 bean#145#154
2025-05-06 22:37:38 [Test worker] [145586cc-d2c7-4d12-9d75-0dc86e68d05f] DEBUG i.m.i.r.states.AnsweringState - Answering Page 1 of 1 containing com.attendly.api.dto.UserResponse instances on AdminUserService(com.attendly.service.AdminUserService#0 bean#145).getAllUsers(Page request [number: 0, size 10, sort: id: DESC])
2025-05-06 22:37:38 [Test worker] [145586cc-d2c7-4d12-9d75-0dc86e68d05f] WARN  o.s.d.w.c.SpringDataJacksonConfiguration$PageModule$WarningLoggingModifier - Serializing PageImpl instances as-is is not supported, meaning that there is no guarantee about the stability of the resulting JSON structure!
	For a stable JSON structure, please use Spring Data's PagedModel (globally via @EnableSpringDataWebSupport(pageSerializationMode = VIA_DTO))
	or Spring HATEOAS and Spring Data's PagedResourcesAssembler as documented in https://docs.spring.io/spring-data/commons/reference/repositories/core-extensions.html#core.web.pageables.

2025-05-06 22:37:38 [Test worker] [145586cc-d2c7-4d12-9d75-0dc86e68d05f] INFO  c.a.a.interceptor.ApiLogInterceptor - GET /api/admin/users - 200 (4 ms)
2025-05-06 22:37:38 [Test worker] [145586cc-d2c7-4d12-9d75-0dc86e68d05f] DEBUG c.a.a.interceptor.ApiLogInterceptor - API 상세 정보: {"requestId":"145586cc-d2c7-4d12-9d75-0dc86e68d05f","apiPath":"/api/admin/users","method":"GET","status":200,"duration":4,"requestHeaders":{},"responseHeaders":{"X-Request-ID":"145586cc-d2c7-4d12-9d75-0dc86e68d05f","Content-Type":"application/json","X-Content-Type-Options":"nosniff","X-XSS-Protection":"0","Cache-Control":"no-cache, no-store, max-age=0, must-revalidate","Pragma":"no-cache","Expires":"0","X-Frame-Options":"DENY"},"requestBody":null,"responseBody":null,"queryParams":null}
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['content'].length()
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['content'][0]['id']
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['content'][0]['name']
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['content'][0]['email']
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['content'][0]['phoneNumber']
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['content'][1]['id']
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['content'][1]['name']
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['content'][1]['email']
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['content'][1]['phoneNumber']
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['totalElements']
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AdminUserService(com.attendly.service.AdminUserService#0 bean#145)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#146)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#147)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#148)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#149)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AdminUserService(com.attendly.service.AdminUserService#0 bean#145)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#146)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#147)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#148)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#149)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserResponse name=child of com.attendly.service.AdminUserService#0 bean#145#155
2025-05-06 22:37:38 [Test worker] [2955a3cb-9384-485b-bab9-6b62df3d35bb] DEBUG i.m.i.r.states.AnsweringState - Answering UserResponse(id=1, name=홍길동, email=hong@example.com, phoneNumber=010-1234-5678, role=LEADER, departmentId=1, departmentName=청년부, birthDate=null, createdAt=2025-05-06T22:37:38.764077, updatedAt=2025-05-06T22:37:38.764081) on AdminUserService(com.attendly.service.AdminUserService#0 bean#145).createUser(UserCreateRequest(name=홍길동, email=hong@example.com, phoneNumber=null, password=Password123!, role=LEADER, birthDate=null, departmentId=1))
2025-05-06 22:37:38 [Test worker] [2955a3cb-9384-485b-bab9-6b62df3d35bb] INFO  c.a.a.interceptor.ApiLogInterceptor - POST /api/admin/users - 201 (3 ms)
2025-05-06 22:37:38 [Test worker] [2955a3cb-9384-485b-bab9-6b62df3d35bb] DEBUG c.a.a.interceptor.ApiLogInterceptor - API 상세 정보: {"requestId":"2955a3cb-9384-485b-bab9-6b62df3d35bb","apiPath":"/api/admin/users","method":"POST","status":201,"duration":3,"requestHeaders":{"Content-Type":"application/json;charset=UTF-8","Content-Length":"142"},"responseHeaders":{"X-Request-ID":"2955a3cb-9384-485b-bab9-6b62df3d35bb","Content-Type":"application/json","X-Content-Type-Options":"nosniff","X-XSS-Protection":"0","Cache-Control":"no-cache, no-store, max-age=0, must-revalidate","Pragma":"no-cache","Expires":"0","X-Frame-Options":"DENY"},"requestBody":null,"responseBody":null,"queryParams":null}
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['id']
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['name']
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['email']
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['phoneNumber']
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['role']
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['departmentId']
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['departmentName']
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AdminUserService(com.attendly.service.AdminUserService#0 bean#145)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#146)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#147)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#148)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#149)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AdminUserService(com.attendly.service.AdminUserService#0 bean#145)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#146)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#147)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#148)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#149)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserResponse name=child of com.attendly.service.AdminUserService#0 bean#145#156
2025-05-06 22:37:38 [Test worker] [cb20a8ec-158d-4d0e-9b21-b3ed368dfa39] DEBUG i.m.i.r.states.AnsweringState - Answering UserResponse(id=1, name=홍길동(수정), email=hong_updated@example.com, phoneNumber=010-1234-5678, role=ADMIN, departmentId=1, departmentName=청년부, birthDate=null, createdAt=2025-05-06T22:37:38.771976, updatedAt=2025-05-06T22:37:38.771979) on AdminUserService(com.attendly.service.AdminUserService#0 bean#145).updateUser(1, UserUpdateRequest(name=홍길동(수정), email=hong_updated@example.com, phoneNumber=null, birthDate=null, role=ADMIN, departmentId=null))
2025-05-06 22:37:38 [Test worker] [cb20a8ec-158d-4d0e-9b21-b3ed368dfa39] INFO  c.a.a.interceptor.ApiLogInterceptor - PUT /api/admin/users/1 - 200 (3 ms)
2025-05-06 22:37:38 [Test worker] [cb20a8ec-158d-4d0e-9b21-b3ed368dfa39] DEBUG c.a.a.interceptor.ApiLogInterceptor - API 상세 정보: {"requestId":"cb20a8ec-158d-4d0e-9b21-b3ed368dfa39","apiPath":"/api/admin/users/1","method":"PUT","status":200,"duration":3,"requestHeaders":{"Content-Type":"application/json;charset=UTF-8","Content-Length":"134"},"responseHeaders":{"X-Request-ID":"cb20a8ec-158d-4d0e-9b21-b3ed368dfa39","Content-Type":"application/json","X-Content-Type-Options":"nosniff","X-XSS-Protection":"0","Cache-Control":"no-cache, no-store, max-age=0, must-revalidate","Pragma":"no-cache","Expires":"0","X-Frame-Options":"DENY"},"requestBody":null,"responseBody":null,"queryParams":null}
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['id']
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['name']
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['email']
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['phoneNumber']
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['role']
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AdminUserService(com.attendly.service.AdminUserService#0 bean#145)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#146)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#147)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#148)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#149)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AdminUserService(com.attendly.service.AdminUserService#0 bean#145)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#146)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#147)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#148)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#149)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:37:38 [Test worker] [140cfb25-d6c4-41e5-addf-bb9805937bd9] INFO  c.a.a.interceptor.ApiLogInterceptor -   - 200 (0 ms)
2025-05-06 22:37:38 [Test worker] [140cfb25-d6c4-41e5-addf-bb9805937bd9] DEBUG c.a.a.interceptor.ApiLogInterceptor - API 상세 정보: {"requestId":"140cfb25-d6c4-41e5-addf-bb9805937bd9","apiPath":"","method":"","status":200,"duration":0,"requestHeaders":{},"responseHeaders":{"X-Request-ID":"140cfb25-d6c4-41e5-addf-bb9805937bd9"},"requestBody":null,"responseBody":null,"queryParams":null}
2025-05-06 22:37:38 [Test worker] [049dcacc-c26f-4730-a838-3f7fb85356aa] WARN  c.a.a.interceptor.ApiLogInterceptor - GET /api/users/999 - 404 (0 ms)
2025-05-06 22:37:38 [Test worker] [049dcacc-c26f-4730-a838-3f7fb85356aa] DEBUG c.a.a.interceptor.ApiLogInterceptor - API 상세 정보: {"requestId":"049dcacc-c26f-4730-a838-3f7fb85356aa","apiPath":"/api/users/999","method":"GET","status":404,"duration":0,"requestHeaders":{},"responseHeaders":{"Content-Type":"application/json","X-Request-ID":"049dcacc-c26f-4730-a838-3f7fb85356aa"},"requestBody":null,"responseBody":"{\"error\":\"User not found\",\"status\":404}","queryParams":null}
2025-05-06 22:37:38 [Test worker] [6c6156bd-c839-4af8-a16a-c7c5638edd37] INFO  c.a.a.interceptor.ApiLogInterceptor - POST /api/users - 201 (0 ms)
2025-05-06 22:37:38 [Test worker] [6c6156bd-c839-4af8-a16a-c7c5638edd37] DEBUG c.a.a.interceptor.ApiLogInterceptor - API 상세 정보: {"requestId":"6c6156bd-c839-4af8-a16a-c7c5638edd37","apiPath":"/api/users","method":"POST","status":201,"duration":0,"requestHeaders":{"Content-Type":"application/json"},"responseHeaders":{"Content-Type":"application/json","X-Request-ID":"6c6156bd-c839-4af8-a16a-c7c5638edd37"},"requestBody":null,"responseBody":"{\"id\":1,\"name\":\"홍길동\",\"email\":\"hong@example.com\"}","queryParams":null}
2025-05-06 22:37:38 [Test worker] [de3eb4a1-e945-4868-b7ce-e9ea9c23f53b] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for ProceedingJoinPoint name=#157
2025-05-06 22:37:38 [Test worker] [de3eb4a1-e945-4868-b7ce-e9ea9c23f53b] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Signature name=#158
2025-05-06 22:37:38 [Test worker] [de3eb4a1-e945-4868-b7ce-e9ea9c23f53b] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Signature name=child of #157#159
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #157#160
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Signature(#158) on ProceedingJoinPoint(#157).getSignature()
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering com.example.TestClass on Signature(#158).getDeclaringTypeName()
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Signature(#158) on ProceedingJoinPoint(#157).getSignature()
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering testMethod on Signature(#158).getName()
2025-05-06 22:37:38 [Test worker] [18e6b5f1-bf52-44a8-86b1-b9fc34732e69] DEBUG com.attendly.aspect.MdcAspect - Async 메소드 실행: com.example.TestClass.testMethod (requestId: 18e6b5f1-bf52-44a8-86b1-b9fc34732e69)
2025-05-06 22:37:38 [Test worker] [18e6b5f1-bf52-44a8-86b1-b9fc34732e69] DEBUG i.m.i.r.states.AnsweringState - Throwing java.lang.RuntimeException: Test exception on ProceedingJoinPoint(#157).proceed()
2025-05-06 22:37:38 [Test worker] [18e6b5f1-bf52-44a8-86b1-b9fc34732e69] ERROR com.attendly.aspect.MdcAspect - Async 메소드 실행 중 오류 발생: com.example.TestClass.testMethod (requestId: 18e6b5f1-bf52-44a8-86b1-b9fc34732e69)
java.lang.RuntimeException: Test exception
	at com.attendly.aspect.MdcAspectTest.예외 발생 시에도 MDC에서 requestId를 제거한다(MdcAspectTest.kt:75)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)
	at java.base/java.lang.reflect.Method.invoke(Unknown Source)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:767)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$8(TestMethodTestDescriptor.java:217)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:156)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(Unknown Source)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(Unknown Source)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:124)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:99)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:94)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)
	at java.base/java.lang.reflect.Method.invoke(Unknown Source)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:92)
	at jdk.proxy1/jdk.proxy1.$Proxy4.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:200)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:132)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:103)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:63)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:121)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
2025-05-06 22:37:38 [Test worker] [18e6b5f1-bf52-44a8-86b1-b9fc34732e69] DEBUG com.attendly.aspect.MdcAspect - Async 메소드 실행 완료: com.example.TestClass.testMethod (requestId: 18e6b5f1-bf52-44a8-86b1-b9fc34732e69)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for ProceedingJoinPoint name=#161
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Signature name=#162
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Signature name=child of #161#163
2025-05-06 22:37:38 [Test worker] [original-request-id] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #161#164
2025-05-06 22:37:38 [Test worker] [original-request-id] DEBUG i.m.i.r.states.AnsweringState - Answering Signature(#162) on ProceedingJoinPoint(#161).getSignature()
2025-05-06 22:37:38 [Test worker] [original-request-id] DEBUG i.m.i.r.states.AnsweringState - Answering com.example.TestClass on Signature(#162).getDeclaringTypeName()
2025-05-06 22:37:38 [Test worker] [original-request-id] DEBUG i.m.i.r.states.AnsweringState - Answering Signature(#162) on ProceedingJoinPoint(#161).getSignature()
2025-05-06 22:37:38 [Test worker] [original-request-id] DEBUG i.m.i.r.states.AnsweringState - Answering testMethod on Signature(#162).getName()
2025-05-06 22:37:38 [Test worker] [9fe99cb6-0898-44e5-bc27-f02264ae791c] DEBUG com.attendly.aspect.MdcAspect - Async 메소드 실행: com.example.TestClass.testMethod (requestId: 9fe99cb6-0898-44e5-bc27-f02264ae791c)
2025-05-06 22:37:38 [Test worker] [9fe99cb6-0898-44e5-bc27-f02264ae791c] DEBUG i.m.i.r.states.AnsweringState - Answering test result on ProceedingJoinPoint(#161).proceed()
2025-05-06 22:37:38 [Test worker] [9fe99cb6-0898-44e5-bc27-f02264ae791c] DEBUG com.attendly.aspect.MdcAspect - Async 메소드 실행 완료: com.example.TestClass.testMethod (requestId: 9fe99cb6-0898-44e5-bc27-f02264ae791c)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for ProceedingJoinPoint name=#165
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Signature name=#166
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Signature name=child of #165#167
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #165#168
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Signature(#166) on ProceedingJoinPoint(#165).getSignature()
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering com.example.TestClass on Signature(#166).getDeclaringTypeName()
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Signature(#166) on ProceedingJoinPoint(#165).getSignature()
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering testMethod on Signature(#166).getName()
2025-05-06 22:37:38 [Test worker] [e19fcfc5-e5c3-4c9b-9835-e6be76088750] DEBUG com.attendly.aspect.MdcAspect - Scheduled 메소드 실행: com.example.TestClass.testMethod (requestId: e19fcfc5-e5c3-4c9b-9835-e6be76088750)
2025-05-06 22:37:38 [Test worker] [e19fcfc5-e5c3-4c9b-9835-e6be76088750] DEBUG i.m.i.r.states.AnsweringState - Answering test result on ProceedingJoinPoint(#165).proceed()
2025-05-06 22:37:38 [Test worker] [e19fcfc5-e5c3-4c9b-9835-e6be76088750] DEBUG com.attendly.aspect.MdcAspect - Scheduled 메소드 실행 완료: com.example.TestClass.testMethod (requestId: e19fcfc5-e5c3-4c9b-9835-e6be76088750)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for ProceedingJoinPoint name=#169
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Signature name=#170
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Signature name=child of #169#171
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #169#172
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Signature(#170) on ProceedingJoinPoint(#169).getSignature()
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering com.example.TestClass on Signature(#170).getDeclaringTypeName()
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Signature(#170) on ProceedingJoinPoint(#169).getSignature()
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering testMethod on Signature(#170).getName()
2025-05-06 22:37:38 [Test worker] [39d164e5-e5b3-4931-8414-bc74062e7206] DEBUG com.attendly.aspect.MdcAspect - Async 메소드 실행: com.example.TestClass.testMethod (requestId: 39d164e5-e5b3-4931-8414-bc74062e7206)
2025-05-06 22:37:38 [Test worker] [39d164e5-e5b3-4931-8414-bc74062e7206] DEBUG i.m.i.r.states.AnsweringState - Answering test result on ProceedingJoinPoint(#169).proceed()
2025-05-06 22:37:38 [Test worker] [39d164e5-e5b3-4931-8414-bc74062e7206] DEBUG com.attendly.aspect.MdcAspect - Async 메소드 실행 완료: com.example.TestClass.testMethod (requestId: 39d164e5-e5b3-4931-8414-bc74062e7206)
2025-05-06 22:37:38 [Test worker] [NONE] WARN  o.s.b.t.j.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer - 

Found multiple occurrences of org.json.JSONObject on the class path:

	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/org.json/json/20230618/1ae16df7d556d02713e241086f878399e99260d6/json-20230618.jar!/org/json/JSONObject.class
	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/com.vaadin.external.google/android-json/0.0.20131108.vaadin1/fa26d351fe62a6a17f5cda1287c1c6110dec413f/android-json-0.0.20131108.vaadin1.jar!/org/json/JSONObject.class

You may wish to exclude one of them to ensure predictable runtime behavior

2025-05-06 22:37:38 [Test worker] [NONE] INFO  c.a.d.r.AttendanceRepositoryCustomTest - Starting AttendanceRepositoryCustomTest using Java 21.0.6 with PID 41751 (started by user in /Users/user/study/attendly-api)
2025-05-06 22:37:38 [Test worker] [NONE] DEBUG c.a.d.r.AttendanceRepositoryCustomTest - Running with Spring Boot v3.4.5, Spring v6.2.6
2025-05-06 22:37:38 [Test worker] [NONE] INFO  c.a.d.r.AttendanceRepositoryCustomTest - The following 1 profile is active: "test"
2025-05-06 22:37:39 [Test worker] [NONE] WARN  org.hibernate.orm.deprecation - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists attendance cascade 
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists batch_job_logs cascade 
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists batch_jobs cascade 
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists department cascade 
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_group cascade 
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_leader_history cascade 
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_member_history cascade 
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists leader_delegation cascade 
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists system_log cascade 
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists system_settings cascade 
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade 
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists village cascade 
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists village_leader cascade 
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table attendance (
        qt_count integer not null,
        week_start date not null,
        created_at timestamp(6) not null,
        created_by bigint not null,
        gbs_id bigint not null,
        id bigint generated by default as identity,
        member_id bigint not null,
        updated_at timestamp(6) not null,
        ministry enum ('A','B','C') not null,
        worship enum ('O','X') not null,
        primary key (id)
    )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table batch_job_logs (
        batch_job_id bigint not null,
        id bigint generated by default as identity,
        timestamp timestamp(6) not null,
        level varchar(10) not null,
        message TEXT not null,
        primary key (id)
    )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table batch_jobs (
        created_at timestamp(6) not null,
        finished_at timestamp(6),
        id bigint generated by default as identity,
        schedule_time timestamp(6),
        started_at timestamp(6),
        error_message TEXT,
        parameters TEXT,
        job_type enum ('DATA_BACKUP','GBS_REORGANIZATION','REMINDER','STATISTICS_GENERATION') not null,
        status enum ('CANCELLED','COMPLETED','FAILED','QUEUED','RUNNING') not null,
        primary key (id)
    )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table department (
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        name varchar(50) not null,
        primary key (id)
    )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table gbs_group (
        term_end_dt date not null,
        term_start_dt date not null,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        village_id bigint not null,
        name varchar(50) not null,
        primary key (id)
    )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table gbs_leader_history (
        end_dt date,
        start_dt date not null,
        created_at timestamp(6) not null,
        gbs_id bigint not null,
        id bigint generated by default as identity,
        leader_id bigint not null,
        updated_at timestamp(6) not null,
        primary key (id)
    )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table gbs_member_history (
        end_dt date,
        start_dt date not null,
        created_at timestamp(6) not null,
        gbs_id bigint not null,
        id bigint generated by default as identity,
        member_id bigint not null,
        updated_at timestamp(6) not null,
        primary key (id)
    )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table leader_delegation (
        end_dt date,
        start_dt date not null,
        created_at timestamp(6) not null,
        delegatee_id bigint not null,
        delegator_id bigint not null,
        gbs_id bigint not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        primary key (id)
    )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table system_log (
        id bigint generated by default as identity,
        timestamp timestamp(6) not null,
        user_id bigint,
        level varchar(10) not null,
        category varchar(20) not null,
        ip_address varchar(39),
        server_instance varchar(50),
        message varchar(1000) not null,
        additional_info TEXT,
        user_agent varchar(255),
        primary key (id)
    )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table system_settings (
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        setting_key varchar(50) not null unique,
        description varchar(200),
        setting_value varchar(1000) not null,
        primary key (id)
    )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table users (
        birth_date date,
        created_at timestamp(6) not null,
        department_id bigint not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        phone_number varchar(20),
        name varchar(50) not null,
        email varchar(100) unique,
        password varchar(100),
        role enum ('ADMIN','LEADER','MEMBER','MINISTER','VILLAGE_LEADER') not null,
        primary key (id)
    )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table village (
        created_at timestamp(6) not null,
        department_id bigint not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        name varchar(50) not null,
        primary key (id)
    )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table village_leader (
        end_dt date,
        start_dt date not null,
        created_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        user_id bigint not null,
        village_id bigint not null,
        primary key (user_id, village_id)
    )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists attendance 
       add constraint FKg7dtnois2g6ghgu4bl5gym92u 
       foreign key (created_by) 
       references users
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists attendance 
       add constraint FKjn82a3qvj1ho9ajauog7v0f12 
       foreign key (gbs_id) 
       references gbs_group
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists attendance 
       add constraint FK8f5fy874njy44gc8df63m187j 
       foreign key (member_id) 
       references users
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists batch_job_logs 
       add constraint FKsoyil2u66we091nme35nm6ste 
       foreign key (batch_job_id) 
       references batch_jobs
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_group 
       add constraint FKqvo83ldaqku2vayubiutcly4e 
       foreign key (village_id) 
       references village
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_leader_history 
       add constraint FKjls4dwfsilybq2sa0x35ml3f9 
       foreign key (gbs_id) 
       references gbs_group
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_leader_history 
       add constraint FK810qej66ysfs5j8cqtqbtsr1h 
       foreign key (leader_id) 
       references users
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_member_history 
       add constraint FK21l70t0cajgfj6rehvc9s21tc 
       foreign key (gbs_id) 
       references gbs_group
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_member_history 
       add constraint FKasr4qspnvhydc2xbei8rlysxy 
       foreign key (member_id) 
       references users
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists leader_delegation 
       add constraint FKs9xr3vr71pux3puk06pwiivfl 
       foreign key (delegatee_id) 
       references users
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists leader_delegation 
       add constraint FKqg0jdq2i5pfckjlqr5xfhkguc 
       foreign key (delegator_id) 
       references users
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists leader_delegation 
       add constraint FKjr2i1o6vb363gnkm6qahsaji6 
       foreign key (gbs_id) 
       references gbs_group
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint FKfi832e3qv89fq376fuh8920y4 
       foreign key (department_id) 
       references department
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists village 
       add constraint FKmp8tdn2nuthupcstb37lgifs4 
       foreign key (department_id) 
       references department
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists village_leader 
       add constraint FK446snb5j15qqkonffm6tyepm0 
       foreign key (user_id) 
       references users
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists village_leader 
       add constraint FK9rpuj47r5r477bys6jmfthoeo 
       foreign key (village_id) 
       references village
2025-05-06 22:37:39 [Test worker] [NONE] INFO  c.a.d.r.AttendanceRepositoryCustomTest - Started AttendanceRepositoryCustomTest in 0.219 seconds (process running for 7.086)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        attendance
        (created_at, created_by, gbs_id, member_id, ministry, qt_count, updated_at, week_start, worship, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        attendance
        (created_at, created_by, gbs_id, member_id, ministry, qt_count, updated_at, week_start, worship, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        attendance
        (created_at, created_by, gbs_id, member_id, ministry, qt_count, updated_at, week_start, worship, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.gbs_id,
        gg1_0.id,
        gg1_0.created_at,
        gg1_0.name,
        gg1_0.term_end_dt,
        gg1_0.term_start_dt,
        gg1_0.updated_at,
        gg1_0.village_id,
        a1_0.member_id,
        m1_0.id,
        m1_0.birth_date,
        m1_0.created_at,
        m1_0.department_id,
        m1_0.email,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.role,
        m1_0.updated_at,
        a1_0.ministry,
        a1_0.qt_count,
        a1_0.updated_at,
        a1_0.week_start,
        a1_0.worship 
    from
        attendance a1_0 
    join
        users m1_0 
            on m1_0.id=a1_0.member_id 
    join
        gbs_group gg1_0 
            on gg1_0.id=a1_0.gbs_id 
    where
        gg1_0.village_id=? 
        and a1_0.week_start=?
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        attendance
        (created_at, created_by, gbs_id, member_id, ministry, qt_count, updated_at, week_start, worship, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        attendance
        (created_at, created_by, gbs_id, member_id, ministry, qt_count, updated_at, week_start, worship, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        attendance
        (created_at, created_by, gbs_id, member_id, ministry, qt_count, updated_at, week_start, worship, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        attendance a1_0 
    where
        a1_0.gbs_id in (?, ?) 
        and a1_0.week_start=? 
        and a1_0.worship=?
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        attendance
        (created_at, created_by, gbs_id, member_id, ministry, qt_count, updated_at, week_start, worship, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        attendance
        (created_at, created_by, gbs_id, member_id, ministry, qt_count, updated_at, week_start, worship, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        attendance
        (created_at, created_by, gbs_id, member_id, ministry, qt_count, updated_at, week_start, worship, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.gbs_id,
        gg1_0.id,
        gg1_0.created_at,
        gg1_0.name,
        gg1_0.term_end_dt,
        gg1_0.term_start_dt,
        gg1_0.updated_at,
        gg1_0.village_id,
        a1_0.member_id,
        m1_0.id,
        m1_0.birth_date,
        m1_0.created_at,
        m1_0.department_id,
        m1_0.email,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.role,
        m1_0.updated_at,
        a1_0.ministry,
        a1_0.qt_count,
        a1_0.updated_at,
        a1_0.week_start,
        a1_0.worship 
    from
        attendance a1_0 
    join
        users m1_0 
            on m1_0.id=a1_0.member_id 
    join
        gbs_group gg1_0 
            on gg1_0.id=a1_0.gbs_id 
    where
        gg1_0.village_id=? 
        and a1_0.week_start=?
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        attendance
        (created_at, created_by, gbs_id, member_id, ministry, qt_count, updated_at, week_start, worship, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        attendance
        (created_at, created_by, gbs_id, member_id, ministry, qt_count, updated_at, week_start, worship, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        attendance
        (created_at, created_by, gbs_id, member_id, ministry, qt_count, updated_at, week_start, worship, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.gbs_id,
        a1_0.member_id,
        m1_0.id,
        m1_0.birth_date,
        m1_0.created_at,
        m1_0.department_id,
        m1_0.email,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.role,
        m1_0.updated_at,
        a1_0.ministry,
        a1_0.qt_count,
        a1_0.updated_at,
        a1_0.week_start,
        a1_0.worship 
    from
        attendance a1_0 
    join
        users m1_0 
            on m1_0.id=a1_0.member_id 
    where
        a1_0.gbs_id=? 
        and a1_0.week_start=?
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        attendance
        (created_at, created_by, gbs_id, member_id, ministry, qt_count, updated_at, week_start, worship, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        attendance
        (created_at, created_by, gbs_id, member_id, ministry, qt_count, updated_at, week_start, worship, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        attendance
        (created_at, created_by, gbs_id, member_id, ministry, qt_count, updated_at, week_start, worship, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.gbs_id,
        gg1_0.id,
        gg1_0.created_at,
        gg1_0.name,
        gg1_0.term_end_dt,
        gg1_0.term_start_dt,
        gg1_0.updated_at,
        gg1_0.village_id,
        a1_0.member_id,
        m1_0.id,
        m1_0.birth_date,
        m1_0.created_at,
        m1_0.department_id,
        m1_0.email,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.role,
        m1_0.updated_at,
        a1_0.ministry,
        a1_0.qt_count,
        a1_0.updated_at,
        a1_0.week_start,
        a1_0.worship 
    from
        attendance a1_0 
    join
        users m1_0 
            on m1_0.id=a1_0.member_id 
    join
        gbs_group gg1_0 
            on gg1_0.id=a1_0.gbs_id 
    where
        gg1_0.village_id=? 
        and a1_0.week_start=?
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        attendance
        (created_at, created_by, gbs_id, member_id, ministry, qt_count, updated_at, week_start, worship, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.gbs_id,
        a1_0.member_id,
        a1_0.ministry,
        a1_0.qt_count,
        a1_0.updated_at,
        a1_0.week_start,
        a1_0.worship 
    from
        attendance a1_0 
    where
        a1_0.gbs_id=? 
        and a1_0.week_start=?
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        attendance
        (created_at, created_by, gbs_id, member_id, ministry, qt_count, updated_at, week_start, worship, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.gbs_id,
        a1_0.member_id,
        a1_0.ministry,
        a1_0.qt_count,
        a1_0.updated_at,
        a1_0.week_start,
        a1_0.worship 
    from
        attendance a1_0 
    where
        a1_0.member_id=? 
        and a1_0.week_start between ? and ?
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        attendance
        (created_at, created_by, gbs_id, member_id, ministry, qt_count, updated_at, week_start, worship, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.gbs_id,
        a1_0.member_id,
        a1_0.ministry,
        a1_0.qt_count,
        a1_0.updated_at,
        a1_0.week_start,
        a1_0.worship 
    from
        attendance a1_0 
    where
        a1_0.gbs_id=? 
        and a1_0.week_start=?
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        attendance
        (created_at, created_by, gbs_id, member_id, ministry, qt_count, updated_at, week_start, worship, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.gbs_id,
        a1_0.member_id,
        a1_0.ministry,
        a1_0.qt_count,
        a1_0.updated_at,
        a1_0.week_start,
        a1_0.worship 
    from
        attendance a1_0 
    where
        a1_0.member_id=? 
        and a1_0.week_start between ? and ?
2025-05-06 22:37:39 [Test worker] [NONE] WARN  o.s.b.t.j.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer - 

Found multiple occurrences of org.json.JSONObject on the class path:

	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/org.json/json/20230618/1ae16df7d556d02713e241086f878399e99260d6/json-20230618.jar!/org/json/JSONObject.class
	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/com.vaadin.external.google/android-json/0.0.20131108.vaadin1/fa26d351fe62a6a17f5cda1287c1c6110dec413f/android-json-0.0.20131108.vaadin1.jar!/org/json/JSONObject.class

You may wish to exclude one of them to ensure predictable runtime behavior

2025-05-06 22:37:39 [Test worker] [NONE] INFO  c.a.d.r.GbsGroupRepositoryCustomTest - Starting GbsGroupRepositoryCustomTest using Java 21.0.6 with PID 41751 (started by user in /Users/user/study/attendly-api)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG c.a.d.r.GbsGroupRepositoryCustomTest - Running with Spring Boot v3.4.5, Spring v6.2.6
2025-05-06 22:37:39 [Test worker] [NONE] INFO  c.a.d.r.GbsGroupRepositoryCustomTest - The following 1 profile is active: "test"
2025-05-06 22:37:39 [Test worker] [NONE] WARN  org.hibernate.orm.deprecation - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists attendance cascade 
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists batch_job_logs cascade 
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists batch_jobs cascade 
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists department cascade 
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_group cascade 
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_leader_history cascade 
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_member_history cascade 
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists leader_delegation cascade 
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists system_log cascade 
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists system_settings cascade 
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade 
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists village cascade 
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists village_leader cascade 
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table attendance (
        qt_count integer not null,
        week_start date not null,
        created_at timestamp(6) not null,
        created_by bigint not null,
        gbs_id bigint not null,
        id bigint generated by default as identity,
        member_id bigint not null,
        updated_at timestamp(6) not null,
        ministry enum ('A','B','C') not null,
        worship enum ('O','X') not null,
        primary key (id)
    )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table batch_job_logs (
        batch_job_id bigint not null,
        id bigint generated by default as identity,
        timestamp timestamp(6) not null,
        level varchar(10) not null,
        message TEXT not null,
        primary key (id)
    )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table batch_jobs (
        created_at timestamp(6) not null,
        finished_at timestamp(6),
        id bigint generated by default as identity,
        schedule_time timestamp(6),
        started_at timestamp(6),
        error_message TEXT,
        parameters TEXT,
        job_type enum ('DATA_BACKUP','GBS_REORGANIZATION','REMINDER','STATISTICS_GENERATION') not null,
        status enum ('CANCELLED','COMPLETED','FAILED','QUEUED','RUNNING') not null,
        primary key (id)
    )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table department (
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        name varchar(50) not null,
        primary key (id)
    )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table gbs_group (
        term_end_dt date not null,
        term_start_dt date not null,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        village_id bigint not null,
        name varchar(50) not null,
        primary key (id)
    )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table gbs_leader_history (
        end_dt date,
        start_dt date not null,
        created_at timestamp(6) not null,
        gbs_id bigint not null,
        id bigint generated by default as identity,
        leader_id bigint not null,
        updated_at timestamp(6) not null,
        primary key (id)
    )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table gbs_member_history (
        end_dt date,
        start_dt date not null,
        created_at timestamp(6) not null,
        gbs_id bigint not null,
        id bigint generated by default as identity,
        member_id bigint not null,
        updated_at timestamp(6) not null,
        primary key (id)
    )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table leader_delegation (
        end_dt date,
        start_dt date not null,
        created_at timestamp(6) not null,
        delegatee_id bigint not null,
        delegator_id bigint not null,
        gbs_id bigint not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        primary key (id)
    )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table system_log (
        id bigint generated by default as identity,
        timestamp timestamp(6) not null,
        user_id bigint,
        level varchar(10) not null,
        category varchar(20) not null,
        ip_address varchar(39),
        server_instance varchar(50),
        message varchar(1000) not null,
        additional_info TEXT,
        user_agent varchar(255),
        primary key (id)
    )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table system_settings (
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        setting_key varchar(50) not null unique,
        description varchar(200),
        setting_value varchar(1000) not null,
        primary key (id)
    )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table users (
        birth_date date,
        created_at timestamp(6) not null,
        department_id bigint not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        phone_number varchar(20),
        name varchar(50) not null,
        email varchar(100) unique,
        password varchar(100),
        role enum ('ADMIN','LEADER','MEMBER','MINISTER','VILLAGE_LEADER') not null,
        primary key (id)
    )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table village (
        created_at timestamp(6) not null,
        department_id bigint not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        name varchar(50) not null,
        primary key (id)
    )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table village_leader (
        end_dt date,
        start_dt date not null,
        created_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        user_id bigint not null,
        village_id bigint not null,
        primary key (user_id, village_id)
    )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists attendance 
       add constraint FKg7dtnois2g6ghgu4bl5gym92u 
       foreign key (created_by) 
       references users
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists attendance 
       add constraint FKjn82a3qvj1ho9ajauog7v0f12 
       foreign key (gbs_id) 
       references gbs_group
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists attendance 
       add constraint FK8f5fy874njy44gc8df63m187j 
       foreign key (member_id) 
       references users
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists batch_job_logs 
       add constraint FKsoyil2u66we091nme35nm6ste 
       foreign key (batch_job_id) 
       references batch_jobs
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_group 
       add constraint FKqvo83ldaqku2vayubiutcly4e 
       foreign key (village_id) 
       references village
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_leader_history 
       add constraint FKjls4dwfsilybq2sa0x35ml3f9 
       foreign key (gbs_id) 
       references gbs_group
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_leader_history 
       add constraint FK810qej66ysfs5j8cqtqbtsr1h 
       foreign key (leader_id) 
       references users
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_member_history 
       add constraint FK21l70t0cajgfj6rehvc9s21tc 
       foreign key (gbs_id) 
       references gbs_group
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_member_history 
       add constraint FKasr4qspnvhydc2xbei8rlysxy 
       foreign key (member_id) 
       references users
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists leader_delegation 
       add constraint FKs9xr3vr71pux3puk06pwiivfl 
       foreign key (delegatee_id) 
       references users
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists leader_delegation 
       add constraint FKqg0jdq2i5pfckjlqr5xfhkguc 
       foreign key (delegator_id) 
       references users
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists leader_delegation 
       add constraint FKjr2i1o6vb363gnkm6qahsaji6 
       foreign key (gbs_id) 
       references gbs_group
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint FKfi832e3qv89fq376fuh8920y4 
       foreign key (department_id) 
       references department
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists village 
       add constraint FKmp8tdn2nuthupcstb37lgifs4 
       foreign key (department_id) 
       references department
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists village_leader 
       add constraint FK446snb5j15qqkonffm6tyepm0 
       foreign key (user_id) 
       references users
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists village_leader 
       add constraint FK9rpuj47r5r477bys6jmfthoeo 
       foreign key (village_id) 
       references village
2025-05-06 22:37:39 [Test worker] [NONE] INFO  c.a.d.r.GbsGroupRepositoryCustomTest - Started GbsGroupRepositoryCustomTest in 0.186 seconds (process running for 7.468)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        gg1_0.id,
        gg1_0.created_at,
        gg1_0.name,
        gg1_0.term_end_dt,
        gg1_0.term_start_dt,
        gg1_0.updated_at,
        gg1_0.village_id,
        v1_0.id,
        v1_0.created_at,
        v1_0.department_id,
        v1_0.name,
        v1_0.updated_at 
    from
        gbs_group gg1_0 
    join
        village v1_0 
            on v1_0.id=gg1_0.village_id 
    where
        v1_0.id=? 
        and gg1_0.term_start_dt<=? 
        and gg1_0.term_end_dt>=?
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        gg1_0.id,
        gg1_0.created_at,
        gg1_0.name,
        gg1_0.term_end_dt,
        gg1_0.term_start_dt,
        gg1_0.updated_at,
        gg1_0.village_id,
        v1_0.id,
        v1_0.created_at,
        v1_0.department_id,
        v1_0.name,
        v1_0.updated_at 
    from
        gbs_group gg1_0 
    join
        village v1_0 
            on v1_0.id=gg1_0.village_id 
    where
        v1_0.id=? 
        and gg1_0.term_start_dt<=? 
        and gg1_0.term_end_dt>=?
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        gg1_0.id,
        gg1_0.created_at,
        gg1_0.name,
        gg1_0.term_end_dt,
        gg1_0.term_start_dt,
        gg1_0.updated_at,
        gg1_0.village_id 
    from
        gbs_group gg1_0 
    where
        gg1_0.village_id=?
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_leader_history
        (created_at, end_dt, gbs_id, leader_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_leader_history
        (created_at, end_dt, gbs_id, leader_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        l1_0.id,
        l1_0.birth_date,
        l1_0.created_at,
        l1_0.department_id,
        l1_0.email,
        l1_0.name,
        l1_0.password,
        l1_0.phone_number,
        l1_0.role,
        l1_0.updated_at 
    from
        gbs_leader_history glh1_0 
    join
        users l1_0 
            on l1_0.id=glh1_0.leader_id 
    where
        glh1_0.gbs_id=? 
        and glh1_0.end_dt is null
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.name,
        d1_0.updated_at 
    from
        department d1_0 
    where
        d1_0.id=?
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        vl1_0.user_id,
        vl1_0.village_id,
        vl1_0.created_at,
        vl1_0.end_dt,
        vl1_0.start_dt,
        vl1_0.updated_at 
    from
        village_leader vl1_0 
    where
        vl1_0.user_id=?
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_leader_history
        (created_at, end_dt, gbs_id, leader_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_leader_history
        (created_at, end_dt, gbs_id, leader_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        glh1_0.id,
        glh1_0.created_at,
        glh1_0.end_dt,
        glh1_0.gbs_id,
        glh1_0.leader_id,
        glh1_0.start_dt,
        glh1_0.updated_at 
    from
        gbs_leader_history glh1_0 
    where
        glh1_0.gbs_id=? 
        and glh1_0.leader_id=? 
        and glh1_0.end_dt is null
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        gg1_0.id,
        gg1_0.created_at,
        gg1_0.name,
        gg1_0.term_end_dt,
        gg1_0.term_start_dt,
        gg1_0.updated_at,
        gg1_0.village_id 
    from
        gbs_group gg1_0 
    where
        gg1_0.id=?
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        v1_0.id,
        v1_0.created_at,
        v1_0.department_id,
        v1_0.name,
        v1_0.updated_at,
        vl1_0.user_id,
        vl1_0.village_id,
        vl1_0.created_at,
        vl1_0.end_dt,
        vl1_0.start_dt,
        vl1_0.updated_at 
    from
        village v1_0 
    left join
        village_leader vl1_0 
            on v1_0.id=vl1_0.village_id 
    where
        v1_0.id=?
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.name,
        d1_0.updated_at 
    from
        department d1_0 
    where
        d1_0.id=?
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.birth_date,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.name,
        u1_0.password,
        u1_0.phone_number,
        u1_0.role,
        u1_0.updated_at,
        vl1_0.user_id,
        vl1_0.village_id,
        vl1_0.created_at,
        vl1_0.end_dt,
        vl1_0.start_dt,
        vl1_0.updated_at 
    from
        users u1_0 
    left join
        village_leader vl1_0 
            on u1_0.id=vl1_0.user_id 
    where
        u1_0.id=?
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_leader_history
        (created_at, end_dt, gbs_id, leader_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_leader_history
        (created_at, end_dt, gbs_id, leader_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        glh1_0.id,
        glh1_0.created_at,
        glh1_0.end_dt,
        glh1_0.gbs_id,
        glh1_0.leader_id,
        glh1_0.start_dt,
        glh1_0.updated_at 
    from
        gbs_leader_history glh1_0 
    where
        glh1_0.gbs_id=? 
        and glh1_0.leader_id=? 
        and glh1_0.end_dt is null
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        gg1_0.id,
        gg1_0.created_at,
        gg1_0.name,
        gg1_0.term_end_dt,
        gg1_0.term_start_dt,
        gg1_0.updated_at,
        gg1_0.village_id 
    from
        gbs_group gg1_0 
    where
        gg1_0.id=?
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        v1_0.id,
        v1_0.created_at,
        v1_0.department_id,
        v1_0.name,
        v1_0.updated_at,
        vl1_0.user_id,
        vl1_0.village_id,
        vl1_0.created_at,
        vl1_0.end_dt,
        vl1_0.start_dt,
        vl1_0.updated_at 
    from
        village v1_0 
    left join
        village_leader vl1_0 
            on v1_0.id=vl1_0.village_id 
    where
        v1_0.id=?
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.name,
        d1_0.updated_at 
    from
        department d1_0 
    where
        d1_0.id=?
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.birth_date,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.name,
        u1_0.password,
        u1_0.phone_number,
        u1_0.role,
        u1_0.updated_at,
        vl1_0.user_id,
        vl1_0.village_id,
        vl1_0.created_at,
        vl1_0.end_dt,
        vl1_0.start_dt,
        vl1_0.updated_at 
    from
        users u1_0 
    left join
        village_leader vl1_0 
            on u1_0.id=vl1_0.user_id 
    where
        u1_0.id=?
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_member_history
        (created_at, end_dt, gbs_id, member_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_member_history
        (created_at, end_dt, gbs_id, member_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        count(gmh1_0.id) 
    from
        gbs_member_history gmh1_0 
    where
        gmh1_0.gbs_id=? 
        and gmh1_0.start_dt<=? 
        and (
            gmh1_0.end_dt is null 
            or gmh1_0.end_dt>=?
        )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_member_history
        (created_at, end_dt, gbs_id, member_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_member_history
        (created_at, end_dt, gbs_id, member_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        gmh1_0.id,
        gmh1_0.created_at,
        gmh1_0.end_dt,
        gmh1_0.gbs_id,
        gmh1_0.member_id,
        m1_0.id,
        m1_0.birth_date,
        m1_0.created_at,
        m1_0.department_id,
        m1_0.email,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.role,
        m1_0.updated_at,
        gmh1_0.start_dt,
        gmh1_0.updated_at 
    from
        gbs_member_history gmh1_0 
    join
        users m1_0 
            on m1_0.id=gmh1_0.member_id 
    where
        gmh1_0.gbs_id=? 
        and gmh1_0.start_dt<=? 
        and (
            gmh1_0.end_dt is null 
            or gmh1_0.end_dt>=?
        )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_member_history
        (created_at, end_dt, gbs_id, member_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_member_history
        (created_at, end_dt, gbs_id, member_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_member_history
        (created_at, end_dt, gbs_id, member_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        gmh1_0.id,
        gmh1_0.created_at,
        gmh1_0.end_dt,
        gmh1_0.gbs_id,
        gmh1_0.member_id,
        m1_0.id,
        m1_0.birth_date,
        m1_0.created_at,
        m1_0.department_id,
        m1_0.email,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.role,
        m1_0.updated_at,
        gmh1_0.start_dt,
        gmh1_0.updated_at 
    from
        gbs_member_history gmh1_0 
    join
        users m1_0 
            on m1_0.id=gmh1_0.member_id 
    where
        gmh1_0.gbs_id=? 
        and gmh1_0.start_dt<=? 
        and (
            gmh1_0.end_dt is null 
            or gmh1_0.end_dt>=?
        )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        leader_delegation
        (created_at, delegatee_id, delegator_id, end_dt, gbs_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        ld1_0.id,
        ld1_0.created_at,
        ld1_0.delegatee_id,
        ld1_0.delegator_id,
        ld1_0.end_dt,
        ld1_0.gbs_id,
        ld1_0.start_dt,
        ld1_0.updated_at 
    from
        leader_delegation ld1_0 
    where
        ld1_0.delegatee_id=? 
        and ld1_0.start_dt<=? 
        and (
            ld1_0.end_dt is null 
            or ld1_0.end_dt>=?
        )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        leader_delegation
        (created_at, delegatee_id, delegator_id, end_dt, gbs_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        ld1_0.id,
        ld1_0.created_at,
        ld1_0.delegatee_id,
        ld1_0.delegator_id,
        ld1_0.end_dt,
        ld1_0.gbs_id,
        ld1_0.start_dt,
        ld1_0.updated_at 
    from
        leader_delegation ld1_0 
    where
        ld1_0.delegator_id=? 
        and ld1_0.start_dt<=? 
        and (
            ld1_0.end_dt is null 
            or ld1_0.end_dt>=?
        )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        leader_delegation
        (created_at, delegatee_id, delegator_id, end_dt, gbs_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        ld1_0.id,
        ld1_0.created_at,
        ld1_0.delegatee_id,
        ld1_0.delegator_id,
        ld1_0.end_dt,
        ld1_0.gbs_id,
        ld1_0.start_dt,
        ld1_0.updated_at 
    from
        leader_delegation ld1_0 
    where
        ld1_0.delegatee_id=? 
        and ld1_0.gbs_id=? 
        and ld1_0.start_dt<=? 
        and (
            ld1_0.end_dt is null 
            or ld1_0.end_dt>=?
        )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        leader_delegation
        (created_at, delegatee_id, delegator_id, end_dt, gbs_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        ld1_0.id,
        ld1_0.created_at,
        ld1_0.delegatee_id,
        ld1_0.delegator_id,
        ld1_0.end_dt,
        ld1_0.gbs_id,
        ld1_0.start_dt,
        ld1_0.updated_at 
    from
        leader_delegation ld1_0 
    where
        ld1_0.delegatee_id=? 
        and ld1_0.start_dt<=? 
        and (
            ld1_0.end_dt is null 
            or ld1_0.end_dt>=?
        )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        leader_delegation
        (created_at, delegatee_id, delegator_id, end_dt, gbs_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        ld1_0.id,
        ld1_0.created_at,
        ld1_0.delegatee_id,
        ld1_0.delegator_id,
        ld1_0.end_dt,
        ld1_0.gbs_id,
        ld1_0.start_dt,
        ld1_0.updated_at 
    from
        leader_delegation ld1_0 
    where
        ld1_0.delegatee_id=? 
        and ld1_0.start_dt<=? 
        and (
            ld1_0.end_dt is null 
            or ld1_0.end_dt>=?
        )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        leader_delegation
        (created_at, delegatee_id, delegator_id, end_dt, gbs_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        ld1_0.id,
        ld1_0.created_at,
        ld1_0.delegatee_id,
        ld1_0.delegator_id,
        ld1_0.end_dt,
        ld1_0.gbs_id,
        ld1_0.start_dt,
        ld1_0.updated_at 
    from
        leader_delegation ld1_0 
    where
        ld1_0.delegatee_id=? 
        and ld1_0.gbs_id=? 
        and ld1_0.start_dt<=? 
        and (
            ld1_0.end_dt is null 
            or ld1_0.end_dt>=?
        )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        leader_delegation
        (created_at, delegatee_id, delegator_id, end_dt, gbs_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        ld1_0.id,
        ld1_0.created_at,
        ld1_0.delegatee_id,
        ld1_0.delegator_id,
        ld1_0.end_dt,
        ld1_0.gbs_id,
        ld1_0.start_dt,
        ld1_0.updated_at 
    from
        leader_delegation ld1_0 
    where
        ld1_0.delegatee_id=? 
        and ld1_0.gbs_id=? 
        and ld1_0.start_dt<=? 
        and (
            ld1_0.end_dt is null 
            or ld1_0.end_dt>=?
        )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        leader_delegation
        (created_at, delegatee_id, delegator_id, end_dt, gbs_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        ld1_0.id,
        ld1_0.created_at,
        ld1_0.delegatee_id,
        ld1_0.delegator_id,
        ld1_0.end_dt,
        ld1_0.gbs_id,
        ld1_0.start_dt,
        ld1_0.updated_at 
    from
        leader_delegation ld1_0 
    where
        ld1_0.delegatee_id=? 
        and ld1_0.gbs_id=? 
        and ld1_0.start_dt<=? 
        and (
            ld1_0.end_dt is null 
            or ld1_0.end_dt>=?
        )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        leader_delegation
        (created_at, delegatee_id, delegator_id, end_dt, gbs_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        ld1_0.id,
        ld1_0.created_at,
        ld1_0.delegatee_id,
        ld1_0.delegator_id,
        ld1_0.end_dt,
        ld1_0.gbs_id,
        ld1_0.start_dt,
        ld1_0.updated_at 
    from
        leader_delegation ld1_0 
    where
        ld1_0.gbs_id=? 
        and ld1_0.start_dt<=? 
        and (
            ld1_0.end_dt is null 
            or ld1_0.end_dt>=?
        )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        leader_delegation
        (created_at, delegatee_id, delegator_id, end_dt, gbs_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        leader_delegation
        (created_at, delegatee_id, delegator_id, end_dt, gbs_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        ld1_0.id,
        ld1_0.created_at,
        ld1_0.delegatee_id,
        ld1_0.delegator_id,
        ld1_0.end_dt,
        ld1_0.gbs_id,
        ld1_0.start_dt,
        ld1_0.updated_at 
    from
        leader_delegation ld1_0 
    where
        ld1_0.delegatee_id=? 
        and ld1_0.start_dt<=? 
        and (
            ld1_0.end_dt is null 
            or ld1_0.end_dt>=?
        )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        leader_delegation
        (created_at, delegatee_id, delegator_id, end_dt, gbs_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        ld1_0.id,
        ld1_0.created_at,
        ld1_0.delegatee_id,
        ld1_0.delegator_id,
        ld1_0.end_dt,
        ld1_0.gbs_id,
        ld1_0.start_dt,
        ld1_0.updated_at 
    from
        leader_delegation ld1_0 
    where
        ld1_0.gbs_id=? 
        and ld1_0.start_dt<=? 
        and (
            ld1_0.end_dt is null 
            or ld1_0.end_dt>=?
        )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        leader_delegation
        (created_at, delegatee_id, delegator_id, end_dt, gbs_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        ld1_0.id,
        ld1_0.created_at,
        ld1_0.delegatee_id,
        ld1_0.delegator_id,
        ld1_0.end_dt,
        ld1_0.gbs_id,
        ld1_0.start_dt,
        ld1_0.updated_at 
    from
        leader_delegation ld1_0 
    where
        ld1_0.delegator_id=? 
        and ld1_0.start_dt<=? 
        and (
            ld1_0.end_dt is null 
            or ld1_0.end_dt>=?
        )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        leader_delegation
        (created_at, delegatee_id, delegator_id, end_dt, gbs_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        ld1_0.id,
        ld1_0.created_at,
        ld1_0.delegatee_id,
        ld1_0.delegator_id,
        ld1_0.end_dt,
        ld1_0.gbs_id,
        ld1_0.start_dt,
        ld1_0.updated_at 
    from
        leader_delegation ld1_0 
    where
        ld1_0.gbs_id=? 
        and ld1_0.start_dt<=? 
        and (
            ld1_0.end_dt is null 
            or ld1_0.end_dt>=?
        )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        leader_delegation
        (created_at, delegatee_id, delegator_id, end_dt, gbs_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        leader_delegation
        (created_at, delegatee_id, delegator_id, end_dt, gbs_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        ld1_0.id,
        ld1_0.created_at,
        ld1_0.delegatee_id,
        ld1_0.delegator_id,
        ld1_0.end_dt,
        ld1_0.gbs_id,
        ld1_0.start_dt,
        ld1_0.updated_at 
    from
        leader_delegation ld1_0 
    where
        ld1_0.delegatee_id=? 
        and ld1_0.start_dt<=? 
        and (
            ld1_0.end_dt is null 
            or ld1_0.end_dt>=?
        )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        leader_delegation
        (created_at, delegatee_id, delegator_id, end_dt, gbs_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        ld1_0.id,
        ld1_0.created_at,
        ld1_0.delegatee_id,
        ld1_0.delegator_id,
        ld1_0.end_dt,
        ld1_0.gbs_id,
        ld1_0.start_dt,
        ld1_0.updated_at 
    from
        leader_delegation ld1_0 
    where
        ld1_0.delegatee_id=? 
        and ld1_0.gbs_id=? 
        and ld1_0.start_dt<=? 
        and (
            ld1_0.end_dt is null 
            or ld1_0.end_dt>=?
        )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        leader_delegation
        (created_at, delegatee_id, delegator_id, end_dt, gbs_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        ld1_0.id,
        ld1_0.created_at,
        ld1_0.delegatee_id,
        ld1_0.delegator_id,
        ld1_0.end_dt,
        ld1_0.gbs_id,
        ld1_0.start_dt,
        ld1_0.updated_at 
    from
        leader_delegation ld1_0 
    where
        ld1_0.gbs_id=? 
        and ld1_0.start_dt<=? 
        and (
            ld1_0.end_dt is null 
            or ld1_0.end_dt>=?
        )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        leader_delegation
        (created_at, delegatee_id, delegator_id, end_dt, gbs_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        ld1_0.id,
        ld1_0.created_at,
        ld1_0.delegatee_id,
        ld1_0.delegator_id,
        ld1_0.end_dt,
        ld1_0.gbs_id,
        ld1_0.start_dt,
        ld1_0.updated_at 
    from
        leader_delegation ld1_0 
    where
        ld1_0.delegatee_id=? 
        and ld1_0.gbs_id=? 
        and ld1_0.start_dt<=? 
        and (
            ld1_0.end_dt is null 
            or ld1_0.end_dt>=?
        )
2025-05-06 22:37:39 [Test worker] [NONE] WARN  o.s.b.t.j.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer - 

Found multiple occurrences of org.json.JSONObject on the class path:

	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/org.json/json/20230618/1ae16df7d556d02713e241086f878399e99260d6/json-20230618.jar!/org/json/JSONObject.class
	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/com.vaadin.external.google/android-json/0.0.20131108.vaadin1/fa26d351fe62a6a17f5cda1287c1c6110dec413f/android-json-0.0.20131108.vaadin1.jar!/org/json/JSONObject.class

You may wish to exclude one of them to ensure predictable runtime behavior

2025-05-06 22:37:39 [Test worker] [NONE] INFO  c.a.d.r.SystemLogRepositoryTest - Starting SystemLogRepositoryTest using Java 21.0.6 with PID 41751 (started by user in /Users/user/study/attendly-api)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG c.a.d.r.SystemLogRepositoryTest - Running with Spring Boot v3.4.5, Spring v6.2.6
2025-05-06 22:37:39 [Test worker] [NONE] INFO  c.a.d.r.SystemLogRepositoryTest - The following 1 profile is active: "test"
2025-05-06 22:37:39 [Test worker] [NONE] WARN  org.hibernate.orm.deprecation - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists attendance cascade 
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists batch_job_logs cascade 
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists batch_jobs cascade 
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists department cascade 
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_group cascade 
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_leader_history cascade 
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_member_history cascade 
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists leader_delegation cascade 
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists system_log cascade 
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists system_settings cascade 
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade 
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists village cascade 
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists village_leader cascade 
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table attendance (
        qt_count integer not null,
        week_start date not null,
        created_at timestamp(6) not null,
        created_by bigint not null,
        gbs_id bigint not null,
        id bigint generated by default as identity,
        member_id bigint not null,
        updated_at timestamp(6) not null,
        ministry enum ('A','B','C') not null,
        worship enum ('O','X') not null,
        primary key (id)
    )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table batch_job_logs (
        batch_job_id bigint not null,
        id bigint generated by default as identity,
        timestamp timestamp(6) not null,
        level varchar(10) not null,
        message TEXT not null,
        primary key (id)
    )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table batch_jobs (
        created_at timestamp(6) not null,
        finished_at timestamp(6),
        id bigint generated by default as identity,
        schedule_time timestamp(6),
        started_at timestamp(6),
        error_message TEXT,
        parameters TEXT,
        job_type enum ('DATA_BACKUP','GBS_REORGANIZATION','REMINDER','STATISTICS_GENERATION') not null,
        status enum ('CANCELLED','COMPLETED','FAILED','QUEUED','RUNNING') not null,
        primary key (id)
    )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table department (
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        name varchar(50) not null,
        primary key (id)
    )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table gbs_group (
        term_end_dt date not null,
        term_start_dt date not null,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        village_id bigint not null,
        name varchar(50) not null,
        primary key (id)
    )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table gbs_leader_history (
        end_dt date,
        start_dt date not null,
        created_at timestamp(6) not null,
        gbs_id bigint not null,
        id bigint generated by default as identity,
        leader_id bigint not null,
        updated_at timestamp(6) not null,
        primary key (id)
    )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table gbs_member_history (
        end_dt date,
        start_dt date not null,
        created_at timestamp(6) not null,
        gbs_id bigint not null,
        id bigint generated by default as identity,
        member_id bigint not null,
        updated_at timestamp(6) not null,
        primary key (id)
    )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table leader_delegation (
        end_dt date,
        start_dt date not null,
        created_at timestamp(6) not null,
        delegatee_id bigint not null,
        delegator_id bigint not null,
        gbs_id bigint not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        primary key (id)
    )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table system_log (
        id bigint generated by default as identity,
        timestamp timestamp(6) not null,
        user_id bigint,
        level varchar(10) not null,
        category varchar(20) not null,
        ip_address varchar(39),
        server_instance varchar(50),
        message varchar(1000) not null,
        additional_info TEXT,
        user_agent varchar(255),
        primary key (id)
    )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table system_settings (
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        setting_key varchar(50) not null unique,
        description varchar(200),
        setting_value varchar(1000) not null,
        primary key (id)
    )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table users (
        birth_date date,
        created_at timestamp(6) not null,
        department_id bigint not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        phone_number varchar(20),
        name varchar(50) not null,
        email varchar(100) unique,
        password varchar(100),
        role enum ('ADMIN','LEADER','MEMBER','MINISTER','VILLAGE_LEADER') not null,
        primary key (id)
    )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table village (
        created_at timestamp(6) not null,
        department_id bigint not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        name varchar(50) not null,
        primary key (id)
    )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table village_leader (
        end_dt date,
        start_dt date not null,
        created_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        user_id bigint not null,
        village_id bigint not null,
        primary key (user_id, village_id)
    )
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists attendance 
       add constraint FKg7dtnois2g6ghgu4bl5gym92u 
       foreign key (created_by) 
       references users
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists attendance 
       add constraint FKjn82a3qvj1ho9ajauog7v0f12 
       foreign key (gbs_id) 
       references gbs_group
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists attendance 
       add constraint FK8f5fy874njy44gc8df63m187j 
       foreign key (member_id) 
       references users
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists batch_job_logs 
       add constraint FKsoyil2u66we091nme35nm6ste 
       foreign key (batch_job_id) 
       references batch_jobs
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_group 
       add constraint FKqvo83ldaqku2vayubiutcly4e 
       foreign key (village_id) 
       references village
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_leader_history 
       add constraint FKjls4dwfsilybq2sa0x35ml3f9 
       foreign key (gbs_id) 
       references gbs_group
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_leader_history 
       add constraint FK810qej66ysfs5j8cqtqbtsr1h 
       foreign key (leader_id) 
       references users
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_member_history 
       add constraint FK21l70t0cajgfj6rehvc9s21tc 
       foreign key (gbs_id) 
       references gbs_group
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_member_history 
       add constraint FKasr4qspnvhydc2xbei8rlysxy 
       foreign key (member_id) 
       references users
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists leader_delegation 
       add constraint FKs9xr3vr71pux3puk06pwiivfl 
       foreign key (delegatee_id) 
       references users
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists leader_delegation 
       add constraint FKqg0jdq2i5pfckjlqr5xfhkguc 
       foreign key (delegator_id) 
       references users
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists leader_delegation 
       add constraint FKjr2i1o6vb363gnkm6qahsaji6 
       foreign key (gbs_id) 
       references gbs_group
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint FKfi832e3qv89fq376fuh8920y4 
       foreign key (department_id) 
       references department
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists village 
       add constraint FKmp8tdn2nuthupcstb37lgifs4 
       foreign key (department_id) 
       references department
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists village_leader 
       add constraint FK446snb5j15qqkonffm6tyepm0 
       foreign key (user_id) 
       references users
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists village_leader 
       add constraint FK9rpuj47r5r477bys6jmfthoeo 
       foreign key (village_id) 
       references village
2025-05-06 22:37:39 [Test worker] [NONE] INFO  c.a.d.r.SystemLogRepositoryTest - Started SystemLogRepositoryTest in 0.2 seconds (process running for 7.895)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        sl1_0.id,
        sl1_0.additional_info,
        sl1_0.category,
        sl1_0.ip_address,
        sl1_0.level,
        sl1_0.message,
        sl1_0.server_instance,
        sl1_0.timestamp,
        sl1_0.user_agent,
        sl1_0.user_id 
    from
        system_log sl1_0 
    where
        lower(sl1_0.message) like lower(('%'||?||'%')) escape '' 
    fetch
        first ? rows only
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        sl1_0.id,
        sl1_0.additional_info,
        sl1_0.category,
        sl1_0.ip_address,
        sl1_0.level,
        sl1_0.message,
        sl1_0.server_instance,
        sl1_0.timestamp,
        sl1_0.user_agent,
        sl1_0.user_id 
    from
        system_log sl1_0 
    where
        lower(sl1_0.message) like lower(('%'||?||'%')) escape '' 
    fetch
        first ? rows only
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        sl1_0.id,
        sl1_0.additional_info,
        sl1_0.category,
        sl1_0.ip_address,
        sl1_0.level,
        sl1_0.message,
        sl1_0.server_instance,
        sl1_0.timestamp,
        sl1_0.user_agent,
        sl1_0.user_id 
    from
        system_log sl1_0 
    where
        sl1_0.timestamp between ? and ? 
    fetch
        first ? rows only
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        sl1_0.id,
        sl1_0.additional_info,
        sl1_0.category,
        sl1_0.ip_address,
        sl1_0.level,
        sl1_0.message,
        sl1_0.server_instance,
        sl1_0.timestamp,
        sl1_0.user_agent,
        sl1_0.user_id 
    from
        system_log sl1_0 
    where
        sl1_0.category=? 
    fetch
        first ? rows only
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        sl1_0.id,
        sl1_0.additional_info,
        sl1_0.category,
        sl1_0.ip_address,
        sl1_0.level,
        sl1_0.message,
        sl1_0.server_instance,
        sl1_0.timestamp,
        sl1_0.user_agent,
        sl1_0.user_id 
    from
        system_log sl1_0 
    where
        sl1_0.category=? 
    fetch
        first ? rows only
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        sl1_0.id,
        sl1_0.additional_info,
        sl1_0.category,
        sl1_0.ip_address,
        sl1_0.level,
        sl1_0.message,
        sl1_0.server_instance,
        sl1_0.timestamp,
        sl1_0.user_agent,
        sl1_0.user_id 
    from
        system_log sl1_0 
    where
        sl1_0.level=? 
    fetch
        first ? rows only
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        sl1_0.id,
        sl1_0.additional_info,
        sl1_0.category,
        sl1_0.ip_address,
        sl1_0.level,
        sl1_0.message,
        sl1_0.server_instance,
        sl1_0.timestamp,
        sl1_0.user_agent,
        sl1_0.user_id 
    from
        system_log sl1_0 
    where
        sl1_0.level=? 
    fetch
        first ? rows only
2025-05-06 22:37:39 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#173
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Department name=#174
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #173#175
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=1, name='테스트 사용자', role=MEMBER)] on UserRepository(#173).findByEmail(test@example.com)
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#176
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #176#177
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on UserRepository(#176).findByEmail(nonexistent@example.com)
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for FilterChain name=filterChain#178
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for JwtTokenProvider name=jwtTokenProvider#179
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for HttpServletRequest name=request#180
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for HttpServletResponse name=response#181
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsService name=userDetailsService#182
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering null on HttpServletRequest(request#180).getHeader(Authorization)
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering kotlin.Unit on FilterChain(filterChain#178).doFilter(HttpServletRequest(request#180), HttpServletResponse(response#181))
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Unit name=child of filterChain#178#183
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for FilterChain name=filterChain#184
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for JwtTokenProvider name=jwtTokenProvider#185
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for HttpServletRequest name=request#186
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for HttpServletResponse name=response#187
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsService name=userDetailsService#188
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.JvmStaticMockFactory - Creating static mockk for SecurityContextHolder
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG io.mockk.proxy.jvm.StaticProxyMaker - Transforming class org.springframework.security.core.context.SecurityContextHolder for static method interception
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#189
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=child of static SecurityContextHolder#190
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #189#191
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetails name=child of userDetailsService#188#192
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Bearer test-jwt-token on HttpServletRequest(request#186).getHeader(Authorization)
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering testuser on JwtTokenProvider(jwtTokenProvider#185).extractUsername(test-jwt-token)
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering SecurityContext(#189) on class org.springframework.security.core.context.SecurityContextHolder.getContext()
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering null on SecurityContext(#189).getAuthentication()
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering org.springframework.security.core.userdetails.User [Username=testuser, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[]] on UserDetailsService(userDetailsService#188).loadUserByUsername(testuser)
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering false on JwtTokenProvider(jwtTokenProvider#185).validateToken(test-jwt-token, org.springframework.security.core.userdetails.User [Username=testuser, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[]])
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering kotlin.Unit on FilterChain(filterChain#184).doFilter(HttpServletRequest(request#186), HttpServletResponse(response#187))
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Unit name=child of filterChain#184#193
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Unit name=child of #189#194
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for FilterChain name=filterChain#195
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for JwtTokenProvider name=jwtTokenProvider#196
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for HttpServletRequest name=request#197
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for HttpServletResponse name=response#198
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsService name=userDetailsService#199
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering null on class org.springframework.security.core.context.SecurityContextHolder.clearContext()
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#200
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=child of static SecurityContextHolder#201
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #200#202
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetails name=child of userDetailsService#199#203
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Bearer test-jwt-token on HttpServletRequest(request#197).getHeader(Authorization)
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering testuser on JwtTokenProvider(jwtTokenProvider#196).extractUsername(test-jwt-token)
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering SecurityContext(#200) on class org.springframework.security.core.context.SecurityContextHolder.getContext()
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering null on SecurityContext(#200).getAuthentication()
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering org.springframework.security.core.userdetails.User [Username=testuser, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[]] on UserDetailsService(userDetailsService#199).loadUserByUsername(testuser)
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering true on JwtTokenProvider(jwtTokenProvider#196).validateToken(test-jwt-token, org.springframework.security.core.userdetails.User [Username=testuser, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[]])
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering  on HttpServletRequest(request#197).getRemoteAddr()
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for HttpSession name=child of request#197#204
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering HttpSession(child of request#197#204) on HttpServletRequest(request#197).getSession(false)
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering  on HttpSession(child of request#197#204).getId()
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering SecurityContext(#200) on class org.springframework.security.core.context.SecurityContextHolder.getContext()
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering kotlin.Unit on SecurityContext(#200).setAuthentication(UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=testuser, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=, SessionId=], Granted Authorities=[]])
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering kotlin.Unit on FilterChain(filterChain#195).doFilter(HttpServletRequest(request#197), HttpServletResponse(response#198))
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Unit name=child of filterChain#195#205
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Unit name=child of #200#206
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for FilterChain name=filterChain#207
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for JwtTokenProvider name=jwtTokenProvider#208
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for HttpServletRequest name=request#209
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for HttpServletResponse name=response#210
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsService name=userDetailsService#211
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering null on class org.springframework.security.core.context.SecurityContextHolder.clearContext()
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Bearer test-jwt-token on HttpServletRequest(request#209).getHeader(Authorization)
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Throwing java.lang.RuntimeException: Token extraction failed on JwtTokenProvider(jwtTokenProvider#208).extractUsername(test-jwt-token)
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering kotlin.Unit on FilterChain(filterChain#207).doFilter(HttpServletRequest(request#209), HttpServletResponse(response#210))
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Unit name=child of filterChain#207#212
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetails name=child of userDetailsService#211#213
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for FilterChain name=filterChain#214
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for JwtTokenProvider name=jwtTokenProvider#215
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for HttpServletRequest name=request#216
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for HttpServletResponse name=response#217
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsService name=userDetailsService#218
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering null on class org.springframework.security.core.context.SecurityContextHolder.clearContext()
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering InvalidFormat on HttpServletRequest(request#216).getHeader(Authorization)
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering kotlin.Unit on FilterChain(filterChain#214).doFilter(HttpServletRequest(request#216), HttpServletResponse(response#217))
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Unit name=child of filterChain#214#219
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.JvmStaticMockFactory - Disposing object mockk for Companion hashcode=d6f0159
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.JvmStaticMockFactory - Disposing static mockk for class org.springframework.security.core.context.SecurityContextHolder
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#220
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#221
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #221#222
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on UserDetailsAdapter(#221).getId()
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering test@example.com on UserDetailsAdapter(#221).getUsername()
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#223
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering other@example.com on UserDetailsAdapter(#223).getUsername()
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#224
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#225
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #225#226
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on UserDetailsAdapter(#225).getId()
2025-05-06 22:37:40 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering test@example.com on UserDetailsAdapter(#225).getUsername()
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#227
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#228
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #228#229
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on UserDetailsAdapter(#228).getId()
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering test@example.com on UserDetailsAdapter(#228).getUsername()
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#230
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#231
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #231#232
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on UserDetailsAdapter(#231).getId()
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering test@example.com on UserDetailsAdapter(#231).getUsername()
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#233
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#234
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #234#235
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on UserDetailsAdapter(#234).getId()
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering test@example.com on UserDetailsAdapter(#234).getUsername()
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#236
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#237
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #237#238
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on UserDetailsAdapter(#237).getId()
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering test@example.com on UserDetailsAdapter(#237).getUsername()
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#239
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#240
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #240#241
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on UserDetailsAdapter(#240).getId()
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering test@example.com on UserDetailsAdapter(#240).getUsername()
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering test@example.com on UserDetailsAdapter(#240).getUsername()
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#242
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#243
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #243#244
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on UserDetailsAdapter(#243).getId()
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering test@example.com on UserDetailsAdapter(#243).getUsername()
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceService name=#245
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#246
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#247
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#248
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#249
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #249#250
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#251
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #251#252
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#253
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #253#254
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#255
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #255#256
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#257
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #257#258
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=#259
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=#260
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=child of #260#261
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #253#262
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #248#263
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#264
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #264#265
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #247#266
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Authentication(#247) on SecurityContext(#248).getAuthentication()
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering UserDetailsAdapter(#264) on Authentication(#247).getPrincipal()
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#255) on UserDetailsAdapter(#264).getUser()
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#255).getRole()
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#255).getRole()
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#255).getRole()
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#255).getRole()
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 4 on User(#255).getId()
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering false on AttendanceService(#245).hasLeaderAccess(1, 4)
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceService name=#267
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#268
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#269
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#270
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#271
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #271#272
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#273
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #273#274
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#275
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #275#276
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#277
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #277#278
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#279
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #279#280
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=#281
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=#282
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=child of #282#283
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #275#284
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #270#285
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#286
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #286#287
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #269#288
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Authentication(#269) on SecurityContext(#270).getAuthentication()
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering UserDetailsAdapter(#286) on Authentication(#269).getPrincipal()
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#277) on UserDetailsAdapter(#286).getUser()
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#277).getRole()
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#277).getRole()
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#277).getRole()
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#277).getRole()
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 4 on User(#277).getId()
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering true on AttendanceService(#267).hasLeaderAccess(1, 4)
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceService name=#289
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#290
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#291
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#292
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#293
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #293#294
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#295
2025-05-06 22:37:41 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #295#296
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#297
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #297#298
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#299
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #299#300
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#301
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #301#302
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=#303
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=#304
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=child of #304#305
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #297#306
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #292#307
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#308
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #308#309
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #291#310
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Authentication(#291) on SecurityContext(#292).getAuthentication()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering UserDetailsAdapter(#308) on Authentication(#291).getPrincipal()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#299) on UserDetailsAdapter(#308).getUser()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#299).getRole()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#299).getRole()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#299).getRole()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceService name=#311
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#312
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#313
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#314
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#315
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #315#316
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#317
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #317#318
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#319
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #319#320
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#321
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #321#322
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#323
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #323#324
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=#325
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=#326
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=child of #326#327
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #319#328
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #314#329
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #313#330
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Authentication(#313) on SecurityContext(#314).getAuthentication()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering null on Authentication(#313).getPrincipal()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceService name=#331
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#332
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#333
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#334
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#335
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #335#336
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#337
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #337#338
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#339
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #339#340
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#341
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #341#342
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#343
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #343#344
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=#345
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=#346
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=child of #346#347
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #339#348
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #334#349
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#350
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #350#351
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #333#352
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Authentication(#333) on SecurityContext(#334).getAuthentication()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering UserDetailsAdapter(#350) on Authentication(#333).getPrincipal()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#339) on UserDetailsAdapter(#350).getUser()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VILLAGE_LEADER on User(#339).getRole()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VILLAGE_LEADER on User(#339).getRole()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VILLAGE_LEADER on User(#339).getRole()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VillageLeader(#346) on User(#339).getVillageLeader()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Village(#345) on VillageLeader(#346).getVillage()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on Village(#345).getId()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceService name=#353
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#354
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#355
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#356
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#357
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #357#358
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#359
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #359#360
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#361
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #361#362
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#363
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #363#364
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#365
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #365#366
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=#367
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=#368
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=child of #368#369
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #361#370
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #356#371
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#372
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #372#373
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #355#374
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Authentication(#355) on SecurityContext(#356).getAuthentication()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering UserDetailsAdapter(#372) on Authentication(#355).getPrincipal()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#361) on UserDetailsAdapter(#372).getUser()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VILLAGE_LEADER on User(#361).getRole()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VILLAGE_LEADER on User(#361).getRole()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VILLAGE_LEADER on User(#361).getRole()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceService name=#375
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#376
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#377
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#378
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#379
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #379#380
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#381
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #381#382
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#383
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #383#384
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#385
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #385#386
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#387
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #387#388
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=#389
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=#390
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=child of #390#391
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #383#392
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #378#393
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#394
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #394#395
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #377#396
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Authentication(#377) on SecurityContext(#378).getAuthentication()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering UserDetailsAdapter(#394) on Authentication(#377).getPrincipal()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#381) on UserDetailsAdapter(#394).getUser()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering MINISTER on User(#381).getRole()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering MINISTER on User(#381).getRole()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceService name=#397
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#398
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#399
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#400
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#401
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #401#402
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#403
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #403#404
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#405
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #405#406
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#407
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #407#408
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#409
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #409#410
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=#411
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=#412
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=child of #412#413
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #405#414
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #400#415
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#416
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #416#417
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #399#418
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Authentication(#399) on SecurityContext(#400).getAuthentication()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering UserDetailsAdapter(#416) on Authentication(#399).getPrincipal()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#401) on UserDetailsAdapter(#416).getUser()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering ADMIN on User(#401).getRole()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceService name=#419
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#420
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#421
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#422
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#423
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #423#424
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#425
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #425#426
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#427
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #427#428
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#429
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #429#430
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#431
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #431#432
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=#433
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=#434
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=child of #434#435
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #427#436
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #422#437
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#438
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #438#439
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #421#440
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Authentication(#421) on SecurityContext(#422).getAuthentication()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering UserDetailsAdapter(#438) on Authentication(#421).getPrincipal()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#427) on UserDetailsAdapter(#438).getUser()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VILLAGE_LEADER on User(#427).getRole()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VILLAGE_LEADER on User(#427).getRole()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VILLAGE_LEADER on User(#427).getRole()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VillageLeader(#434) on User(#427).getVillageLeader()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Village(#433) on VillageLeader(#434).getVillage()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on Village(#433).getId()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceService name=#441
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#442
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#443
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#444
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#445
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #445#446
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#447
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #447#448
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#449
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #449#450
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#451
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #451#452
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#453
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #453#454
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=#455
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=#456
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=child of #456#457
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #449#458
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #444#459
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#460
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #460#461
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #443#462
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Authentication(#443) on SecurityContext(#444).getAuthentication()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering UserDetailsAdapter(#460) on Authentication(#443).getPrincipal()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#453) on UserDetailsAdapter(#460).getUser()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering MEMBER on User(#453).getRole()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering MEMBER on User(#453).getRole()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering MEMBER on User(#453).getRole()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering MEMBER on User(#453).getRole()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceService name=#463
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#464
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#465
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#466
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#467
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #467#468
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#469
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #469#470
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#471
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #471#472
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#473
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #473#474
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#475
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #475#476
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=#477
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=#478
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=child of #478#479
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #471#480
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #466#481
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#482
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #482#483
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #465#484
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering UserDetailsAdapter(#482) on Authentication(#465).getPrincipal()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#469) on UserDetailsAdapter(#482).getUser()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering MINISTER on User(#469).getRole()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceService name=#485
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#486
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#487
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#488
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#489
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #489#490
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#491
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #491#492
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#493
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #493#494
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#495
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #495#496
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#497
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #497#498
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=#499
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=#500
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=child of #500#501
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #493#502
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #488#503
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#504
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #504#505
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #487#506
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Authentication(#487) on SecurityContext(#488).getAuthentication()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering UserDetailsAdapter(#504) on Authentication(#487).getPrincipal()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#489) on UserDetailsAdapter(#504).getUser()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering ADMIN on User(#489).getRole()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceService name=#507
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#508
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#509
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#510
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#511
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #511#512
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#513
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #513#514
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#515
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #515#516
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#517
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #517#518
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#519
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #519#520
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=#521
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=#522
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=child of #522#523
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #515#524
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #510#525
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #509#526
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering null on Authentication(#509).getPrincipal()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceService name=#527
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#528
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#529
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#530
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#531
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #531#532
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#533
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #533#534
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#535
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #535#536
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#537
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #537#538
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#539
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #539#540
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=#541
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=#542
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=child of #542#543
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #535#544
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #530#545
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #529#546
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Authentication(#529) on SecurityContext(#530).getAuthentication()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering null on Authentication(#529).getPrincipal()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceService name=#547
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#548
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#549
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#550
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#551
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #551#552
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#553
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #553#554
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#555
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #555#556
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#557
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #557#558
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#559
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #559#560
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=#561
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=#562
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=child of #562#563
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #555#564
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #550#565
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#566
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #566#567
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #549#568
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering UserDetailsAdapter(#566) on Authentication(#549).getPrincipal()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#551) on UserDetailsAdapter(#566).getUser()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering ADMIN on User(#551).getRole()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceService name=#569
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#570
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#571
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#572
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#573
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #573#574
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#575
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #575#576
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#577
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #577#578
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#579
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #579#580
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#581
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #581#582
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=#583
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=#584
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=child of #584#585
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #577#586
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #572#587
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#588
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #588#589
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #571#590
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Authentication(#571) on SecurityContext(#572).getAuthentication()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering UserDetailsAdapter(#588) on Authentication(#571).getPrincipal()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#575) on UserDetailsAdapter(#588).getUser()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering MINISTER on User(#575).getRole()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering MINISTER on User(#575).getRole()
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for BatchJobRepository name=#591
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for ObjectMapper name=#592
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #591#593
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[BatchJob(id=1, jobType=GBS_REORGANIZATION, status=COMPLETED)] on BatchJobRepository(#591).findById(1)
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for BatchJobRepository name=#594
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for ObjectMapper name=#595
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for BatchJob name=child of #594#596
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering {"key1":"value1","key2":"value2"} on ObjectMapper(#595).writeValueAsString({key1=value1, key2=value2})
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering BatchJob(id=1, jobType=GBS_REORGANIZATION, status=QUEUED) on BatchJobRepository(#594).save(BatchJob(id=null, jobType=GBS_REORGANIZATION, status=QUEUED))
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for BatchJobRepository name=#597
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for ObjectMapper name=#598
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #597#599
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on BatchJobRepository(#597).findById(999)
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for BatchJobRepository name=#600
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for ObjectMapper name=#601
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #600#602
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[BatchJob(id=1, jobType=GBS_REORGANIZATION, status=RUNNING)] on BatchJobRepository(#600).findById(1)
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for BatchJobRepository name=#603
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for ObjectMapper name=#604
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #603#605
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on BatchJobRepository(#603).findById(999)
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for BatchJobRepository name=#606
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for ObjectMapper name=#607
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #606#608
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on BatchJobRepository(#606).findById(999)
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=#609
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#610
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=#611
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#612
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#613
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=#614
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #610#615
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on VillageRepository(#610).findById(999)
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=#616
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#617
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=#618
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#619
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#620
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=#621
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #618#622
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on GbsGroupRepository(#618).findById(999)
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=#623
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#624
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=#625
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#626
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#627
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=#628
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering false on DepartmentRepository(#623).existsById(999)
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=#629
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#630
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=#631
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#632
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#633
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=#634
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #630#635
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on VillageRepository(#630).findById(999)
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=#636
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#637
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=#638
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#639
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#640
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=#641
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #636#642
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on DepartmentRepository(#636).findById(999)
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=#643
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#644
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=#645
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#646
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#647
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=#648
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #645#649
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #646#650
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[GbsGroup(id=1, name='1GBS')] on GbsGroupRepository(#645).findById(1)
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on UserRepository(#646).findById(999)
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=#651
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#652
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=#653
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#654
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#655
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=#656
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #651#657
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on DepartmentRepository(#651).findById(999)
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=#658
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#659
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=#660
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#661
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#662
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=#663
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #658#664
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on DepartmentRepository(#658).findById(999)
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=#665
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#666
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=#667
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#668
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#669
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=#670
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #665#671
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on DepartmentRepository(#665).findById(999)
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=#672
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#673
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=#674
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#675
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#676
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=#677
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #674#678
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on GbsGroupRepository(#674).findById(999)
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#679
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=#680
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for PasswordEncoder name=#681
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Page name=child of #679#682
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Page 1 of 1 containing com.attendly.domain.entity.User instances on UserRepository(#679).findAll(Page request [number: 0, size 10, sort: UNSORTED])
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#683
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=#684
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for PasswordEncoder name=#685
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering true on UserRepository(#683).existsById(1)
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering kotlin.Unit on UserRepository(#683).deleteById(1)
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Unit name=child of #683#686
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#687
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=#688
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for PasswordEncoder name=#689
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #688#690
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #687#691
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #687#692
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on UserRepository(#687).findByEmail(hong@example.com)
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[Department(id=1, name='청년부')] on DepartmentRepository(#688).findById(1)
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering encodedPassword on PasswordEncoder(#689).encode(Password123!)
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=1, name='홍길동', role=LEADER) on UserRepository(#687).save(User(id=null, name='홍길동', role=LEADER))
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#693
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=#694
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for PasswordEncoder name=#695
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering false on UserRepository(#693).existsById(999)
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Unit name=child of #693#696
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#697
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=#698
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for PasswordEncoder name=#699
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #697#700
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #697#701
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=1, name='홍길동', role=LEADER)] on UserRepository(#697).findById(1)
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering newEncodedPassword on PasswordEncoder(#699).encode(NewPassword123!)
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=1, name='홍길동', role=LEADER) on UserRepository(#697).save(User(id=1, name='홍길동', role=LEADER))
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#702
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=#703
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for PasswordEncoder name=#704
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #702#705
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=2, name='기존사용자', role=MEMBER)] on UserRepository(#702).findByEmail(hong@example.com)
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #703#706
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #702#707
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#708
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=#709
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for PasswordEncoder name=#710
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #708#711
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #708#712
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #708#713
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=1, name='홍길동', role=LEADER)] on UserRepository(#708).findById(1)
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on UserRepository(#708).findByEmail(hong_updated@example.com)
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=1, name='홍길동(수정)', role=ADMIN) on UserRepository(#708).save(User(id=1, name='홍길동(수정)', role=ADMIN))
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#714
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=#715
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for PasswordEncoder name=#716
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #714#717
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=1, name='홍길동', role=LEADER)] on UserRepository(#714).findById(1)
2025-05-06 22:37:42 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#718
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=authentication#719
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#720
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#721
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#722
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#723
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=securityContext#724
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#725
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#726
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of villageRepository#726#727
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of gbsGroupRepository#720#728
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#718#729
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of gbsLeaderHistoryRepository#721#730
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[Village(id=1, name='테스트 마을')] on VillageRepository(villageRepository#726).findById(1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [GbsGroup(id=1, name='테스트 GBS')] on GbsGroupRepository(gbsGroupRepository#720).findActiveGroupsByVillageId(1, 2025-05-05)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [Attendance(id=1, member=2, week=2025-05-05)] on AttendanceRepository(attendanceRepository#718).findDetailsByGbsIdAndWeek(1, 2025-05-05)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=4, name='리더', role=LEADER) on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#721).findLeaderByGbsIdAndDate(1, 2025-05-05)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 5 on GbsMemberHistoryRepository(gbsMemberHistoryRepository#722).countActiveMembers(1, 2025-05-05)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#731
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=authentication#732
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#733
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#734
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#735
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#736
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=securityContext#737
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#738
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#739
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistory name=child of gbsLeaderHistoryRepository#734#740
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsLeaderHistory(id=1, gbsGroup=1, leader=1) on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#734).findByGbsGroupIdAndLeaderIdAndEndDateIsNull(1, 1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#741
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=authentication#742
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#743
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#744
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#745
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#746
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=securityContext#747
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#748
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#749
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of villageRepository#749#750
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of gbsGroupRepository#743#751
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#741#752
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of gbsLeaderHistoryRepository#744#753
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[Village(id=1, name='테스트 마을')] on VillageRepository(villageRepository#749).findById(1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [GbsGroup(id=1, name='테스트 GBS')] on GbsGroupRepository(gbsGroupRepository#743).findActiveGroupsByVillageId(1, 2025-05-05)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [Attendance(id=1, member=2, week=2025-05-05)] on AttendanceRepository(attendanceRepository#741).findDetailsByGbsIdAndWeek(1, 2025-05-05)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=4, name='리더', role=LEADER) on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#744).findLeaderByGbsIdAndDate(1, 2025-05-05)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 10 on GbsMemberHistoryRepository(gbsMemberHistoryRepository#745).countActiveMembers(1, 2025-05-05)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#754
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=authentication#755
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#756
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#757
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#758
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#759
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=securityContext#760
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#761
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#762
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistory name=child of gbsLeaderHistoryRepository#757#763
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of leaderDelegationRepository#759#764
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering null on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#757).findByGbsGroupIdAndLeaderIdAndEndDateIsNull(1, 1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [LeaderDelegation(id=1, delegator=2, delegatee=1, gbsGroup=1)] on LeaderDelegationRepository(leaderDelegationRepository#759).findActiveDelegationsByDelegateeAndGbs(1, 1, 2025-05-06)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#765
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=authentication#766
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#767
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#768
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#769
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#770
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=securityContext#771
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#772
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#773
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistory name=child of gbsLeaderHistoryRepository#768#774
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of leaderDelegationRepository#770#775
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering null on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#768).findByGbsGroupIdAndLeaderIdAndEndDateIsNull(1, 1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on LeaderDelegationRepository(leaderDelegationRepository#770).findActiveDelegationsByDelegateeAndGbs(1, 1, 2025-05-06)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#776
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=authentication#777
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#778
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#779
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#780
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#781
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=securityContext#782
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#783
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#784
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of securityContext#782#785
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of authentication#777#786
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of gbsGroupRepository#778#787
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistory name=child of gbsLeaderHistoryRepository#779#788
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of leaderDelegationRepository#781#789
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Authentication(authentication#777) on SecurityContext(securityContext#782).getAuthentication()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering com.attendly.security.UserDetailsAdapter@2a36ec1 on Authentication(authentication#777).getPrincipal()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[GbsGroup(id=1, name='테스트 GBS')] on GbsGroupRepository(gbsGroupRepository#778).findById(1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering null on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#779).findByGbsGroupIdAndLeaderIdAndEndDateIsNull(1, 1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on LeaderDelegationRepository(leaderDelegationRepository#781).findActiveDelegationsByDelegateeAndGbs(1, 1, 2025-05-06)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#790
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=authentication#791
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#792
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#793
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#794
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#795
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=securityContext#796
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#797
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#798
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of securityContext#796#799
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of authentication#791#800
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of gbsGroupRepository#792#801
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistory name=child of gbsLeaderHistoryRepository#793#802
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#790#803
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of userRepository#797#804
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of userRepository#797#805
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of gbsMemberHistoryRepository#794#806
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#790#807
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Authentication(authentication#791) on SecurityContext(securityContext#796).getAuthentication()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering com.attendly.security.UserDetailsAdapter@6c591c87 on Authentication(authentication#791).getPrincipal()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[GbsGroup(id=1, name='테스트 GBS')] on GbsGroupRepository(gbsGroupRepository#792).findById(1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsLeaderHistory(id=1, gbsGroup=1, leader=1) on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#793).findByGbsGroupIdAndLeaderIdAndEndDateIsNull(1, 1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on AttendanceRepository(attendanceRepository#790).findByGbsGroupAndWeekStart(GbsGroup(id=1, name='테스트 GBS'), 2025-05-05)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=2, name='조원1', role=MEMBER)] on UserRepository(userRepository#797).findById(2)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [GbsMemberHistory(id=1, gbsGroup=1, member=2), GbsMemberHistory(id=2, gbsGroup=1, member=3)] on GbsMemberHistoryRepository(gbsMemberHistoryRepository#794).findActiveMembers(GbsMemberHistorySearchCondition(gbsId=1, startDate=2025-05-06, endDate=2025-05-06))
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=3, name='조원2', role=MEMBER)] on UserRepository(userRepository#797).findById(3)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [GbsMemberHistory(id=1, gbsGroup=1, member=2), GbsMemberHistory(id=2, gbsGroup=1, member=3)] on GbsMemberHistoryRepository(gbsMemberHistoryRepository#794).findActiveMembers(GbsMemberHistorySearchCondition(gbsId=1, startDate=2025-05-06, endDate=2025-05-06))
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [Attendance(id=1, member=2, week=2025-05-05), Attendance(id=2, member=3, week=2025-05-05)] on AttendanceRepository(attendanceRepository#790).saveAll([Attendance(id=null, member=2, week=2025-05-05), Attendance(id=null, member=3, week=2025-05-05)])
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#808
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=authentication#809
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#810
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#811
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#812
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#813
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=securityContext#814
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#815
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#816
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of securityContext#814#817
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of authentication#809#818
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of gbsGroupRepository#810#819
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#808#820
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of userRepository#815#821
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of gbsMemberHistoryRepository#812#822
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#808#823
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Authentication(authentication#809) on SecurityContext(securityContext#814).getAuthentication()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering com.attendly.security.UserDetailsAdapter@6eeec611 on Authentication(authentication#809).getPrincipal()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[GbsGroup(id=1, name='테스트 GBS')] on GbsGroupRepository(gbsGroupRepository#810).findById(1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on AttendanceRepository(attendanceRepository#808).findByGbsGroupAndWeekStart(GbsGroup(id=1, name='테스트 GBS'), 2025-05-05)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=2, name='조원', role=MEMBER)] on UserRepository(userRepository#815).findById(2)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [GbsMemberHistory(id=1, gbsGroup=1, member=2)] on GbsMemberHistoryRepository(gbsMemberHistoryRepository#812).findActiveMembers(GbsMemberHistorySearchCondition(gbsId=1, startDate=2025-05-06, endDate=2025-05-06))
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [Attendance(id=1, member=2, week=2025-05-05)] on AttendanceRepository(attendanceRepository#808).saveAll([Attendance(id=null, member=2, week=2025-05-05)])
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#824
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=authentication#825
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#826
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#827
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#828
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#829
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=securityContext#830
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#831
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#832
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of securityContext#830#833
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of authentication#825#834
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of gbsGroupRepository#826#835
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistory name=child of gbsLeaderHistoryRepository#827#836
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#824#837
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of userRepository#831#838
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of gbsMemberHistoryRepository#828#839
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Authentication(authentication#825) on SecurityContext(securityContext#830).getAuthentication()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering com.attendly.security.UserDetailsAdapter@75327a6e on Authentication(authentication#825).getPrincipal()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[GbsGroup(id=1, name='테스트 GBS')] on GbsGroupRepository(gbsGroupRepository#826).findById(1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsLeaderHistory(id=1, gbsGroup=1, leader=1) on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#827).findByGbsGroupIdAndLeaderIdAndEndDateIsNull(1, 1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on AttendanceRepository(attendanceRepository#824).findByGbsGroupAndWeekStart(GbsGroup(id=1, name='테스트 GBS'), 2025-05-05)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=5, name='타GBS 조원', role=MEMBER)] on UserRepository(userRepository#831).findById(5)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on GbsMemberHistoryRepository(gbsMemberHistoryRepository#828).findActiveMembers(GbsMemberHistorySearchCondition(gbsId=1, startDate=2025-05-06, endDate=2025-05-06))
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#840
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=authentication#841
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#842
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#843
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#844
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#845
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=securityContext#846
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#847
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#848
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of gbsGroupRepository#842#849
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#840#850
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[GbsGroup(id=1, name='테스트 GBS')] on GbsGroupRepository(gbsGroupRepository#842).findById(1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [Attendance(id=1, member=2, week=2025-05-05)] on AttendanceRepository(attendanceRepository#840).findByGbsGroupAndWeekStart(GbsGroup(id=1, name='테스트 GBS'), 2025-05-05)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#851
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#852
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#853
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#854
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#855
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#856
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#857
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of villageRepository#857#858
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of gbsGroupRepository#852#859
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of gbsLeaderHistoryRepository#853#860
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#851#861
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of gbsGroupRepository#852#862
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of gbsLeaderHistoryRepository#853#863
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#851#864
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of gbsGroupRepository#852#865
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of gbsLeaderHistoryRepository#853#866
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#851#867
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[Village(id=2, name='R village')] on VillageRepository(villageRepository#857).findById(2)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [GbsGroup(id=2, name='GBS1')] on GbsGroupRepository(gbsGroupRepository#852).findActiveGroupsByVillageId(2, 2023-01-08)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on AttendanceRepository(attendanceRepository#851).findDetailsByGbsIdAndWeek(2, 2023-01-08)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=10, name='과거리더1', role=LEADER) on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#853).findLeaderByGbsIdAndDate(2, 2023-01-08)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 2 on GbsMemberHistoryRepository(gbsMemberHistoryRepository#854).countActiveMembers(2, 2023-01-08)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[Village(id=2, name='R village')] on VillageRepository(villageRepository#857).findById(2)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [GbsGroup(id=2, name='GBS1')] on GbsGroupRepository(gbsGroupRepository#852).findActiveGroupsByVillageId(2, 2023-06-01)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on AttendanceRepository(attendanceRepository#851).findDetailsByGbsIdAndWeek(2, 2023-06-01)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=10, name='과거리더1', role=LEADER) on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#853).findLeaderByGbsIdAndDate(2, 2023-06-01)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 3 on GbsMemberHistoryRepository(gbsMemberHistoryRepository#854).countActiveMembers(2, 2023-06-01)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[Village(id=2, name='R village')] on VillageRepository(villageRepository#857).findById(2)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [GbsGroup(id=2, name='GBS1')] on GbsGroupRepository(gbsGroupRepository#852).findActiveGroupsByVillageId(2, 2025-05-06)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on AttendanceRepository(attendanceRepository#851).findDetailsByGbsIdAndWeek(2, 2025-05-06)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=11, name='현재리더1', role=LEADER) on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#853).findLeaderByGbsIdAndDate(2, 2025-05-06)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 4 on GbsMemberHistoryRepository(gbsMemberHistoryRepository#854).countActiveMembers(2, 2025-05-06)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#868
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#869
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#870
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#871
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#872
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#873
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#874
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of villageRepository#874#875
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of gbsGroupRepository#869#876
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of gbsLeaderHistoryRepository#870#877
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#868#878
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of gbsLeaderHistoryRepository#870#879
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#868#880
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[Village(id=2, name='R village')] on VillageRepository(villageRepository#874).findById(2)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [GbsGroup(id=2, name='GBS1'), GbsGroup(id=3, name='GBS2')] on GbsGroupRepository(gbsGroupRepository#869).findActiveGroupsByVillageId(2, 2023-01-08)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [Attendance(id=1, member=13, week=2023-01-08), Attendance(id=2, member=14, week=2023-01-08)] on AttendanceRepository(attendanceRepository#868).findDetailsByGbsIdAndWeek(2, 2023-01-08)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=10, name='과거리더1', role=LEADER) on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#870).findLeaderByGbsIdAndDate(2, 2023-01-08)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 2 on GbsMemberHistoryRepository(gbsMemberHistoryRepository#871).countActiveMembers(2, 2023-01-08)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [Attendance(id=3, member=15, week=2023-01-08), Attendance(id=4, member=16, week=2023-01-08)] on AttendanceRepository(attendanceRepository#868).findDetailsByGbsIdAndWeek(3, 2023-01-08)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=12, name='리더2', role=LEADER) on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#870).findLeaderByGbsIdAndDate(3, 2023-01-08)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 2 on GbsMemberHistoryRepository(gbsMemberHistoryRepository#871).countActiveMembers(3, 2023-01-08)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#881
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#882
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#883
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#884
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#885
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#886
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#887
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of villageRepository#887#888
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of gbsGroupRepository#882#889
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of gbsLeaderHistoryRepository#883#890
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#881#891
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of gbsLeaderHistoryRepository#883#892
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#881#893
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of gbsGroupRepository#882#894
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of gbsLeaderHistoryRepository#883#895
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#881#896
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[Village(id=2, name='R village')] on VillageRepository(villageRepository#887).findById(2)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [GbsGroup(id=2, name='GBS1'), GbsGroup(id=3, name='GBS2')] on GbsGroupRepository(gbsGroupRepository#882).findActiveGroupsByVillageId(2, 2023-01-08)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on AttendanceRepository(attendanceRepository#881).findDetailsByGbsIdAndWeek(2, 2023-01-08)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=10, name='과거리더1', role=LEADER) on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#883).findLeaderByGbsIdAndDate(2, 2023-01-08)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 2 on GbsMemberHistoryRepository(gbsMemberHistoryRepository#884).countActiveMembers(2, 2023-01-08)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on AttendanceRepository(attendanceRepository#881).findDetailsByGbsIdAndWeek(3, 2023-01-08)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=12, name='리더2', role=LEADER) on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#883).findLeaderByGbsIdAndDate(3, 2023-01-08)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 2 on GbsMemberHistoryRepository(gbsMemberHistoryRepository#884).countActiveMembers(3, 2023-01-08)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[Village(id=2, name='R village')] on VillageRepository(villageRepository#887).findById(2)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [GbsGroup(id=2, name='GBS1')] on GbsGroupRepository(gbsGroupRepository#882).findActiveGroupsByVillageId(2, 2025-05-06)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on AttendanceRepository(attendanceRepository#881).findDetailsByGbsIdAndWeek(2, 2025-05-06)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=11, name='현재리더1', role=LEADER) on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#883).findLeaderByGbsIdAndDate(2, 2025-05-06)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 3 on GbsMemberHistoryRepository(gbsMemberHistoryRepository#884).countActiveMembers(2, 2025-05-06)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#897
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#898
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#899
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#900
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#901
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#902
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#903
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of villageRepository#903#904
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of gbsGroupRepository#898#905
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of gbsLeaderHistoryRepository#899#906
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#897#907
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of gbsLeaderHistoryRepository#899#908
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#897#909
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of gbsGroupRepository#898#910
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of gbsLeaderHistoryRepository#899#911
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#897#912
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[Village(id=2, name='R village')] on VillageRepository(villageRepository#903).findById(2)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [GbsGroup(id=2, name='GBS1'), GbsGroup(id=3, name='GBS2')] on GbsGroupRepository(gbsGroupRepository#898).findActiveGroupsByVillageId(2, 2023-01-08)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on AttendanceRepository(attendanceRepository#897).findDetailsByGbsIdAndWeek(2, 2023-01-08)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=10, name='과거리더1', role=LEADER) on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#899).findLeaderByGbsIdAndDate(2, 2023-01-08)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 2 on GbsMemberHistoryRepository(gbsMemberHistoryRepository#900).countActiveMembers(2, 2023-01-08)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on AttendanceRepository(attendanceRepository#897).findDetailsByGbsIdAndWeek(3, 2023-01-08)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=12, name='리더2', role=LEADER) on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#899).findLeaderByGbsIdAndDate(3, 2023-01-08)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 2 on GbsMemberHistoryRepository(gbsMemberHistoryRepository#900).countActiveMembers(3, 2023-01-08)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[Village(id=2, name='R village')] on VillageRepository(villageRepository#903).findById(2)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [GbsGroup(id=2, name='GBS1')] on GbsGroupRepository(gbsGroupRepository#898).findActiveGroupsByVillageId(2, 2025-05-06)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on AttendanceRepository(attendanceRepository#897).findDetailsByGbsIdAndWeek(2, 2025-05-06)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=11, name='현재리더1', role=LEADER) on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#899).findLeaderByGbsIdAndDate(2, 2025-05-06)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 3 on GbsMemberHistoryRepository(gbsMemberHistoryRepository#900).countActiveMembers(2, 2025-05-06)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#913
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#914
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=organizationService#915
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=userService#916
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=#917
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#918
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#919
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=#920
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#921
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #921#922
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of #921#923
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #921#924
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistory name=child of #918#925
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistory name=#926
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegation name=child of #919#927
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMembersListResponse name=child of #917#928
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#921).getRole()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#921).getRole()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#921).getRole()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#921).getRole()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on User(#921).getId()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsLeaderHistory(#926) on GbsLeaderHistoryRepository(#918).findCurrentLeaderHistoryByGbsIdAndLeaderId(1, 1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on User(#921).getId()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering null on LeaderDelegationRepository(#919).findActiveByGbsIdAndDelegateeId(1, 1, 2025-05-06)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsMembersListResponse(gbsId=1, gbsName=테스트 GBS, memberCount=2, members=[GbsMemberResponse(id=1, name=조원1, email=member1@example.com, birthDate=2000-01-01, joinDate=2025-05-06, phoneNumber=null), GbsMemberResponse(id=2, name=조원2, email=member2@example.com, birthDate=2000-02-02, joinDate=2025-05-06, phoneNumber=null)]) on OrganizationService(#917).getGbsMembers(1, 2025-05-06)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#929
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#930
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=organizationService#931
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=userService#932
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=#933
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#934
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#935
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=#936
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#937
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #937#938
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of #937#939
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #937#940
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Department name=#941
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Department name=#942
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroup name=child of #933#943
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMembersListResponse name=child of #933#944
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VILLAGE_LEADER on User(#937).getRole()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VILLAGE_LEADER on User(#937).getRole()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VILLAGE_LEADER on User(#937).getRole()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering <error "io.mockk.MockKException: No other calls allowed in stdObjectAnswer than equals/hashCode/toString"> on User(#937).getVillageLeader()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsGroup(id=1, name='테스트 GBS') on OrganizationService(#933).getGbsGroupById(1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering <error "io.mockk.MockKException: No other calls allowed in stdObjectAnswer than equals/hashCode/toString"> on User(#937).getVillageLeader()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsMembersListResponse(gbsId=1, gbsName=테스트 GBS, memberCount=2, members=[GbsMemberResponse(id=1, name=조원1, email=member1@example.com, birthDate=2000-01-01, joinDate=2025-05-06, phoneNumber=null), GbsMemberResponse(id=2, name=조원2, email=member2@example.com, birthDate=2000-02-02, joinDate=2025-05-06, phoneNumber=null)]) on OrganizationService(#933).getGbsMembers(1, 2025-05-06)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#945
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#946
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=organizationService#947
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=userService#948
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=#949
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#950
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#951
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=#952
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#953
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #953#954
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of #953#955
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #953#956
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 200 on User(#953).getId()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#953).getRole()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#953).getRole()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#953).getRole()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#957
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#958
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=organizationService#959
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=userService#960
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=#961
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#962
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#963
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=#964
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#965
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #965#966
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of #965#967
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #965#968
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMembersListResponse name=child of #961#969
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering MINISTER on User(#965).getRole()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering MINISTER on User(#965).getRole()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsMembersListResponse(gbsId=1, gbsName=테스트 GBS, memberCount=2, members=[GbsMemberResponse(id=1, name=조원1, email=member1@example.com, birthDate=2000-01-01, joinDate=2025-05-06, phoneNumber=null), GbsMemberResponse(id=2, name=조원2, email=member2@example.com, birthDate=2000-02-02, joinDate=2025-05-06, phoneNumber=null)]) on OrganizationService(#961).getGbsMembers(1, 2025-05-06)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#970
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#971
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=organizationService#972
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=userService#973
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=#974
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#975
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#976
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=#977
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#978
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #978#979
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of #978#980
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #978#981
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistory name=child of #975#982
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegation name=child of #976#983
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegation name=#984
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMembersListResponse name=child of #974#985
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#978).getRole()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#978).getRole()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#978).getRole()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#978).getRole()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 200 on User(#978).getId()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering null on GbsLeaderHistoryRepository(#975).findCurrentLeaderHistoryByGbsIdAndLeaderId(1, 200)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 200 on User(#978).getId()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LeaderDelegation(#984) on LeaderDelegationRepository(#976).findActiveByGbsIdAndDelegateeId(1, 200, 2025-05-06)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsMembersListResponse(gbsId=1, gbsName=테스트 GBS, memberCount=2, members=[GbsMemberResponse(id=1, name=조원1, email=member1@example.com, birthDate=2000-01-01, joinDate=2025-05-06, phoneNumber=null), GbsMemberResponse(id=2, name=조원2, email=member2@example.com, birthDate=2000-02-02, joinDate=2025-05-06, phoneNumber=null)]) on OrganizationService(#974).getGbsMembers(1, 2025-05-06)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#986
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#987
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=organizationService#988
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=userService#989
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=#990
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#991
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#992
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=#993
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#994
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #994#995
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of #994#996
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #994#997
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMembersListResponse name=child of #990#998
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering ADMIN on User(#994).getRole()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsMembersListResponse(gbsId=1, gbsName=테스트 GBS, memberCount=2, members=[GbsMemberResponse(id=1, name=조원1, email=member1@example.com, birthDate=2000-01-01, joinDate=2025-05-06, phoneNumber=null), GbsMemberResponse(id=2, name=조원2, email=member2@example.com, birthDate=2000-02-02, joinDate=2025-05-06, phoneNumber=null)]) on OrganizationService(#990).getGbsMembers(1, 2025-05-06)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#999
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#1000
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=organizationService#1001
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=userService#1002
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=#1003
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#1004
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#1005
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=#1006
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#1007
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #1007#1008
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of #1007#1009
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #1007#1010
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMembersListResponse name=child of #1003#1011
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMembersListResponse name=child of #1003#1012
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of #1004#1013
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on User(#1007).getId()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on User(#1007).getId()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering <error "io.mockk.MockKException: No other calls allowed in stdObjectAnswer than equals/hashCode/toString"> on GbsLeaderHistoryRepository(#1004).findByLeaderIdWithDetailsOrderByStartDateDesc(1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsMembersListResponse(gbsId=2, gbsName=테스트 GBS, memberCount=2, members=[GbsMemberResponse(id=1, name=조원1, email=member1@example.com, birthDate=2000-01-01, joinDate=2025-05-06, phoneNumber=null), GbsMemberResponse(id=2, name=조원2, email=member2@example.com, birthDate=2000-02-02, joinDate=2025-05-06, phoneNumber=null)]) on OrganizationService(#1003).getGbsMembers(2, 2025-05-06)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsMembersListResponse(gbsId=1, gbsName=테스트 GBS, memberCount=2, members=[GbsMemberResponse(id=1, name=조원1, email=member1@example.com, birthDate=2000-01-01, joinDate=2025-05-06, phoneNumber=null), GbsMemberResponse(id=2, name=조원2, email=member2@example.com, birthDate=2000-02-02, joinDate=2025-05-06, phoneNumber=null)]) on OrganizationService(#1003).getGbsMembers(1, 2022-12-31)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 테스트 사용자 on User(#1007).getName()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 테스트 사용자 on User(#1007).getName()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1014
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#1015
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=organizationService#1016
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=userService#1017
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=#1018
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#1019
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#1020
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=#1021
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#1022
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #1022#1023
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of #1022#1024
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #1022#1025
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistory name=child of #1019#1026
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegation name=child of #1020#1027
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#1022).getRole()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#1022).getRole()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#1022).getRole()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#1022).getRole()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on User(#1022).getId()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering null on GbsLeaderHistoryRepository(#1019).findCurrentLeaderHistoryByGbsIdAndLeaderId(1, 1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on User(#1022).getId()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering null on LeaderDelegationRepository(#1020).findActiveByGbsIdAndDelegateeId(1, 1, 2025-05-06)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1028
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#1029
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=organizationService#1030
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=userService#1031
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=#1032
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#1033
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#1034
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=#1035
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#1036
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #1036#1037
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of #1036#1038
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #1036#1039
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Department name=#1040
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Department name=#1041
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroup name=child of #1032#1042
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VILLAGE_LEADER on User(#1036).getRole()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VILLAGE_LEADER on User(#1036).getRole()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VILLAGE_LEADER on User(#1036).getRole()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering <error "io.mockk.MockKException: No other calls allowed in stdObjectAnswer than equals/hashCode/toString"> on User(#1036).getVillageLeader()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsGroup(id=1, name='테스트 GBS') on OrganizationService(#1032).getGbsGroupById(1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering <error "io.mockk.MockKException: No other calls allowed in stdObjectAnswer than equals/hashCode/toString"> on User(#1036).getVillageLeader()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VILLAGE_LEADER on User(#1036).getRole()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1043
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#1044
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=organizationService#1045
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=userService#1046
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=#1047
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#1048
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#1049
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=#1050
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#1051
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #1051#1052
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of #1051#1053
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #1051#1054
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Department name=#1055
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistory name=child of #1048#1056
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering <error "io.mockk.MockKException: No other calls allowed in stdObjectAnswer than equals/hashCode/toString"> on GbsLeaderHistoryRepository(#1048).findByLeaderIdAndEndDateIsNull(1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on User(#1051).getId()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 리더1 on User(#1051).getName()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1057
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#1058
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=organizationService#1059
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=userService#1060
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=#1061
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#1062
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#1063
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=#1064
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistory name=child of #1062#1065
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering null on GbsLeaderHistoryRepository(#1062).findByLeaderIdAndEndDateIsNull(1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#1066
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#1067
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=#1068
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #1067#1069
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #1067#1070
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #1068#1071
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=1, name='위임자', role=LEADER)] on UserRepository(#1067).findById(1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=2, name='위임받는자', role=MEMBER)] on UserRepository(#1067).findById(2)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[GbsGroup(id=3, name='GBS 그룹')] on GbsGroupRepository(#1068).findById(3)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#1072
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#1073
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=#1074
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of #1072#1075
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of #1072#1076
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on LeaderDelegationRepository(#1072).findActiveByDelegateIdAndDate(2, 2025-05-06)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on LeaderDelegationRepository(#1072).findActiveByUserIdAndDate(2, 2025-05-06, true)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#1077
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#1078
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=#1079
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #1078#1080
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #1078#1081
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #1079#1082
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=1, name='위임자', role=LEADER)] on UserRepository(#1078).findById(1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=2, name='위임받는자', role=MEMBER)] on UserRepository(#1078).findById(2)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on GbsGroupRepository(#1079).findById(999)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#1083
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#1084
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=#1085
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #1084#1086
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #1084#1087
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #1085#1088
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=1, name='위임자', role=LEADER)] on UserRepository(#1084).findById(1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=2, name='위임받는자', role=MEMBER)] on UserRepository(#1084).findById(2)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[GbsGroup(id=3, name='GBS 그룹')] on GbsGroupRepository(#1085).findById(3)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#1089
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#1090
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=#1091
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #1090#1092
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #1090#1093
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #1091#1094
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegation name=child of #1089#1095
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=1, name='위임자', role=LEADER)] on UserRepository(#1090).findById(1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=2, name='위임받는자', role=MEMBER)] on UserRepository(#1090).findById(2)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[GbsGroup(id=3, name='GBS 그룹')] on GbsGroupRepository(#1091).findById(3)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LeaderDelegation(id=99, delegator=1, delegatee=2, gbsGroup=3) on LeaderDelegationRepository(#1089).findActiveByGbsGroupIdAndDate(3, 2025-05-07)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#1096
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#1097
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=#1098
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #1097#1099
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #1097#1100
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #1098#1101
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegation name=child of #1096#1102
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegation name=child of #1096#1103
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=1, name='위임자', role=LEADER)] on UserRepository(#1097).findById(1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=2, name='위임받는자', role=MEMBER)] on UserRepository(#1097).findById(2)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[GbsGroup(id=3, name='GBS 그룹')] on GbsGroupRepository(#1098).findById(3)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering null on LeaderDelegationRepository(#1096).findActiveByGbsGroupIdAndDate(3, 2025-05-07)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LeaderDelegation(id=1, delegator=1, delegatee=2, gbsGroup=3) on LeaderDelegationRepository(#1096).save(LeaderDelegation(id=null, delegator=1, delegatee=2, gbsGroup=3))
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#1104
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#1105
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=#1106
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #1105#1107
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on UserRepository(#1105).findById(999)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#1108
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#1109
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=#1110
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #1109#1111
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #1109#1112
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=1, name='위임자', role=LEADER)] on UserRepository(#1109).findById(1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on UserRepository(#1109).findById(999)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#1113
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#1114
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=#1115
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of #1113#1116
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of #1113#1117
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [LeaderDelegation(id=1, delegator=1, delegatee=2, gbsGroup=3)] on LeaderDelegationRepository(#1113).findActiveByDelegateIdAndDate(2, 2025-05-06)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [LeaderDelegation(id=2, delegator=2, delegatee=3, gbsGroup=3)] on LeaderDelegationRepository(#1113).findActiveByUserIdAndDate(2, 2025-05-06, true)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1118
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#1119
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1120
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#1121
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#1122
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of departmentRepository#1118#1123
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [Department(id=1, name='청년부')] on DepartmentRepository(departmentRepository#1118).findAll()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1124
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#1125
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1126
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#1127
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#1128
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of villageRepository#1128#1129
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[Village(id=1, name='1마을')] on VillageRepository(villageRepository#1128).findById(1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1130
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#1131
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1132
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#1133
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#1134
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of departmentRepository#1130#1135
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on DepartmentRepository(departmentRepository#1130).findById(999)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1136
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#1137
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1138
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#1139
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#1140
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of gbsLeaderHistoryRepository#1138#1141
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering null on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#1138).findCurrentLeaderByGbsId(999)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1142
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#1143
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1144
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#1145
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#1146
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of departmentRepository#1142#1147
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[Department(id=1, name='청년부')] on DepartmentRepository(departmentRepository#1142).findById(1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1148
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#1149
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1150
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#1151
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#1152
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of gbsGroupRepository#1149#1153
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[GbsGroup(id=1, name='1GBS')] on GbsGroupRepository(gbsGroupRepository#1149).findById(1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1154
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#1155
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1156
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#1157
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#1158
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of gbsGroupRepository#1155#1159
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [GbsGroup(id=1, name='1GBS')] on GbsGroupRepository(gbsGroupRepository#1155).findActiveGroupsByVillageId(1, 2025-05-06)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1160
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#1161
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1162
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#1163
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#1164
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of gbsGroupRepository#1161#1165
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on GbsGroupRepository(gbsGroupRepository#1161).findById(999)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1166
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#1167
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1168
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#1169
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#1170
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of villageRepository#1170#1171
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of gbsGroupRepository#1167#1172
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[Village(id=1, name='1마을')] on VillageRepository(villageRepository#1170).findById(1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [GbsGroup(id=1, name='1GBS')] on GbsGroupRepository(gbsGroupRepository#1167).findByVillage(Village(id=1, name='1마을'))
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1173
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#1174
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1175
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#1176
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#1177
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of villageRepository#1177#1178
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on VillageRepository(villageRepository#1177).findById(999)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1179
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#1180
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1181
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#1182
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#1183
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of gbsLeaderHistoryRepository#1181#1184
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=1, name='홍길동', role=LEADER) on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#1181).findCurrentLeaderByGbsId(1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1185
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#1186
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1187
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#1188
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#1189
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of departmentRepository#1185#1190
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of villageRepository#1189#1191
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[Department(id=1, name='청년부')] on DepartmentRepository(departmentRepository#1185).findById(1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [Village(id=1, name='1마을')] on VillageRepository(villageRepository#1189).findByDepartment(Department(id=1, name='청년부'))
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#1192
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#1193
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1194
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#1195
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=organizationService#1196
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Department name=child of organizationService#1196#1197
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of organizationService#1196#1198
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Department(id=1, name='청년부') on OrganizationService(organizationService#1196).getDepartmentById(1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on OrganizationService(organizationService#1196).getVillagesByDepartment(1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#1199
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#1200
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1201
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#1202
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=organizationService#1203
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroup name=child of organizationService#1203#1204
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsGroup(id=1, name='1GBS') on OrganizationService(organizationService#1203).getGbsGroupById(1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 홍길동 on OrganizationService(organizationService#1203).getCurrentLeaderForGbs(1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 0 on GbsMemberHistoryRepository(gbsMemberHistoryRepository#1202).countActiveMembers(1, 2025-05-06)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#1205
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#1206
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1207
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#1208
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=organizationService#1209
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Department name=child of organizationService#1209#1210
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of organizationService#1209#1211
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating spyk for StatisticsService name=#1212
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageStatistics name=child of #1212#1213
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Department(id=1, name='청년부') on OrganizationService(organizationService#1209).getDepartmentById(1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [Village(id=1, name='1마을')] on OrganizationService(organizationService#1209).getVillagesByDepartment(1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VillageStatistics(villageId=1, villageName=1마을, gbsStats=[], totalMembers=10, attendedMembers=8, attendanceRate=80.0, averageQtCount=4.0) on StatisticsService(#1212).getVillageStatistics(1, 2023-01-01, 2023-01-31)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering DepartmentStatistics(departmentId=1, departmentName=청년부, startDate=2023-01-01, endDate=2023-01-31, villageStats=[VillageStatistics(villageId=1, villageName=1마을, gbsStats=[], totalMembers=10, attendedMembers=8, attendanceRate=80.0, averageQtCount=4.0)], totalMembers=10, attendedMembers=8, attendanceRate=80.0, averageQtCount=4.0) on StatisticsService(#1212).getDepartmentStatistics(1, 2023-01-01, 2023-01-31)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#1214
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#1215
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1216
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#1217
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=organizationService#1218
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#1219
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#1220
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1221
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#1222
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=organizationService#1223
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=child of organizationService#1223#1224
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of organizationService#1223#1225
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Village(id=1, name='1마을') on OrganizationService(organizationService#1223).getVillageById(1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on OrganizationService(organizationService#1223).getActiveGbsGroupsByVillage(1, 2025-05-06)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#1226
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#1227
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1228
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#1229
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=organizationService#1230
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=child of organizationService#1230#1231
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of organizationService#1230#1232
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating spyk for StatisticsService name=#1233
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsStatistics name=child of #1233#1234
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Village(id=1, name='1마을') on OrganizationService(organizationService#1230).getVillageById(1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [GbsGroup(id=1, name='1GBS')] on OrganizationService(organizationService#1230).getActiveGbsGroupsByVillage(1, 2025-05-06)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsStatistics(gbsId=1, gbsName=1GBS, leaderName=홍길동, totalMembers=10, attendedMembers=8, attendanceRate=80.0, averageQtCount=4.0, weeklyStats=[]) on StatisticsService(#1233).getGbsStatistics(1, 2023-01-01, 2023-01-31)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VillageStatistics(villageId=1, villageName=1마을, gbsStats=[GbsStatistics(gbsId=1, gbsName=1GBS, leaderName=홍길동, totalMembers=10, attendedMembers=8, attendanceRate=80.0, averageQtCount=4.0, weeklyStats=[])], totalMembers=10, attendedMembers=8, attendanceRate=80.0, averageQtCount=4.0) on StatisticsService(#1233).getVillageStatistics(1, 2023-01-01, 2023-01-31)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#1235
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#1236
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1237
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#1238
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=organizationService#1239
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroup name=child of organizationService#1239#1240
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#1235#1241
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#1235#1242
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating spyk for StatisticsService name=#1243
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsStatistics name=child of #1243#1244
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsStatistics(gbsId=1, gbsName=1GBS, leaderName=홍길동, totalMembers=10, attendedMembers=3, attendanceRate=30.0, averageQtCount=3.5, weeklyStats=[WeeklyStatistics(weekStart=2023-01-01, totalMembers=10, attendedMembers=2, attendanceRate=20.0, averageQtCount=3.5), WeeklyStatistics(weekStart=2023-01-08, totalMembers=10, attendedMembers=1, attendanceRate=10.0, averageQtCount=3.5)]) on StatisticsService(#1243).getGbsStatistics(1, 2023-01-01, 2023-01-31)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogRepository name=#1245
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for ObjectMapper name=#1246
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#1247
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#1248
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #1247#1249
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Page name=child of #1245#1250
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Page 1 of 1 containing com.attendly.domain.entity.SystemLog instances on SystemLogRepository(#1245).searchLogs(INFO, TEST, null, null, null, null, Page request [number: 0, size 10, sort: UNSORTED])
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogRepository name=#1251
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for ObjectMapper name=#1252
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#1253
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#1254
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #1253#1255
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogRepository name=#1256
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for ObjectMapper name=#1257
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#1258
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#1259
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #1258#1260
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #1256#1261
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[com.attendly.domain.entity.SystemLog@861152c] on SystemLogRepository(#1256).findById(1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogRepository name=#1262
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for ObjectMapper name=#1263
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#1264
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#1265
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #1264#1266
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for HttpServletRequest name=#1267
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #1265#1268
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLog name=child of #1262#1269
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Authentication(#1265) on SecurityContext(#1264).getAuthentication()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering true on Authentication(#1265).isAuthenticated()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering org.springframework.security.core.userdetails.User [Username=1, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[]] on Authentication(#1265).getPrincipal()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 127.0.0.1 on HttpServletRequest(#1267).getRemoteAddr()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Test User Agent on HttpServletRequest(#1267).getHeader(User-Agent)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering com.attendly.domain.entity.SystemLog@40cc8123 on SystemLogRepository(#1262).save(com.attendly.domain.entity.SystemLog@46b0160e)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1270
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for PasswordEncoder name=passwordEncoder#1271
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#1272
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of userRepository#1272#1273
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of departmentRepository#1270#1274
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on UserRepository(userRepository#1272).findByEmail(test@example.com)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on DepartmentRepository(departmentRepository#1270).findById(1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of userRepository#1272#1275
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1276
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for PasswordEncoder name=passwordEncoder#1277
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#1278
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#1279
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of userRepository#1278#1280
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering test@example.com on Authentication(#1279).getName()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=1, name='홍길동', role=LEADER)] on UserRepository(userRepository#1278).findByEmail(test@example.com)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1281
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for PasswordEncoder name=passwordEncoder#1282
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#1283
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of userRepository#1283#1284
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of departmentRepository#1281#1285
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of userRepository#1283#1286
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on UserRepository(userRepository#1283).findByEmail(test@example.com)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[Department(id=1, name='대학부')] on DepartmentRepository(departmentRepository#1281).findById(1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering encoded_password on PasswordEncoder(passwordEncoder#1282).encode(password123)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=1, name='홍길동', role=LEADER) on UserRepository(userRepository#1283).save(User(id=null, name='홍길동', role=LEADER))
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1287
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for PasswordEncoder name=passwordEncoder#1288
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#1289
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#1290
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of userRepository#1289#1291
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering nonexistent@example.com on Authentication(#1290).getName()
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on UserRepository(userRepository#1289).findByEmail(nonexistent@example.com)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1292
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for PasswordEncoder name=passwordEncoder#1293
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#1294
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of userRepository#1294#1295
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=1, name='홍길동', role=LEADER)] on UserRepository(userRepository#1294).findById(1)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1296
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for PasswordEncoder name=passwordEncoder#1297
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#1298
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of userRepository#1298#1299
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of userRepository#1298#1300
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [User(id=1, name='Leader User', role=LEADER)] on UserRepository(userRepository#1298).findByRole(LEADER)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [User(id=2, name='Member User', role=MEMBER)] on UserRepository(userRepository#1298).findByRole(MEMBER)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1301
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for PasswordEncoder name=passwordEncoder#1302
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#1303
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of userRepository#1303#1304
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=1, name='홍길동', role=LEADER)] on UserRepository(userRepository#1303).findByEmail(test@example.com)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1305
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for PasswordEncoder name=passwordEncoder#1306
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#1307
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of userRepository#1307#1308
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of userRepository#1307#1309
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [User(id=1, name='Leader User', role=LEADER)] on UserRepository(userRepository#1307).findByRole(LEADER)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [User(id=1, name='Leader User', role=LEADER)] on UserRepository(userRepository#1307).findByRole(VILLAGE_LEADER)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1310
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for PasswordEncoder name=passwordEncoder#1311
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#1312
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1313
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for PasswordEncoder name=passwordEncoder#1314
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#1315
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of userRepository#1315#1316
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=2, name='기존 사용자', role=MEMBER)] on UserRepository(userRepository#1315).findByEmail(test@example.com)
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of departmentRepository#1313#1317
2025-05-06 22:37:43 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of userRepository#1315#1318
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists attendance cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists batch_job_logs cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists batch_jobs cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists department cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_group cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_leader_history cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_member_history cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists leader_delegation cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists system_log cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists system_settings cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists village cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists village_leader cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists attendance cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists batch_job_logs cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists batch_jobs cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists department cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_group cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_leader_history cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_member_history cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists leader_delegation cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists system_log cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists system_settings cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists village cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists village_leader cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists attendance cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists batch_job_logs cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists batch_jobs cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists department cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_group cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_leader_history cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_member_history cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists leader_delegation cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists system_log cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists system_settings cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists village cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists village_leader cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists attendance cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists batch_job_logs cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists batch_jobs cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists department cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_group cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_leader_history cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_member_history cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists leader_delegation cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists system_log cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists system_settings cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists village cascade 
2025-05-06 22:37:43 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists village_leader cascade 
2025-05-06 22:41:29 [background-preinit] [NONE] DEBUG org.jboss.logging - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-05-06 22:41:29 [Test worker] [NONE] WARN  o.s.b.t.j.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer - 

Found multiple occurrences of org.json.JSONObject on the class path:

	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/org.json/json/20230618/1ae16df7d556d02713e241086f878399e99260d6/json-20230618.jar!/org/json/JSONObject.class
	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/com.vaadin.external.google/android-json/0.0.20131108.vaadin1/fa26d351fe62a6a17f5cda1287c1c6110dec413f/android-json-0.0.20131108.vaadin1.jar!/org/json/JSONObject.class

You may wish to exclude one of them to ensure predictable runtime behavior

2025-05-06 22:41:29 [Test worker] [NONE] INFO  c.a.a.controller.AuthControllerTest - Starting AuthControllerTest using Java 21.0.1 with PID 43478 (started by user in /Users/user/study/attendly-api)
2025-05-06 22:41:29 [Test worker] [NONE] DEBUG c.a.a.controller.AuthControllerTest - Running with Spring Boot v3.4.5, Spring v6.2.6
2025-05-06 22:41:29 [Test worker] [NONE] INFO  c.a.a.controller.AuthControllerTest - The following 1 profile is active: "dev"
2025-05-06 22:41:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=com.attendly.service.UserService#0 bean#1
2025-05-06 22:41:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AuthenticationManager name=authenticationManager bean#2
2025-05-06 22:41:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for JwtTokenProvider name=com.attendly.security.JwtTokenProvider#0 bean#3
2025-05-06 22:41:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsService name=org.springframework.security.core.userdetails.UserDetailsService#0 bean#4
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.AuthController:
	{POST [/auth/login]}: login(LoginRequest)
	{POST [/auth/signup]}: signup(SignupRequest)
	{POST [/auth/refresh]}: refreshToken(TokenRefreshRequest)
	{GET [/auth/me]}: getCurrentUser(UserDetailsAdapter)
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	o.s.b.a.w.s.e.BasicErrorController:
	{ [/error]}: error(HttpServletRequest)
	{ [/error], produces [text/html]}: errorHtml(HttpServletRequest,HttpServletResponse)
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 'beanNameHandlerMapping' {}
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 'resourceHandlerMapping' {/webjars/**=ResourceHttpRequestHandler [classpath [META-INF/resources/webjars/]], /**=ResourceHttpRequestHandler [classpath [META-INF/resources/], classpath [resources/], classpath [static/], classpath [public/], ServletContext [/]]}
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG com.attendly.config.RequestIdFilter - Filter 'requestIdFilter' configured for use
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG c.a.config.ContentCachingFilter - Filter 'contentCachingFilter' configured for use
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG c.a.security.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-05-06 22:41:30 [Test worker] [NONE] INFO  c.a.a.controller.AuthControllerTest - Started AuthControllerTest in 1.514 seconds (process running for 2.228)
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SignupResponse name=child of com.attendly.service.UserService#0 bean#1#5
2025-05-06 22:41:30 [Test worker] [44dce42b-0277-4fb7-9b3f-26353f54561f] DEBUG i.m.i.r.states.AnsweringState - Answering SignupResponse(userId=1, name=홍길동, email=test@example.com, phoneNumber=010-1234-5678, role=LEADER) on UserService(com.attendly.service.UserService#0 bean#1).signup(SignupRequest(email=test@example.com, password=password123, name=홍길동, phoneNumber=010-1234-5678, role=LEADER, departmentId=1))
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['userId']
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['userId']
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['name']
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['email']
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['role']
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#2)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#4)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#2)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#4)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:41:30 [Test worker] [f6512539-15c3-46e2-9585-0da170bbe5bb] ERROR c.a.exception.GlobalExceptionHandler - MethodArgumentNotValidException: {}
org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity<com.attendly.api.dto.SignupResponse> com.attendly.api.controller.AuthController.signup(com.attendly.api.dto.SignupRequest) with 3 errors: [Field error in object 'signupRequest' on field 'name': rejected value []; codes [NotBlank.signupRequest.name,NotBlank.name,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [signupRequest.name,name]; arguments []; default message [name]]; default message [이름은 필수입니다]] [Field error in object 'signupRequest' on field 'email': rejected value []; codes [NotBlank.signupRequest.email,NotBlank.email,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [signupRequest.email,email]; arguments []; default message [email]]; default message [이메일은 필수입니다]] [Field error in object 'signupRequest' on field 'password': rejected value []; codes [NotBlank.signupRequest.password,NotBlank.password,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [signupRequest.password,password]; arguments []; default message [password]]; default message [비밀번호는 필수입니다]] 
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:159)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:227)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:181)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:72)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:165)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at com.attendly.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.kt:27)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:165)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at com.attendly.config.RequestIdFilter.doFilter(RequestIdFilter.kt:34)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:201)
	at com.attendly.api.controller.AuthControllerTest.회원가입 유효성 검증 실패 테스트(AuthControllerTest.kt:109)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:767)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$8(TestMethodTestDescriptor.java:217)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:156)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:124)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:99)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:94)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:92)
	at jdk.proxy1/jdk.proxy1.$Proxy4.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:200)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:132)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:103)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:63)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:121)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#2)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#4)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#2)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#4)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#6
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #6#7
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#8
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #8#9
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Collection name=child of #8#10
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#11
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #11#12
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of authenticationManager bean#2#13
2025-05-06 22:41:30 [Test worker] [cd6f25f5-9b88-408a-bbc0-bfaf82933a06] DEBUG i.m.i.r.states.AnsweringState - Answering Authentication(#11) on AuthenticationManager(authenticationManager bean#2).authenticate(UsernamePasswordAuthenticationToken [Principal=test@example.com, Credentials=[PROTECTED], Authenticated=false, Details=null, Granted Authorities=[]])
2025-05-06 22:41:30 [Test worker] [cd6f25f5-9b88-408a-bbc0-bfaf82933a06] DEBUG i.m.i.r.states.AnsweringState - Answering UserDetailsAdapter(#8) on Authentication(#11).getPrincipal()
2025-05-06 22:41:30 [Test worker] [cd6f25f5-9b88-408a-bbc0-bfaf82933a06] DEBUG i.m.i.r.states.AnsweringState - Answering User(#6) on UserDetailsAdapter(#8).getUser()
2025-05-06 22:41:30 [Test worker] [cd6f25f5-9b88-408a-bbc0-bfaf82933a06] DEBUG i.m.i.r.states.AnsweringState - Answering access-token on JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3).generateToken(UserDetailsAdapter(#8))
2025-05-06 22:41:30 [Test worker] [cd6f25f5-9b88-408a-bbc0-bfaf82933a06] DEBUG i.m.i.r.states.AnsweringState - Answering refresh-token on JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3).generateRefreshToken(UserDetailsAdapter(#8))
2025-05-06 22:41:30 [Test worker] [cd6f25f5-9b88-408a-bbc0-bfaf82933a06] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on User(#6).getId()
2025-05-06 22:41:30 [Test worker] [cd6f25f5-9b88-408a-bbc0-bfaf82933a06] DEBUG i.m.i.r.states.AnsweringState - Answering 홍길동 on User(#6).getName()
2025-05-06 22:41:30 [Test worker] [cd6f25f5-9b88-408a-bbc0-bfaf82933a06] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#6).getRole()
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['userId']
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['userId']
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['name']
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['role']
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['accessToken']
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['refreshToken']
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#2)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#4)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#2)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#4)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Department name=#14
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#15
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #15#16
2025-05-06 22:41:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Department name=child of #15#17
2025-05-06 22:41:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LocalDate name=child of #15#18
2025-05-06 22:41:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LocalDateTime name=child of #15#19
2025-05-06 22:41:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LocalDateTime name=child of #15#20
2025-05-06 22:41:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#21
2025-05-06 22:41:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #21#22
2025-05-06 22:41:31 [Test worker] [64c2a5de-8c3b-4c49-b450-7a3763343aa7] ERROR c.a.exception.GlobalExceptionHandler - Unhandled Exception
java.lang.NullPointerException: Parameter specified as non-null is null: method com.attendly.api.controller.AuthController.getCurrentUser, parameter userDetails
	at com.attendly.api.controller.AuthController.getCurrentUser(AuthController.kt)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at kotlin.reflect.jvm.internal.calls.CallerImpl$Method.callMethod(CallerImpl.kt:97)
	at kotlin.reflect.jvm.internal.calls.CallerImpl$Method$Instance.call(CallerImpl.kt:113)
	at kotlin.reflect.jvm.internal.KCallableImpl.callDefaultMethod$kotlin_reflection(KCallableImpl.kt:207)
	at kotlin.reflect.jvm.internal.KCallableImpl.callBy(KCallableImpl.kt:112)
	at org.springframework.web.method.support.InvocableHandlerMethod$KotlinDelegate.invokeFunction(InvocableHandlerMethod.java:335)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:72)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:165)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at com.attendly.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.kt:27)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:165)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at com.attendly.config.RequestIdFilter.doFilter(RequestIdFilter.kt:34)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:201)
	at com.attendly.api.controller.AuthControllerTest.현재 사용자 정보 조회 테스트(AuthControllerTest.kt:188)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:767)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$8(TestMethodTestDescriptor.java:217)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:156)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:124)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:99)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:94)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:92)
	at jdk.proxy1/jdk.proxy1.$Proxy4.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:200)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:132)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:103)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:63)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:121)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
2025-05-06 22:41:31 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:41:31 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#2)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:41:31 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:41:31 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#4)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:41:31 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:41:31 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#2)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:41:31 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:41:31 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#4)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:43:32 [background-preinit] [NONE] DEBUG org.jboss.logging - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-05-06 22:43:32 [Test worker] [NONE] WARN  o.s.b.t.j.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer - 

Found multiple occurrences of org.json.JSONObject on the class path:

	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/org.json/json/20230618/1ae16df7d556d02713e241086f878399e99260d6/json-20230618.jar!/org/json/JSONObject.class
	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/com.vaadin.external.google/android-json/0.0.20131108.vaadin1/fa26d351fe62a6a17f5cda1287c1c6110dec413f/android-json-0.0.20131108.vaadin1.jar!/org/json/JSONObject.class

You may wish to exclude one of them to ensure predictable runtime behavior

2025-05-06 22:43:32 [Test worker] [NONE] INFO  c.a.a.controller.AuthControllerTest - Starting AuthControllerTest using Java 21.0.1 with PID 44750 (started by user in /Users/user/study/attendly-api)
2025-05-06 22:43:32 [Test worker] [NONE] DEBUG c.a.a.controller.AuthControllerTest - Running with Spring Boot v3.4.5, Spring v6.2.6
2025-05-06 22:43:32 [Test worker] [NONE] INFO  c.a.a.controller.AuthControllerTest - The following 1 profile is active: "dev"
2025-05-06 22:43:32 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=com.attendly.service.UserService#0 bean#1
2025-05-06 22:43:32 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AuthenticationManager name=authenticationManager bean#2
2025-05-06 22:43:32 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for JwtTokenProvider name=com.attendly.security.JwtTokenProvider#0 bean#3
2025-05-06 22:43:32 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsService name=org.springframework.security.core.userdetails.UserDetailsService#0 bean#4
2025-05-06 22:43:33 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.AuthController:
	{POST [/auth/signup]}: signup(SignupRequest)
	{POST [/auth/login]}: login(LoginRequest)
	{GET [/auth/me]}: getCurrentUser(UserDetailsAdapter)
	{POST [/auth/refresh]}: refreshToken(TokenRefreshRequest)
2025-05-06 22:43:33 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	o.s.b.a.w.s.e.BasicErrorController:
	{ [/error]}: error(HttpServletRequest)
	{ [/error], produces [text/html]}: errorHtml(HttpServletRequest,HttpServletResponse)
2025-05-06 22:43:33 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 'beanNameHandlerMapping' {}
2025-05-06 22:43:33 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 'resourceHandlerMapping' {/webjars/**=ResourceHttpRequestHandler [classpath [META-INF/resources/webjars/]], /**=ResourceHttpRequestHandler [classpath [META-INF/resources/], classpath [resources/], classpath [static/], classpath [public/], ServletContext [/]]}
2025-05-06 22:43:33 [Test worker] [NONE] DEBUG com.attendly.config.RequestIdFilter - Filter 'requestIdFilter' configured for use
2025-05-06 22:43:33 [Test worker] [NONE] DEBUG c.a.config.ContentCachingFilter - Filter 'contentCachingFilter' configured for use
2025-05-06 22:43:33 [Test worker] [NONE] DEBUG c.a.security.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-05-06 22:43:33 [Test worker] [NONE] INFO  c.a.a.controller.AuthControllerTest - Started AuthControllerTest in 1.389 seconds (process running for 2.056)
2025-05-06 22:43:33 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Department name=#5
2025-05-06 22:43:33 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#6
2025-05-06 22:43:33 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #6#7
2025-05-06 22:43:33 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Department name=child of #6#8
2025-05-06 22:43:33 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LocalDate name=child of #6#9
2025-05-06 22:43:33 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LocalDateTime name=child of #6#10
2025-05-06 22:43:33 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LocalDateTime name=child of #6#11
2025-05-06 22:43:33 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#12
2025-05-06 22:43:33 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #12#13
2025-05-06 22:43:33 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering UserDetailsAdapter(#12) on UserDetailsAdapter(#12).toString()
2025-05-06 22:43:33 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Throwing io.mockk.MockKException: no answer found for UserDetailsAdapter(#12).getPassword() among the configured answers: (UserDetailsAdapter(#12).getUser())) on UserDetailsAdapter(#12).getPassword()
2025-05-06 22:43:33 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:43:33 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#2)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:43:33 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:43:33 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#4)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:43:33 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:43:33 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#2)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:43:33 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:43:33 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#4)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:20 [background-preinit] [NONE] DEBUG org.jboss.logging - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-05-06 22:48:20 [Test worker] [NONE] WARN  o.s.b.t.j.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer - 

Found multiple occurrences of org.json.JSONObject on the class path:

	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/org.json/json/20230618/1ae16df7d556d02713e241086f878399e99260d6/json-20230618.jar!/org/json/JSONObject.class
	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/com.vaadin.external.google/android-json/0.0.20131108.vaadin1/fa26d351fe62a6a17f5cda1287c1c6110dec413f/android-json-0.0.20131108.vaadin1.jar!/org/json/JSONObject.class

You may wish to exclude one of them to ensure predictable runtime behavior

2025-05-06 22:48:20 [Test worker] [NONE] INFO  c.a.a.controller.AuthControllerTest - Starting AuthControllerTest using Java 21.0.6 with PID 47231 (started by user in /Users/user/study/attendly-api)
2025-05-06 22:48:20 [Test worker] [NONE] DEBUG c.a.a.controller.AuthControllerTest - Running with Spring Boot v3.4.5, Spring v6.2.6
2025-05-06 22:48:20 [Test worker] [NONE] INFO  c.a.a.controller.AuthControllerTest - The following 1 profile is active: "dev"
2025-05-06 22:48:20 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=com.attendly.service.UserService#0 bean#1
2025-05-06 22:48:20 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AuthenticationManager name=authenticationManager bean#2
2025-05-06 22:48:20 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for JwtTokenProvider name=com.attendly.security.JwtTokenProvider#0 bean#3
2025-05-06 22:48:20 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsService name=org.springframework.security.core.userdetails.UserDetailsService#0 bean#4
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.AuthController:
	{POST [/auth/refresh]}: refreshToken(TokenRefreshRequest)
	{POST [/auth/signup]}: signup(SignupRequest)
	{GET [/auth/me]}: getCurrentUser(UserDetailsAdapter)
	{POST [/auth/login]}: login(LoginRequest)
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	o.s.b.a.w.s.e.BasicErrorController:
	{ [/error], produces [text/html]}: errorHtml(HttpServletRequest,HttpServletResponse)
	{ [/error]}: error(HttpServletRequest)
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 'beanNameHandlerMapping' {}
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 'resourceHandlerMapping' {/webjars/**=ResourceHttpRequestHandler [classpath [META-INF/resources/webjars/]], /**=ResourceHttpRequestHandler [classpath [META-INF/resources/], classpath [resources/], classpath [static/], classpath [public/], ServletContext [/]]}
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG com.attendly.config.RequestIdFilter - Filter 'requestIdFilter' configured for use
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG c.a.config.ContentCachingFilter - Filter 'contentCachingFilter' configured for use
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG c.a.security.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-05-06 22:48:21 [Test worker] [NONE] INFO  c.a.a.controller.AuthControllerTest - Started AuthControllerTest in 1.49 seconds (process running for 2.348)
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SignupResponse name=child of com.attendly.service.UserService#0 bean#1#5
2025-05-06 22:48:21 [Test worker] [d53664fc-28ae-488f-b719-807160a5ca80] DEBUG i.m.i.r.states.AnsweringState - Answering SignupResponse(userId=1, name=홍길동, email=test@example.com, phoneNumber=010-1234-5678, role=LEADER) on UserService(com.attendly.service.UserService#0 bean#1).signup(SignupRequest(email=test@example.com, password=password123, name=홍길동, phoneNumber=010-1234-5678, role=LEADER, departmentId=1))
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['userId']
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['userId']
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['name']
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['email']
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['role']
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#2)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#4)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#2)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#4)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:21 [Test worker] [b3503eb2-3bbe-41f4-9d3a-dbcd5b7267d4] ERROR c.a.exception.GlobalExceptionHandler - MethodArgumentNotValidException: {}
org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity<com.attendly.api.dto.SignupResponse> com.attendly.api.controller.AuthController.signup(com.attendly.api.dto.SignupRequest) with 3 errors: [Field error in object 'signupRequest' on field 'email': rejected value []; codes [NotBlank.signupRequest.email,NotBlank.email,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [signupRequest.email,email]; arguments []; default message [email]]; default message [이메일은 필수입니다]] [Field error in object 'signupRequest' on field 'name': rejected value []; codes [NotBlank.signupRequest.name,NotBlank.name,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [signupRequest.name,name]; arguments []; default message [name]]; default message [이름은 필수입니다]] [Field error in object 'signupRequest' on field 'password': rejected value []; codes [NotBlank.signupRequest.password,NotBlank.password,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [signupRequest.password,password]; arguments []; default message [password]]; default message [비밀번호는 필수입니다]] 
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:159)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:227)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:181)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:72)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:165)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at com.attendly.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.kt:27)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:165)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at com.attendly.config.RequestIdFilter.doFilter(RequestIdFilter.kt:34)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:201)
	at com.attendly.api.controller.AuthControllerTest.회원가입 유효성 검증 실패 테스트(AuthControllerTest.kt:109)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)
	at java.base/java.lang.reflect.Method.invoke(Unknown Source)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:767)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$8(TestMethodTestDescriptor.java:217)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:156)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(Unknown Source)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(Unknown Source)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:124)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:99)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:94)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)
	at java.base/java.lang.reflect.Method.invoke(Unknown Source)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:92)
	at jdk.proxy1/jdk.proxy1.$Proxy4.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:200)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:132)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:103)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:63)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:121)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#2)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#4)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#2)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#4)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#6
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #6#7
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#8
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #8#9
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Collection name=child of #8#10
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#11
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #11#12
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of authenticationManager bean#2#13
2025-05-06 22:48:21 [Test worker] [6038e883-e8a1-4a41-a6c1-4ab9d385250a] DEBUG i.m.i.r.states.AnsweringState - Answering Authentication(#11) on AuthenticationManager(authenticationManager bean#2).authenticate(UsernamePasswordAuthenticationToken [Principal=test@example.com, Credentials=[PROTECTED], Authenticated=false, Details=null, Granted Authorities=[]])
2025-05-06 22:48:21 [Test worker] [6038e883-e8a1-4a41-a6c1-4ab9d385250a] DEBUG i.m.i.r.states.AnsweringState - Answering UserDetailsAdapter(#8) on Authentication(#11).getPrincipal()
2025-05-06 22:48:21 [Test worker] [6038e883-e8a1-4a41-a6c1-4ab9d385250a] DEBUG i.m.i.r.states.AnsweringState - Answering User(#6) on UserDetailsAdapter(#8).getUser()
2025-05-06 22:48:21 [Test worker] [6038e883-e8a1-4a41-a6c1-4ab9d385250a] DEBUG i.m.i.r.states.AnsweringState - Answering access-token on JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3).generateToken(UserDetailsAdapter(#8))
2025-05-06 22:48:21 [Test worker] [6038e883-e8a1-4a41-a6c1-4ab9d385250a] DEBUG i.m.i.r.states.AnsweringState - Answering refresh-token on JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3).generateRefreshToken(UserDetailsAdapter(#8))
2025-05-06 22:48:21 [Test worker] [6038e883-e8a1-4a41-a6c1-4ab9d385250a] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on User(#6).getId()
2025-05-06 22:48:21 [Test worker] [6038e883-e8a1-4a41-a6c1-4ab9d385250a] DEBUG i.m.i.r.states.AnsweringState - Answering 홍길동 on User(#6).getName()
2025-05-06 22:48:21 [Test worker] [6038e883-e8a1-4a41-a6c1-4ab9d385250a] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#6).getRole()
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['userId']
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['userId']
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['name']
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['role']
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['accessToken']
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['refreshToken']
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#2)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#4)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#2)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#4)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Department name=#14
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#15
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #15#16
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Department name=child of #15#17
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LocalDate name=child of #15#18
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LocalDateTime name=child of #15#19
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LocalDateTime name=child of #15#20
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#21
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #21#22
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Collection name=child of #21#23
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering password123 on UserDetailsAdapter(#21).getPassword()
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [ROLE_MEMBER] on UserDetailsAdapter(#21).getAuthorities()
2025-05-06 22:48:21 [Test worker] [a0910b76-172a-4b6b-8af1-7f3d65c937fe] DEBUG i.m.i.r.states.AnsweringState - Answering User(#15) on UserDetailsAdapter(#21).getUser()
2025-05-06 22:48:21 [Test worker] [a0910b76-172a-4b6b-8af1-7f3d65c937fe] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on User(#15).getId()
2025-05-06 22:48:21 [Test worker] [a0910b76-172a-4b6b-8af1-7f3d65c937fe] DEBUG i.m.i.r.states.AnsweringState - Answering 테스트 사용자 on User(#15).getName()
2025-05-06 22:48:21 [Test worker] [a0910b76-172a-4b6b-8af1-7f3d65c937fe] DEBUG i.m.i.r.states.AnsweringState - Answering test@example.com on User(#15).getEmail()
2025-05-06 22:48:21 [Test worker] [a0910b76-172a-4b6b-8af1-7f3d65c937fe] DEBUG i.m.i.r.states.AnsweringState - Answering 010-1234-5678 on User(#15).getPhoneNumber()
2025-05-06 22:48:21 [Test worker] [a0910b76-172a-4b6b-8af1-7f3d65c937fe] DEBUG i.m.i.r.states.AnsweringState - Answering MEMBER on User(#15).getRole()
2025-05-06 22:48:21 [Test worker] [a0910b76-172a-4b6b-8af1-7f3d65c937fe] DEBUG i.m.i.r.states.AnsweringState - Answering Department(#14) on User(#15).getDepartment()
2025-05-06 22:48:21 [Test worker] [a0910b76-172a-4b6b-8af1-7f3d65c937fe] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on Department(#14).getId()
2025-05-06 22:48:21 [Test worker] [a0910b76-172a-4b6b-8af1-7f3d65c937fe] DEBUG i.m.i.r.states.AnsweringState - Answering Department(#14) on User(#15).getDepartment()
2025-05-06 22:48:21 [Test worker] [a0910b76-172a-4b6b-8af1-7f3d65c937fe] DEBUG i.m.i.r.states.AnsweringState - Answering 테스트 부서 on Department(#14).getName()
2025-05-06 22:48:21 [Test worker] [a0910b76-172a-4b6b-8af1-7f3d65c937fe] DEBUG i.m.i.r.states.AnsweringState - Answering 1990-01-01 on User(#15).getBirthDate()
2025-05-06 22:48:21 [Test worker] [a0910b76-172a-4b6b-8af1-7f3d65c937fe] DEBUG i.m.i.r.states.AnsweringState - Answering 2025-05-06T22:48:21.806593 on User(#15).getCreatedAt()
2025-05-06 22:48:21 [Test worker] [a0910b76-172a-4b6b-8af1-7f3d65c937fe] DEBUG i.m.i.r.states.AnsweringState - Answering 2025-05-06T22:48:21.806593 on User(#15).getUpdatedAt()
2025-05-06 22:48:21 [Test worker] [a0910b76-172a-4b6b-8af1-7f3d65c937fe] DEBUG i.m.i.r.states.AnsweringState - Answering test@example.com on UserDetailsAdapter(#21).getUsername()
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering UserDetailsAdapter(#21) on UserDetailsAdapter(#21).toString()
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['id']
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['id']
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['name']
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['email']
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['phoneNumber']
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['role']
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['departmentId']
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['departmentId']
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['departmentName']
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#2)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#4)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#1)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#2)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#3)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#4)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:21 [Test worker] [NONE] WARN  o.s.b.t.j.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer - 

Found multiple occurrences of org.json.JSONObject on the class path:

	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/org.json/json/20230618/1ae16df7d556d02713e241086f878399e99260d6/json-20230618.jar!/org/json/JSONObject.class
	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/com.vaadin.external.google/android-json/0.0.20131108.vaadin1/fa26d351fe62a6a17f5cda1287c1c6110dec413f/android-json-0.0.20131108.vaadin1.jar!/org/json/JSONObject.class

You may wish to exclude one of them to ensure predictable runtime behavior

2025-05-06 22:48:21 [Test worker] [NONE] INFO  com.attendly.ApplicationTests - Starting ApplicationTests using Java 21.0.6 with PID 47231 (started by user in /Users/user/study/attendly-api)
2025-05-06 22:48:21 [Test worker] [NONE] DEBUG com.attendly.ApplicationTests - Running with Spring Boot v3.4.5, Spring v6.2.6
2025-05-06 22:48:21 [Test worker] [NONE] INFO  com.attendly.ApplicationTests - The following 1 profile is active: "test"
2025-05-06 22:48:22 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for JwtTokenProvider name=jwtTokenProvider bean#24
2025-05-06 22:48:22 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsService name=customUserDetailsService bean#25
2025-05-06 22:48:22 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for JwtAuthenticationFilter name=jwtAuthenticationFilter bean#26
2025-05-06 22:48:22 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AuthenticationManager name=authenticationManager bean#27
2025-05-06 22:48:22 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for P6spyConfig name=p6spyConfig bean#28
2025-05-06 22:48:22 [Test worker] [NONE] WARN  org.hibernate.orm.deprecation - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists attendance cascade 
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists batch_job_logs cascade 
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists batch_jobs cascade 
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists department cascade 
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_group cascade 
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_leader_history cascade 
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_member_history cascade 
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists leader_delegation cascade 
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists system_log cascade 
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists system_settings cascade 
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade 
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists village cascade 
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists village_leader cascade 
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table attendance (
        qt_count integer not null,
        week_start date not null,
        created_at timestamp(6) not null,
        created_by bigint not null,
        gbs_id bigint not null,
        id bigint generated by default as identity,
        member_id bigint not null,
        updated_at timestamp(6) not null,
        ministry enum ('A','B','C') not null,
        worship enum ('O','X') not null,
        primary key (id)
    )
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table batch_job_logs (
        batch_job_id bigint not null,
        id bigint generated by default as identity,
        timestamp timestamp(6) not null,
        level varchar(10) not null,
        message TEXT not null,
        primary key (id)
    )
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table batch_jobs (
        created_at timestamp(6) not null,
        finished_at timestamp(6),
        id bigint generated by default as identity,
        schedule_time timestamp(6),
        started_at timestamp(6),
        error_message TEXT,
        parameters TEXT,
        job_type enum ('DATA_BACKUP','GBS_REORGANIZATION','REMINDER','STATISTICS_GENERATION') not null,
        status enum ('CANCELLED','COMPLETED','FAILED','QUEUED','RUNNING') not null,
        primary key (id)
    )
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table department (
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        name varchar(50) not null,
        primary key (id)
    )
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table gbs_group (
        term_end_dt date not null,
        term_start_dt date not null,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        village_id bigint not null,
        name varchar(50) not null,
        primary key (id)
    )
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table gbs_leader_history (
        end_dt date,
        start_dt date not null,
        created_at timestamp(6) not null,
        gbs_id bigint not null,
        id bigint generated by default as identity,
        leader_id bigint not null,
        updated_at timestamp(6) not null,
        primary key (id)
    )
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table gbs_member_history (
        end_dt date,
        start_dt date not null,
        created_at timestamp(6) not null,
        gbs_id bigint not null,
        id bigint generated by default as identity,
        member_id bigint not null,
        updated_at timestamp(6) not null,
        primary key (id)
    )
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table leader_delegation (
        end_dt date,
        start_dt date not null,
        created_at timestamp(6) not null,
        delegatee_id bigint not null,
        delegator_id bigint not null,
        gbs_id bigint not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        primary key (id)
    )
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table system_log (
        id bigint generated by default as identity,
        timestamp timestamp(6) not null,
        user_id bigint,
        level varchar(10) not null,
        category varchar(20) not null,
        ip_address varchar(39),
        server_instance varchar(50),
        message varchar(1000) not null,
        additional_info TEXT,
        user_agent varchar(255),
        primary key (id)
    )
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table system_settings (
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        setting_key varchar(50) not null unique,
        description varchar(200),
        setting_value varchar(1000) not null,
        primary key (id)
    )
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table users (
        birth_date date,
        created_at timestamp(6) not null,
        department_id bigint not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        phone_number varchar(20),
        name varchar(50) not null,
        email varchar(100) unique,
        password varchar(100),
        role enum ('ADMIN','LEADER','MEMBER','MINISTER','VILLAGE_LEADER') not null,
        primary key (id)
    )
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table village (
        created_at timestamp(6) not null,
        department_id bigint not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        name varchar(50) not null,
        primary key (id)
    )
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table village_leader (
        end_dt date,
        start_dt date not null,
        created_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        user_id bigint not null,
        village_id bigint not null,
        primary key (user_id, village_id)
    )
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists attendance 
       add constraint FKg7dtnois2g6ghgu4bl5gym92u 
       foreign key (created_by) 
       references users
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists attendance 
       add constraint FKjn82a3qvj1ho9ajauog7v0f12 
       foreign key (gbs_id) 
       references gbs_group
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists attendance 
       add constraint FK8f5fy874njy44gc8df63m187j 
       foreign key (member_id) 
       references users
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists batch_job_logs 
       add constraint FKsoyil2u66we091nme35nm6ste 
       foreign key (batch_job_id) 
       references batch_jobs
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_group 
       add constraint FKqvo83ldaqku2vayubiutcly4e 
       foreign key (village_id) 
       references village
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_leader_history 
       add constraint FKjls4dwfsilybq2sa0x35ml3f9 
       foreign key (gbs_id) 
       references gbs_group
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_leader_history 
       add constraint FK810qej66ysfs5j8cqtqbtsr1h 
       foreign key (leader_id) 
       references users
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_member_history 
       add constraint FK21l70t0cajgfj6rehvc9s21tc 
       foreign key (gbs_id) 
       references gbs_group
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_member_history 
       add constraint FKasr4qspnvhydc2xbei8rlysxy 
       foreign key (member_id) 
       references users
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists leader_delegation 
       add constraint FKs9xr3vr71pux3puk06pwiivfl 
       foreign key (delegatee_id) 
       references users
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists leader_delegation 
       add constraint FKqg0jdq2i5pfckjlqr5xfhkguc 
       foreign key (delegator_id) 
       references users
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists leader_delegation 
       add constraint FKjr2i1o6vb363gnkm6qahsaji6 
       foreign key (gbs_id) 
       references gbs_group
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint FKfi832e3qv89fq376fuh8920y4 
       foreign key (department_id) 
       references department
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists village 
       add constraint FKmp8tdn2nuthupcstb37lgifs4 
       foreign key (department_id) 
       references department
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists village_leader 
       add constraint FK446snb5j15qqkonffm6tyepm0 
       foreign key (user_id) 
       references users
2025-05-06 22:48:23 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists village_leader 
       add constraint FK9rpuj47r5r477bys6jmfthoeo 
       foreign key (village_id) 
       references village
2025-05-06 22:48:24 [Test worker] [NONE] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.LogTestController:
	{GET [/api/test/logging/info/{message}]}: testInfoLog(String)
	{GET [/api/test/logging/warn/{message}]}: testWarnLog(String)
	{GET [/api/test/logging/error/{message}]}: testErrorLog(String)
	{GET [/api/test/logging/security/{message}]}: testSecurityEvent(String)
	{GET [/api/test/logging/exception/{message}]}: testException(String)
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.AttendanceController:
	{POST [/api/attendance]}: createAttendances(AttendanceBatchRequest)
	{GET [/api/attendance]}: getAttendancesByGbs(long,LocalDate)
	{GET [/api/village/{id}/attendance]}: getVillageAttendance(long,LocalDate)
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.AuthController:
	{POST [/auth/refresh]}: refreshToken(TokenRefreshRequest)
	{POST [/auth/signup]}: signup(SignupRequest)
	{GET [/auth/me]}: getCurrentUser(UserDetailsAdapter)
	{POST [/auth/login]}: login(LoginRequest)
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.GbsMemberController:
	{GET [/api/v1/gbs-members/{gbsId}]}: getGbsMembers(long,LocalDate,Authentication)
	{GET [/api/v1/gbs-members/my-gbs]}: getMyGbs(Authentication)
	{GET [/api/v1/gbs-members/leaders/{leaderId}/history]}: getLeaderGbsHistories(long,Authentication)
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.LeaderDelegationController:
	{GET [/api/delegations/active]}: getActiveDelegations(long,LocalDate)
	{POST [/api/delegations]}: createDelegation(DelegationCreateRequest)
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.StatisticsController:
	{GET [/api/villages/{id}/report]}: getVillageStatistics(long,LocalDate,LocalDate)
	{GET [/api/gbs/{id}/report]}: getGbsStatistics(long,LocalDate,LocalDate)
	{GET [/api/departments/{id}/report]}: getDepartmentStatistics(long,LocalDate,LocalDate)
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.UserController:
	{POST [/api/users/by-roles]}: getUsersByRoles(UserListByRolesRequest)
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.a.AdminBatchController:
	{GET [/api/admin/batch/jobs]}: getBatchJobs(BatchJobType,BatchJobStatus,LocalDateTime,LocalDateTime,LocalDateTime,LocalDateTime,Pageable)
	{POST [/api/admin/batch/jobs]}: createBatchJob(BatchJobRequest)
	{POST [/api/admin/batch/jobs/{jobId}/cancel]}: cancelBatchJob(long,BatchJobCancelRequest)
	{POST [/api/admin/batch/jobs/{jobId}/restart]}: restartBatchJob(long,BatchJobRestartRequest)
	{GET [/api/admin/batch/jobs/{jobId}]}: getBatchJob(long)
	{GET [/api/admin/batch/jobs/{jobId}/logs]}: getBatchJobLogs(long)
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.a.AdminLogController:
	{GET [/api/admin/logs/{id}]}: getLogById(long)
	{GET [/api/admin/logs]}: getLogs(String,String,LocalDateTime,LocalDateTime,Long,String,int,int,String)
	{GET [/api/admin/logs/categories]}: getLogCategories()
	{GET [/api/admin/logs/levels]}: getLogLevels()
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.a.AdminOrganizationController:
	{POST [/api/admin/organization/gbs-groups/{gbsGroupId}/members]}: assignMemberToGbs(long,GbsMemberAssignRequest)
	{POST [/api/admin/organization/departments]}: createDepartment(DepartmentCreateRequest)
	{GET [/api/admin/organization/departments/{departmentId}]}: getDepartment(long)
	{GET [/api/admin/organization/departments]}: getAllDepartments()
	{PUT [/api/admin/organization/departments/{departmentId}]}: updateDepartment(long,DepartmentUpdateRequest)
	{DELETE [/api/admin/organization/departments/{departmentId}]}: deleteDepartment(long)
	{POST [/api/admin/organization/villages]}: createVillage(VillageCreateRequest)
	{PUT [/api/admin/organization/villages/{villageId}]}: updateVillage(long,VillageUpdateRequest)
	{POST [/api/admin/organization/gbs-groups]}: createGbsGroup(GbsGroupCreateRequest)
	{PUT [/api/admin/organization/gbs-groups/{gbsGroupId}]}: updateGbsGroup(long,GbsGroupUpdateRequest)
	{POST [/api/admin/organization/gbs-groups/{gbsGroupId}/leaders]}: assignLeaderToGbs(long,GbsLeaderAssignRequest)
	{POST [/api/admin/organization/reorganization]}: executeGbsReorganization(GbsReorganizationRequest)
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.a.AdminSystemController:
	{GET [/api/admin/system/settings/{key}]}: getSystemSetting(String)
	{DELETE [/api/admin/system/settings/{key}]}: deleteSystemSetting(String)
	{POST [/api/admin/system/security-policies]}: saveSecurityPolicies(SecurityPolicyRequest)
	{POST [/api/admin/system/batch-settings]}: saveBatchSettings(BatchSettingRequest)
	{GET [/api/admin/system/settings]}: getAllSystemSettings()
	{POST [/api/admin/system/email-settings]}: saveEmailSettings(EmailSettingRequest)
	{POST [/api/admin/system/slack-settings]}: saveSlackSettings(SlackSettingRequest)
	{POST [/api/admin/system/settings]}: saveSystemSetting(SystemSettingRequest)
	{GET [/api/admin/system/email-settings]}: getEmailSettings()
	{POST [/api/admin/system/attendance-settings]}: saveAttendanceSettings(AttendanceSettingRequest)
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.a.AdminUserController:
	{POST [/api/admin/users]}: createUser(UserCreateRequest)
	{PUT [/api/admin/users/{userId}]}: updateUser(long,UserUpdateRequest)
	{POST [/api/admin/users/{userId}/reset-password]}: resetPassword(long,UserPasswordResetRequest)
	{DELETE [/api/admin/users/{userId}]}: deleteUser(long)
	{GET [/api/admin/users]}: getAllUsers(Pageable)
	{GET [/api/admin/users/{userId}]}: getUser(long)
	{POST [/api/admin/users/bulk]}: bulkCreateUsers(UserBulkCreateRequest)
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	o.s.b.a.w.s.e.BasicErrorController:
	{ [/error], produces [text/html]}: errorHtml(HttpServletRequest,HttpServletResponse)
	{ [/error]}: error(HttpServletRequest)
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	o.s.w.a.MultipleOpenApiWebMvcResource:
	{GET [/api-docs/{group}], produces [application/json]}: openapiJson(HttpServletRequest,String,String,Locale)
	{GET [/api-docs.yaml/{group}], produces [application/vnd.oai.openapi]}: openapiYaml(HttpServletRequest,String,String,Locale)
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	o.s.w.a.OpenApiWebMvcResource:
	{GET [/api-docs], produces [application/json]}: openapiJson(HttpServletRequest,String,Locale)
	{GET [/api-docs.yaml], produces [application/vnd.oai.openapi]}: openapiYaml(HttpServletRequest,String,Locale)
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	o.s.w.u.SwaggerWelcomeWebMvc:
	{GET [/swagger-ui.html]}: redirectToUi(HttpServletRequest)
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	o.s.w.u.SwaggerConfigResource:
	{GET [/api-docs/swagger-config], produces [application/json]}: openapiJson(HttpServletRequest)
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 'beanNameHandlerMapping' {}
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 'resourceHandlerMapping' {/webjars/**=ResourceHttpRequestHandler [classpath [META-INF/resources/webjars/]], /**=ResourceHttpRequestHandler [classpath [META-INF/resources/], classpath [resources/], classpath [static/], classpath [public/], ServletContext [/]], /swagger-ui*/*swagger-initializer.js=ResourceHttpRequestHandler [classpath [META-INF/resources/webjars/]], /swagger-ui*/**=ResourceHttpRequestHandler [classpath [META-INF/resources/webjars/]]}
2025-05-06 22:48:24 [Test worker] [NONE] INFO  com.attendly.ApplicationTests - Started ApplicationTests in 2.74 seconds (process running for 5.665)
2025-05-06 22:48:24 [Test worker] [NONE] WARN  DiscordLogger - [시스템이벤트] 애플리케이션 시작: attendly-api (프로필: test)
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(jwtTokenProvider bean#24)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(customUserDetailsService bean#25)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtAuthenticationFilter(jwtAuthenticationFilter bean#26)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#27)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [P6spyConfig(p6spyConfig bean#28)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(jwtTokenProvider bean#24)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(customUserDetailsService bean#25)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtAuthenticationFilter(jwtAuthenticationFilter bean#26)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#27)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [P6spyConfig(p6spyConfig bean#28)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:24 [Test worker] [NONE] WARN  o.s.b.t.j.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer - 

Found multiple occurrences of org.json.JSONObject on the class path:

	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/org.json/json/20230618/1ae16df7d556d02713e241086f878399e99260d6/json-20230618.jar!/org/json/JSONObject.class
	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/com.vaadin.external.google/android-json/0.0.20131108.vaadin1/fa26d351fe62a6a17f5cda1287c1c6110dec413f/android-json-0.0.20131108.vaadin1.jar!/org/json/JSONObject.class

You may wish to exclude one of them to ensure predictable runtime behavior

2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberService name=#29
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=#30
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#31
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #30#32
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMembersListResponse name=child of #29#33
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=1, name='리더', role=LEADER) on UserService(#30).getCurrentUser(Authentication(#31))
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsMembersListResponse(gbsId=1, gbsName=GBS1, memberCount=2, members=[GbsMemberResponse(id=2, name=조원1, email=member1@example.com, birthDate=2000-01-01, joinDate=2023-01-01, phoneNumber=null), GbsMemberResponse(id=3, name=조원2, email=member2@example.com, birthDate=2000-02-02, joinDate=2023-01-01, phoneNumber=null)]) on GbsMemberService(#29).getGbsMembers(1, 2025-05-06, User(id=1, name='리더', role=LEADER))
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberService name=#34
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=#35
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#36
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #35#37
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMembersListResponse name=child of #34#38
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=1, name='어드민', role=ADMIN) on UserService(#35).getCurrentUser(Authentication(#36))
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsMembersListResponse(gbsId=1, gbsName=GBS1, memberCount=2, members=[GbsMemberResponse(id=1, name=조원1, email=member1@example.com, birthDate=2000-01-01, joinDate=2023-01-01, phoneNumber=null), GbsMemberResponse(id=2, name=조원2, email=member2@example.com, birthDate=2000-02-02, joinDate=2023-01-01, phoneNumber=null)]) on GbsMemberService(#34).getGbsMembers(1, 2025-05-06, User(id=1, name='어드민', role=ADMIN))
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberService name=#39
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=#40
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#41
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #40#42
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderGbsResponse name=child of #39#43
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=1, name='홍길동', role=LEADER) on UserService(#40).getCurrentUser(Authentication(#41))
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LeaderGbsResponse(gbsId=1, gbsName=Test GBS, villageId=1, villageName=Test Village, leaderId=1, leaderName=홍길동, startDate=2025-05-06) on GbsMemberService(#39).getGbsForLeader(1)
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberService name=#44
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=#45
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#46
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #45#47
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMembersListResponse name=child of #44#48
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=1, name='위임받은리더', role=LEADER) on UserService(#45).getCurrentUser(Authentication(#46))
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsMembersListResponse(gbsId=1, gbsName=GBS1, memberCount=2, members=[GbsMemberResponse(id=3, name=조원1, email=member1@example.com, birthDate=2000-01-01, joinDate=2023-01-01, phoneNumber=null), GbsMemberResponse(id=4, name=조원2, email=member2@example.com, birthDate=2000-02-02, joinDate=2023-01-01, phoneNumber=null)]) on GbsMemberService(#44).getGbsMembers(1, 2025-05-06, User(id=1, name='위임받은리더', role=LEADER))
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberService name=#49
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=#50
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#51
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #50#52
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderGbsHistoryListResponse name=child of #49#53
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=1, name='홍길동', role=LEADER) on UserService(#50).getCurrentUser(Authentication(#51))
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LeaderGbsHistoryListResponse(leaderId=1, leaderName=홍길동, historyCount=2, histories=[LeaderGbsHistoryResponse(historyId=2, gbsId=2, gbsName=GBS2, villageId=1, villageName=1마을, startDate=2023-01-01, endDate=null, isActive=true, members=[GbsMemberResponse(id=2, name=조원1, email=member1@example.com, birthDate=2000-01-01, joinDate=2022-01-01, phoneNumber=null), GbsMemberResponse(id=3, name=조원2, email=member2@example.com, birthDate=2000-02-02, joinDate=2022-01-01, phoneNumber=null)]), LeaderGbsHistoryResponse(historyId=1, gbsId=1, gbsName=GBS1, villageId=1, villageName=1마을, startDate=2022-01-01, endDate=2022-12-31, isActive=false, members=[GbsMemberResponse(id=2, name=조원1, email=member1@example.com, birthDate=2000-01-01, joinDate=2022-01-01, phoneNumber=null), GbsMemberResponse(id=3, name=조원2, email=member2@example.com, birthDate=2000-02-02, joinDate=2022-01-01, phoneNumber=null)])]) on GbsMemberService(#49).getLeaderGbsHistories(1, User(id=1, name='홍길동', role=LEADER))
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberService name=#54
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=#55
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#56
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #55#57
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderGbsHistoryListResponse name=child of #54#58
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=99, name='관리자', role=ADMIN) on UserService(#55).getCurrentUser(Authentication(#56))
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LeaderGbsHistoryListResponse(leaderId=1, leaderName=홍길동, historyCount=1, histories=[LeaderGbsHistoryResponse(historyId=1, gbsId=1, gbsName=GBS1, villageId=1, villageName=1마을, startDate=2022-01-01, endDate=2022-12-31, isActive=false, members=[])]) on GbsMemberService(#54).getLeaderGbsHistories(1, User(id=99, name='관리자', role=ADMIN))
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationService name=leaderDelegationService#59
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.LeaderDelegationController:
	{GET [/api/delegations/active]}: getActiveDelegations(long,LocalDate)
	{POST [/api/delegations]}: createDelegation(DelegationCreateRequest)
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegation name=#60
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegation name=child of leaderDelegationService#59#61
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LeaderDelegation(#60) on LeaderDelegationService(leaderDelegationService#59).createDelegation(DelegationCreateRequest(delegatorId=1, delegateId=2, gbsGroupId=1, startDate=2025-05-07, endDate=2025-05-13))
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on LeaderDelegation(#60).getId()
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #60#62
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(child of #60#62) on LeaderDelegation(#60).getDelegator()
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 0 on User(child of #60#62).getId()
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(child of #60#62) on LeaderDelegation(#60).getDelegator()
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering  on User(child of #60#62).getName()
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #60#63
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(child of #60#63) on LeaderDelegation(#60).getDelegatee()
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 0 on User(child of #60#63).getId()
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(child of #60#63) on LeaderDelegation(#60).getDelegatee()
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering  on User(child of #60#63).getName()
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroup name=child of #60#64
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsGroup(child of #60#64) on LeaderDelegation(#60).getGbsGroup()
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 0 on GbsGroup(child of #60#64).getId()
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsGroup(child of #60#64) on LeaderDelegation(#60).getGbsGroup()
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering  on GbsGroup(child of #60#64).getName()
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LocalDate name=child of #60#65
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LocalDate(child of #60#65) on LeaderDelegation(#60).getStartDate()
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LocalDate name=child of #60#66
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LocalDate(child of #60#66) on LeaderDelegation(#60).getEndDate()
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 0 on LocalDate(child of #60#65).getYear()
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 0 on LocalDate(child of #60#65).getMonthValue()
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 0 on LocalDate(child of #60#65).getDayOfMonth()
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 0 on LocalDate(child of #60#66).getYear()
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 0 on LocalDate(child of #60#66).getMonthValue()
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 0 on LocalDate(child of #60#66).getDayOfMonth()
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationService name=leaderDelegationService#67
2025-05-06 22:48:24 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.LeaderDelegationController:
	{GET [/api/delegations/active]}: getActiveDelegations(long,LocalDate)
	{POST [/api/delegations]}: createDelegation(DelegationCreateRequest)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of leaderDelegationService#67#68
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on LeaderDelegationService(leaderDelegationService#67).findActiveDelegations(1, 2025-05-06)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationService name=leaderDelegationService#69
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.LeaderDelegationController:
	{GET [/api/delegations/active]}: getActiveDelegations(long,LocalDate)
	{POST [/api/delegations]}: createDelegation(DelegationCreateRequest)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#70
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#71
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroup name=#72
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegation name=#73
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #73#74
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #73#75
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroup name=child of #73#76
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LocalDate name=child of #73#77
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LocalDate name=child of #73#78
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of leaderDelegationService#69#79
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [LeaderDelegation(#73)] on LeaderDelegationService(leaderDelegationService#69).findActiveDelegations(2, 2025-05-06)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on LeaderDelegation(#73).getId()
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#70) on LeaderDelegation(#73).getDelegator()
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on User(#70).getId()
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#70) on LeaderDelegation(#73).getDelegator()
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 김위임자 on User(#70).getName()
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#71) on LeaderDelegation(#73).getDelegatee()
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 2 on User(#71).getId()
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#71) on LeaderDelegation(#73).getDelegatee()
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 이수임자 on User(#71).getName()
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsGroup(#72) on LeaderDelegation(#73).getGbsGroup()
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on GbsGroup(#72).getId()
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsGroup(#72) on LeaderDelegation(#73).getGbsGroup()
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 테스트 소그룹 on GbsGroup(#72).getName()
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 2025-05-05 on LeaderDelegation(#73).getStartDate()
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 2025-05-11 on LeaderDelegation(#73).getEndDate()
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $[0]['id']
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $[0]['delegatorName']
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationService name=leaderDelegationService#80
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.LeaderDelegationController:
	{GET [/api/delegations/active]}: getActiveDelegations(long,LocalDate)
	{POST [/api/delegations]}: createDelegation(DelegationCreateRequest)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#81
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#82
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroup name=#83
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegation name=#84
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #84#85
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #84#86
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroup name=child of #84#87
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LocalDate name=child of #84#88
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LocalDate name=child of #84#89
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of leaderDelegationService#80#90
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [LeaderDelegation(#84)] on LeaderDelegationService(leaderDelegationService#80).findActiveDelegations(2, 2025-05-06)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on LeaderDelegation(#84).getId()
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#81) on LeaderDelegation(#84).getDelegator()
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on User(#81).getId()
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#81) on LeaderDelegation(#84).getDelegator()
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 김위임자 on User(#81).getName()
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#82) on LeaderDelegation(#84).getDelegatee()
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 2 on User(#82).getId()
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#82) on LeaderDelegation(#84).getDelegatee()
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 이수임자 on User(#82).getName()
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsGroup(#83) on LeaderDelegation(#84).getGbsGroup()
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on GbsGroup(#83).getId()
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsGroup(#83) on LeaderDelegation(#84).getGbsGroup()
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 테스트 소그룹 on GbsGroup(#83).getName()
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 2025-05-05 on LeaderDelegation(#84).getStartDate()
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 2025-05-11 on LeaderDelegation(#84).getEndDate()
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $[0]['id']
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $[0]['delegatorId']
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $[0]['delegatorName']
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $[0]['delegateeId']
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $[0]['delegateeName']
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $[0]['gbsGroupId']
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $[0]['gbsGroupName']
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $[0]['startDate']
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $[0]['endDate']
2025-05-06 22:48:25 [Test worker] [NONE] WARN  o.s.b.t.j.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer - 

Found multiple occurrences of org.json.JSONObject on the class path:

	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/org.json/json/20230618/1ae16df7d556d02713e241086f878399e99260d6/json-20230618.jar!/org/json/JSONObject.class
	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/com.vaadin.external.google/android-json/0.0.20131108.vaadin1/fa26d351fe62a6a17f5cda1287c1c6110dec413f/android-json-0.0.20131108.vaadin1.jar!/org/json/JSONObject.class

You may wish to exclude one of them to ensure predictable runtime behavior

2025-05-06 22:48:25 [Test worker] [NONE] INFO  c.a.a.controller.UserControllerTest - Starting UserControllerTest using Java 21.0.6 with PID 47231 (started by user in /Users/user/study/attendly-api)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG c.a.a.controller.UserControllerTest - Running with Spring Boot v3.4.5, Spring v6.2.6
2025-05-06 22:48:25 [Test worker] [NONE] INFO  c.a.a.controller.UserControllerTest - The following 1 profile is active: "dev"
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=com.attendly.service.UserService#0 bean#91
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for JwtTokenProvider name=com.attendly.security.JwtTokenProvider#0 bean#92
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AuthenticationManager name=authenticationManager bean#93
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsService name=org.springframework.security.core.userdetails.UserDetailsService#0 bean#94
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.UserController:
	{POST [/api/users/by-roles]}: getUsersByRoles(UserListByRolesRequest)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	o.s.b.a.w.s.e.BasicErrorController:
	{ [/error], produces [text/html]}: errorHtml(HttpServletRequest,HttpServletResponse)
	{ [/error]}: error(HttpServletRequest)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 'beanNameHandlerMapping' {}
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 'resourceHandlerMapping' {/webjars/**=ResourceHttpRequestHandler [classpath [META-INF/resources/webjars/]], /**=ResourceHttpRequestHandler [classpath [META-INF/resources/], classpath [resources/], classpath [static/], classpath [public/], ServletContext [/]]}
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG com.attendly.config.RequestIdFilter - Filter 'requestIdFilter' configured for use
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG c.a.config.ContentCachingFilter - Filter 'contentCachingFilter' configured for use
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG c.a.security.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-05-06 22:48:25 [Test worker] [NONE] INFO  c.a.a.controller.UserControllerTest - Started UserControllerTest in 0.132 seconds (process running for 6.209)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#91)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#92)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#93)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#94)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#91)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#92)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#93)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#94)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of com.attendly.service.UserService#0 bean#91#95
2025-05-06 22:48:25 [Test worker] [e072eab0-f74d-41f9-b6ea-096ff346fe82] DEBUG i.m.i.r.states.AnsweringState - Answering [UserResponse(id=1, name=Leader User, email=leader@example.com, phoneNumber=010-1234-5678, role=LEADER, departmentId=1, departmentName=IT 부서, birthDate=1990-01-01, createdAt=2025-05-06T22:48:25.206763, updatedAt=2025-05-06T22:48:25.206763), UserResponse(id=2, name=Member User, email=member@example.com, phoneNumber=010-9876-5432, role=MEMBER, departmentId=1, departmentName=IT 부서, birthDate=1995-05-05, createdAt=2025-05-06T22:48:25.206763, updatedAt=2025-05-06T22:48:25.206763)] on UserService(com.attendly.service.UserService#0 bean#91).getUsersByRoles(UserListByRolesRequest(roles=[LEADER, MEMBER]))
2025-05-06 22:48:25 [Test worker] [e072eab0-f74d-41f9-b6ea-096ff346fe82] INFO  c.a.a.interceptor.ApiLogInterceptor - POST /api/users/by-roles - 200 (10 ms)
2025-05-06 22:48:25 [Test worker] [e072eab0-f74d-41f9-b6ea-096ff346fe82] DEBUG c.a.a.interceptor.ApiLogInterceptor - API 상세 정보: {"requestId":"e072eab0-f74d-41f9-b6ea-096ff346fe82","apiPath":"/api/users/by-roles","method":"POST","status":200,"duration":10,"requestHeaders":{"Content-Type":"application/json;charset=UTF-8","Content-Length":"29"},"responseHeaders":{"X-Request-ID":"e072eab0-f74d-41f9-b6ea-096ff346fe82","Content-Type":"application/json","X-Content-Type-Options":"nosniff","X-XSS-Protection":"0","Cache-Control":"no-cache, no-store, max-age=0, must-revalidate","Pragma":"no-cache","Expires":"0","X-Frame-Options":"DENY"},"requestBody":null,"responseBody":null,"queryParams":null}
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['users']
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['users'].length()
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['users'][0]['name']
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['users'][0]['role']
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['users'][1]['name']
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['users'][1]['role']
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of com.attendly.service.UserService#0 bean#91#96
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#91)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#92)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#93)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#94)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#91)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#92)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#93)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#94)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of com.attendly.service.UserService#0 bean#91#97
2025-05-06 22:48:25 [Test worker] [dfd0c300-fd53-4924-9223-323f17e9401c] ERROR c.a.exception.GlobalExceptionHandler - MethodArgumentNotValidException: {}
org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity<com.attendly.api.dto.UserListByRolesResponse> com.attendly.api.controller.UserController.getUsersByRoles(com.attendly.api.dto.UserListByRolesRequest): [Field error in object 'userListByRolesRequest' on field 'roles': rejected value [[]]; codes [NotEmpty.userListByRolesRequest.roles,NotEmpty.roles,NotEmpty.java.util.List,NotEmpty]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [userListByRolesRequest.roles,roles]; arguments []; default message [roles]]; default message [최소 하나 이상의 역할이 필요합니다]] 
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:159)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:227)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:181)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:72)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:165)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at com.attendly.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.kt:27)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:165)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at com.attendly.config.RequestIdFilter.doFilter(RequestIdFilter.kt:34)
	at org.springframework.test.web.servlet.setup.MockMvcFilterDecorator.doFilter(MockMvcFilterDecorator.java:162)
	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:132)
	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:201)
	at com.attendly.api.controller.UserControllerTest.should return 400 when request is invalid(UserControllerTest.kt:125)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)
	at java.base/java.lang.reflect.Method.invoke(Unknown Source)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:767)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$8(TestMethodTestDescriptor.java:217)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:156)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(Unknown Source)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(Unknown Source)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:124)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:99)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:94)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)
	at java.base/java.lang.reflect.Method.invoke(Unknown Source)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:92)
	at jdk.proxy1/jdk.proxy1.$Proxy4.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:200)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:132)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:103)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:63)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:121)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
2025-05-06 22:48:25 [Test worker] [dfd0c300-fd53-4924-9223-323f17e9401c] WARN  c.a.a.interceptor.ApiLogInterceptor - POST /api/users/by-roles - 400 (5 ms)
2025-05-06 22:48:25 [Test worker] [dfd0c300-fd53-4924-9223-323f17e9401c] DEBUG c.a.a.interceptor.ApiLogInterceptor - API 상세 정보: {"requestId":"dfd0c300-fd53-4924-9223-323f17e9401c","apiPath":"/api/users/by-roles","method":"POST","status":400,"duration":5,"requestHeaders":{"Content-Type":"application/json;charset=UTF-8","Content-Length":"12"},"responseHeaders":{"X-Request-ID":"dfd0c300-fd53-4924-9223-323f17e9401c","Content-Type":"application/json","X-Content-Type-Options":"nosniff","X-XSS-Protection":"0","Cache-Control":"no-cache, no-store, max-age=0, must-revalidate","Pragma":"no-cache","Expires":"0","X-Frame-Options":"DENY"},"requestBody":null,"responseBody":null,"queryParams":null}
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#91)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#92)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#93)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#94)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserService(com.attendly.service.UserService#0 bean#91)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#92)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#93)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#94)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] WARN  o.s.b.t.j.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer - 

Found multiple occurrences of org.json.JSONObject on the class path:

	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/org.json/json/20230618/1ae16df7d556d02713e241086f878399e99260d6/json-20230618.jar!/org/json/JSONObject.class
	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/com.vaadin.external.google/android-json/0.0.20131108.vaadin1/fa26d351fe62a6a17f5cda1287c1c6110dec413f/android-json-0.0.20131108.vaadin1.jar!/org/json/JSONObject.class

You may wish to exclude one of them to ensure predictable runtime behavior

2025-05-06 22:48:25 [Test worker] [NONE] INFO  c.a.a.c.admin.AdminLogControllerTest - Starting AdminLogControllerTest using Java 21.0.6 with PID 47231 (started by user in /Users/user/study/attendly-api)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG c.a.a.c.admin.AdminLogControllerTest - Running with Spring Boot v3.4.5, Spring v6.2.6
2025-05-06 22:48:25 [Test worker] [NONE] INFO  c.a.a.c.admin.AdminLogControllerTest - The following 1 profile is active: "dev"
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogService name=com.attendly.service.SystemLogService#0 bean#98
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for JwtTokenProvider name=com.attendly.security.JwtTokenProvider#0 bean#99
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsService name=org.springframework.security.core.userdetails.UserDetailsService#0 bean#100
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.a.AdminLogController:
	{GET [/api/admin/logs/{id}]}: getLogById(long)
	{GET [/api/admin/logs]}: getLogs(String,String,LocalDateTime,LocalDateTime,Long,String,int,int,String)
	{GET [/api/admin/logs/categories]}: getLogCategories()
	{GET [/api/admin/logs/levels]}: getLogLevels()
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	o.s.b.a.w.s.e.BasicErrorController:
	{ [/error], produces [text/html]}: errorHtml(HttpServletRequest,HttpServletResponse)
	{ [/error]}: error(HttpServletRequest)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 'beanNameHandlerMapping' {}
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 'resourceHandlerMapping' {/webjars/**=ResourceHttpRequestHandler [classpath [META-INF/resources/webjars/]], /**=ResourceHttpRequestHandler [classpath [META-INF/resources/], classpath [resources/], classpath [static/], classpath [public/], ServletContext [/]]}
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AuthenticationManager name=#101
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1244600539 on AuthenticationManager(#101).hashCode()
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG com.attendly.config.RequestIdFilter - Filter 'requestIdFilter' configured for use
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG c.a.config.ContentCachingFilter - Filter 'contentCachingFilter' configured for use
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG c.a.security.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-05-06 22:48:25 [Test worker] [NONE] INFO  c.a.a.c.admin.AdminLogControllerTest - Started AdminLogControllerTest in 0.137 seconds (process running for 6.446)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Page name=child of com.attendly.service.SystemLogService#0 bean#98#102
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLog name=child of com.attendly.service.SystemLogService#0 bean#98#103
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLog name=child of com.attendly.service.SystemLogService#0 bean#98#104
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of com.attendly.service.SystemLogService#0 bean#98#105
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.JvmStaticMockFactory - Creating object mockk for Companion
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [Companion(object Companion)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogResponseDto name=child of object Companion#106
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogResponseDto name=child of object Companion#107
2025-05-06 22:48:25 [Test worker] [ca192418-f11a-46d9-8712-19d371a2f67e] DEBUG i.m.i.r.states.AnsweringState - Answering null on SystemLogService(com.attendly.service.SystemLogService#0 bean#98).getLogById(999)
2025-05-06 22:48:25 [Test worker] [ca192418-f11a-46d9-8712-19d371a2f67e] WARN  c.a.a.interceptor.ApiLogInterceptor - GET /api/admin/logs/999 - 404 (8 ms)
2025-05-06 22:48:25 [Test worker] [ca192418-f11a-46d9-8712-19d371a2f67e] DEBUG c.a.a.interceptor.ApiLogInterceptor - API 상세 정보: {"requestId":"ca192418-f11a-46d9-8712-19d371a2f67e","apiPath":"/api/admin/logs/999","method":"GET","status":404,"duration":8,"requestHeaders":{"Content-Type":"application/json;charset=UTF-8"},"responseHeaders":{"X-Request-ID":"ca192418-f11a-46d9-8712-19d371a2f67e"},"requestBody":null,"responseBody":null,"queryParams":null}
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#98)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#99)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#100)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#98)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#99)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#100)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Page name=child of com.attendly.service.SystemLogService#0 bean#98#108
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLog name=child of com.attendly.service.SystemLogService#0 bean#98#109
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLog name=child of com.attendly.service.SystemLogService#0 bean#98#110
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of com.attendly.service.SystemLogService#0 bean#98#111
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [Companion(object Companion)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogResponseDto name=child of object Companion#112
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogResponseDto name=child of object Companion#113
2025-05-06 22:48:25 [Test worker] [4000bbd6-8b2a-40e8-8f78-4bdc5ab20052] INFO  c.a.a.interceptor.ApiLogInterceptor - GET /api/admin/logs/levels - 200 (1 ms)
2025-05-06 22:48:25 [Test worker] [4000bbd6-8b2a-40e8-8f78-4bdc5ab20052] DEBUG c.a.a.interceptor.ApiLogInterceptor - API 상세 정보: {"requestId":"4000bbd6-8b2a-40e8-8f78-4bdc5ab20052","apiPath":"/api/admin/logs/levels","method":"GET","status":200,"duration":1,"requestHeaders":{"Content-Type":"application/json;charset=UTF-8"},"responseHeaders":{"X-Request-ID":"4000bbd6-8b2a-40e8-8f78-4bdc5ab20052","Content-Type":"application/json","X-Content-Type-Options":"nosniff","X-XSS-Protection":"0","Cache-Control":"no-cache, no-store, max-age=0, must-revalidate","Pragma":"no-cache","Expires":"0","X-Frame-Options":"DENY"},"requestBody":null,"responseBody":null,"queryParams":null}
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $[0]
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $[1]
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $[2]
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#98)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#99)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#100)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#98)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#99)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#100)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Page name=child of com.attendly.service.SystemLogService#0 bean#98#114
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLog name=child of com.attendly.service.SystemLogService#0 bean#98#115
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLog name=child of com.attendly.service.SystemLogService#0 bean#98#116
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of com.attendly.service.SystemLogService#0 bean#98#117
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [Companion(object Companion)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogResponseDto name=child of object Companion#118
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogResponseDto name=child of object Companion#119
2025-05-06 22:48:25 [Test worker] [d4c43983-f2b7-41b8-8710-290fe202186e] DEBUG i.m.i.r.states.AnsweringState - Answering com.attendly.domain.entity.SystemLog@4ba24e06 on SystemLogService(com.attendly.service.SystemLogService#0 bean#98).getLogById(1)
2025-05-06 22:48:25 [Test worker] [d4c43983-f2b7-41b8-8710-290fe202186e] DEBUG i.m.i.r.states.AnsweringState - Answering SystemLogResponseDto(id=1, level=INFO, category=APPLICATION, message=테스트 로그 메시지 1, additionalInfo=null, timestamp=2025-05-05T22:48:25.592747, ipAddress=127.0.0.1, userId=null, userAgent=null, serverInstance=null) on Companion(object Companion).from(com.attendly.domain.entity.SystemLog@4ba24e06)
2025-05-06 22:48:25 [Test worker] [d4c43983-f2b7-41b8-8710-290fe202186e] INFO  c.a.a.interceptor.ApiLogInterceptor - GET /api/admin/logs/1 - 200 (2 ms)
2025-05-06 22:48:25 [Test worker] [d4c43983-f2b7-41b8-8710-290fe202186e] DEBUG c.a.a.interceptor.ApiLogInterceptor - API 상세 정보: {"requestId":"d4c43983-f2b7-41b8-8710-290fe202186e","apiPath":"/api/admin/logs/1","method":"GET","status":200,"duration":2,"requestHeaders":{"Content-Type":"application/json;charset=UTF-8"},"responseHeaders":{"X-Request-ID":"d4c43983-f2b7-41b8-8710-290fe202186e","Content-Type":"application/json","X-Content-Type-Options":"nosniff","X-XSS-Protection":"0","Cache-Control":"no-cache, no-store, max-age=0, must-revalidate","Pragma":"no-cache","Expires":"0","X-Frame-Options":"DENY"},"requestBody":null,"responseBody":null,"queryParams":null}
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['id']
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['level']
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#98)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#99)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#100)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#98)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#99)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#100)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Page name=child of com.attendly.service.SystemLogService#0 bean#98#120
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLog name=child of com.attendly.service.SystemLogService#0 bean#98#121
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLog name=child of com.attendly.service.SystemLogService#0 bean#98#122
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of com.attendly.service.SystemLogService#0 bean#98#123
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [Companion(object Companion)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogResponseDto name=child of object Companion#124
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogResponseDto name=child of object Companion#125
2025-05-06 22:48:25 [Test worker] [2d20e633-f589-4c7e-957e-b36350ea9f23] DEBUG i.m.i.r.states.AnsweringState - Answering Page 1 of 1 containing com.attendly.domain.entity.SystemLog instances on SystemLogService(com.attendly.service.SystemLogService#0 bean#98).getLogs(null, null, null, null, null, null, Page request [number: 0, size 20, sort: timestamp: DESC])
2025-05-06 22:48:25 [Test worker] [2d20e633-f589-4c7e-957e-b36350ea9f23] DEBUG i.m.i.r.states.AnsweringState - Answering SystemLogResponseDto(id=1, level=INFO, category=APPLICATION, message=테스트 로그 메시지 1, additionalInfo=null, timestamp=2025-05-05T22:48:25.601309, ipAddress=127.0.0.1, userId=null, userAgent=null, serverInstance=null) on Companion(object Companion).from(com.attendly.domain.entity.SystemLog@4d4fa89d)
2025-05-06 22:48:25 [Test worker] [2d20e633-f589-4c7e-957e-b36350ea9f23] DEBUG i.m.i.r.states.AnsweringState - Answering SystemLogResponseDto(id=2, level=ERROR, category=SECURITY, message=테스트 로그 메시지 2, additionalInfo=null, timestamp=2025-05-06T22:48:25.601309, ipAddress=127.0.0.1, userId=null, userAgent=null, serverInstance=null) on Companion(object Companion).from(com.attendly.domain.entity.SystemLog@181026b8)
2025-05-06 22:48:25 [Test worker] [2d20e633-f589-4c7e-957e-b36350ea9f23] WARN  o.s.d.w.c.SpringDataJacksonConfiguration$PageModule$WarningLoggingModifier - Serializing PageImpl instances as-is is not supported, meaning that there is no guarantee about the stability of the resulting JSON structure!
	For a stable JSON structure, please use Spring Data's PagedModel (globally via @EnableSpringDataWebSupport(pageSerializationMode = VIA_DTO))
	or Spring HATEOAS and Spring Data's PagedResourcesAssembler as documented in https://docs.spring.io/spring-data/commons/reference/repositories/core-extensions.html#core.web.pageables.

2025-05-06 22:48:25 [Test worker] [2d20e633-f589-4c7e-957e-b36350ea9f23] INFO  c.a.a.interceptor.ApiLogInterceptor - GET /api/admin/logs - 200 (87 ms)
2025-05-06 22:48:25 [Test worker] [2d20e633-f589-4c7e-957e-b36350ea9f23] DEBUG c.a.a.interceptor.ApiLogInterceptor - API 상세 정보: {"requestId":"2d20e633-f589-4c7e-957e-b36350ea9f23","apiPath":"/api/admin/logs","method":"GET","status":200,"duration":87,"requestHeaders":{"Content-Type":"application/json;charset=UTF-8"},"responseHeaders":{"X-Request-ID":"2d20e633-f589-4c7e-957e-b36350ea9f23","Content-Type":"application/json","X-Content-Type-Options":"nosniff","X-XSS-Protection":"0","Cache-Control":"no-cache, no-store, max-age=0, must-revalidate","Pragma":"no-cache","Expires":"0","X-Frame-Options":"DENY"},"requestBody":null,"responseBody":null,"queryParams":null}
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['content']
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['content'].length()
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['content'][0]['level']
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['content'][1]['level']
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Page name=child of com.attendly.service.SystemLogService#0 bean#98#126
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#98)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#99)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#100)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#98)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#99)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#100)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Page name=child of com.attendly.service.SystemLogService#0 bean#98#127
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLog name=child of com.attendly.service.SystemLogService#0 bean#98#128
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLog name=child of com.attendly.service.SystemLogService#0 bean#98#129
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of com.attendly.service.SystemLogService#0 bean#98#130
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [Companion(object Companion)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogResponseDto name=child of object Companion#131
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogResponseDto name=child of object Companion#132
2025-05-06 22:48:25 [Test worker] [bb6a1460-f666-4bfe-97da-3e55cd4b154e] DEBUG i.m.i.r.states.AnsweringState - Answering Page 1 of 1 containing com.attendly.domain.entity.SystemLog instances on SystemLogService(com.attendly.service.SystemLogService#0 bean#98).getLogs(ERROR, null, null, null, null, null, Page request [number: 0, size 20, sort: timestamp: DESC])
2025-05-06 22:48:25 [Test worker] [bb6a1460-f666-4bfe-97da-3e55cd4b154e] DEBUG i.m.i.r.states.AnsweringState - Answering SystemLogResponseDto(id=1, level=INFO, category=APPLICATION, message=테스트 로그 메시지 1, additionalInfo=null, timestamp=2025-05-05T22:48:25.698182, ipAddress=127.0.0.1, userId=null, userAgent=null, serverInstance=null) on Companion(object Companion).from(com.attendly.domain.entity.SystemLog@447b916)
2025-05-06 22:48:25 [Test worker] [bb6a1460-f666-4bfe-97da-3e55cd4b154e] DEBUG i.m.i.r.states.AnsweringState - Answering SystemLogResponseDto(id=2, level=ERROR, category=SECURITY, message=테스트 로그 메시지 2, additionalInfo=null, timestamp=2025-05-06T22:48:25.698182, ipAddress=127.0.0.1, userId=null, userAgent=null, serverInstance=null) on Companion(object Companion).from(com.attendly.domain.entity.SystemLog@54be94fd)
2025-05-06 22:48:25 [Test worker] [bb6a1460-f666-4bfe-97da-3e55cd4b154e] INFO  c.a.a.interceptor.ApiLogInterceptor - GET /api/admin/logs - 200 (3 ms)
2025-05-06 22:48:25 [Test worker] [bb6a1460-f666-4bfe-97da-3e55cd4b154e] DEBUG c.a.a.interceptor.ApiLogInterceptor - API 상세 정보: {"requestId":"bb6a1460-f666-4bfe-97da-3e55cd4b154e","apiPath":"/api/admin/logs","method":"GET","status":200,"duration":3,"requestHeaders":{"Content-Type":"application/json;charset=UTF-8"},"responseHeaders":{"X-Request-ID":"bb6a1460-f666-4bfe-97da-3e55cd4b154e","Content-Type":"application/json","X-Content-Type-Options":"nosniff","X-XSS-Protection":"0","Cache-Control":"no-cache, no-store, max-age=0, must-revalidate","Pragma":"no-cache","Expires":"0","X-Frame-Options":"DENY"},"requestBody":null,"responseBody":null,"queryParams":null}
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Page name=child of com.attendly.service.SystemLogService#0 bean#98#133
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#98)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#99)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#100)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#98)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#99)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#100)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Page name=child of com.attendly.service.SystemLogService#0 bean#98#134
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLog name=child of com.attendly.service.SystemLogService#0 bean#98#135
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLog name=child of com.attendly.service.SystemLogService#0 bean#98#136
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of com.attendly.service.SystemLogService#0 bean#98#137
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [Companion(object Companion)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogResponseDto name=child of object Companion#138
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogResponseDto name=child of object Companion#139
2025-05-06 22:48:25 [Test worker] [cfac5dde-022b-42a3-a171-8e00ac35e729] DEBUG i.m.i.r.states.AnsweringState - Answering [APPLICATION, SECURITY] on SystemLogService(com.attendly.service.SystemLogService#0 bean#98).getLogCategories()
2025-05-06 22:48:25 [Test worker] [cfac5dde-022b-42a3-a171-8e00ac35e729] INFO  c.a.a.interceptor.ApiLogInterceptor - GET /api/admin/logs/categories - 200 (2 ms)
2025-05-06 22:48:25 [Test worker] [cfac5dde-022b-42a3-a171-8e00ac35e729] DEBUG c.a.a.interceptor.ApiLogInterceptor - API 상세 정보: {"requestId":"cfac5dde-022b-42a3-a171-8e00ac35e729","apiPath":"/api/admin/logs/categories","method":"GET","status":200,"duration":2,"requestHeaders":{"Content-Type":"application/json;charset=UTF-8"},"responseHeaders":{"X-Request-ID":"cfac5dde-022b-42a3-a171-8e00ac35e729","Content-Type":"application/json","X-Content-Type-Options":"nosniff","X-XSS-Protection":"0","Cache-Control":"no-cache, no-store, max-age=0, must-revalidate","Pragma":"no-cache","Expires":"0","X-Frame-Options":"DENY"},"requestBody":null,"responseBody":null,"queryParams":null}
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $[0]
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $[1]
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#98)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#99)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#100)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#98)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#99)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#100)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Page name=child of com.attendly.service.SystemLogService#0 bean#98#140
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLog name=child of com.attendly.service.SystemLogService#0 bean#98#141
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLog name=child of com.attendly.service.SystemLogService#0 bean#98#142
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of com.attendly.service.SystemLogService#0 bean#98#143
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [Companion(object Companion)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogResponseDto name=child of object Companion#144
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogResponseDto name=child of object Companion#145
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#98)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#99)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#100)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#98)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#99)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#100)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] WARN  o.s.b.t.j.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer - 

Found multiple occurrences of org.json.JSONObject on the class path:

	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/org.json/json/20230618/1ae16df7d556d02713e241086f878399e99260d6/json-20230618.jar!/org/json/JSONObject.class
	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/com.vaadin.external.google/android-json/0.0.20131108.vaadin1/fa26d351fe62a6a17f5cda1287c1c6110dec413f/android-json-0.0.20131108.vaadin1.jar!/org/json/JSONObject.class

You may wish to exclude one of them to ensure predictable runtime behavior

2025-05-06 22:48:25 [Test worker] [NONE] INFO  c.a.a.c.a.AdminUserControllerTest - Starting AdminUserControllerTest using Java 21.0.6 with PID 47231 (started by user in /Users/user/study/attendly-api)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG c.a.a.c.a.AdminUserControllerTest - Running with Spring Boot v3.4.5, Spring v6.2.6
2025-05-06 22:48:25 [Test worker] [NONE] INFO  c.a.a.c.a.AdminUserControllerTest - The following 1 profile is active: "dev"
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AdminUserService name=com.attendly.service.AdminUserService#0 bean#146
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for JwtTokenProvider name=com.attendly.security.JwtTokenProvider#0 bean#147
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AuthenticationManager name=authenticationManager bean#148
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsService name=org.springframework.security.core.userdetails.UserDetailsService#0 bean#149
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogService name=com.attendly.service.SystemLogService#0 bean#150
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	c.a.a.c.a.AdminUserController:
	{POST [/api/admin/users]}: createUser(UserCreateRequest)
	{PUT [/api/admin/users/{userId}]}: updateUser(long,UserUpdateRequest)
	{POST [/api/admin/users/{userId}/reset-password]}: resetPassword(long,UserPasswordResetRequest)
	{DELETE [/api/admin/users/{userId}]}: deleteUser(long)
	{GET [/api/admin/users]}: getAllUsers(Pageable)
	{GET [/api/admin/users/{userId}]}: getUser(long)
	{POST [/api/admin/users/bulk]}: bulkCreateUsers(UserBulkCreateRequest)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 
	o.s.b.a.w.s.e.BasicErrorController:
	{ [/error], produces [text/html]}: errorHtml(HttpServletRequest,HttpServletResponse)
	{ [/error]}: error(HttpServletRequest)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 'beanNameHandlerMapping' {}
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG _.s.w.s.HandlerMapping.Mappings - 'resourceHandlerMapping' {/webjars/**=ResourceHttpRequestHandler [classpath [META-INF/resources/webjars/]], /**=ResourceHttpRequestHandler [classpath [META-INF/resources/], classpath [resources/], classpath [static/], classpath [public/], ServletContext [/]]}
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG com.attendly.config.RequestIdFilter - Filter 'requestIdFilter' configured for use
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG c.a.config.ContentCachingFilter - Filter 'contentCachingFilter' configured for use
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG c.a.security.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-05-06 22:48:25 [Test worker] [NONE] INFO  c.a.a.c.a.AdminUserControllerTest - Started AdminUserControllerTest in 0.193 seconds (process running for 6.935)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Unit name=child of com.attendly.service.AdminUserService#0 bean#146#151
2025-05-06 22:48:25 [Test worker] [ab5006a4-b6e5-4615-8f2c-c15ff7b4ffa3] DEBUG i.m.i.r.states.AnsweringState - Answering kotlin.Unit on AdminUserService(com.attendly.service.AdminUserService#0 bean#146).deleteUser(1)
2025-05-06 22:48:25 [Test worker] [ab5006a4-b6e5-4615-8f2c-c15ff7b4ffa3] INFO  c.a.a.interceptor.ApiLogInterceptor - DELETE /api/admin/users/1 - 204 (3 ms)
2025-05-06 22:48:25 [Test worker] [ab5006a4-b6e5-4615-8f2c-c15ff7b4ffa3] DEBUG c.a.a.interceptor.ApiLogInterceptor - API 상세 정보: {"requestId":"ab5006a4-b6e5-4615-8f2c-c15ff7b4ffa3","apiPath":"/api/admin/users/1","method":"DELETE","status":204,"duration":3,"requestHeaders":{},"responseHeaders":{"X-Request-ID":"ab5006a4-b6e5-4615-8f2c-c15ff7b4ffa3"},"requestBody":null,"responseBody":null,"queryParams":null}
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AdminUserService(com.attendly.service.AdminUserService#0 bean#146)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#147)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#148)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#149)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#150)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AdminUserService(com.attendly.service.AdminUserService#0 bean#146)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#147)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#148)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#149)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#150)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Unit name=child of com.attendly.service.AdminUserService#0 bean#146#152
2025-05-06 22:48:25 [Test worker] [75269680-79c3-4d9c-8e45-883a4263a2bb] DEBUG i.m.i.r.states.AnsweringState - Answering kotlin.Unit on AdminUserService(com.attendly.service.AdminUserService#0 bean#146).resetPassword(1, UserPasswordResetRequest(newPassword=NewPassword123!))
2025-05-06 22:48:25 [Test worker] [75269680-79c3-4d9c-8e45-883a4263a2bb] INFO  c.a.a.interceptor.ApiLogInterceptor - POST /api/admin/users/1/reset-password - 200 (4 ms)
2025-05-06 22:48:25 [Test worker] [75269680-79c3-4d9c-8e45-883a4263a2bb] DEBUG c.a.a.interceptor.ApiLogInterceptor - API 상세 정보: {"requestId":"75269680-79c3-4d9c-8e45-883a4263a2bb","apiPath":"/api/admin/users/1/reset-password","method":"POST","status":200,"duration":4,"requestHeaders":{"Content-Type":"application/json;charset=UTF-8","Content-Length":"33"},"responseHeaders":{"X-Request-ID":"75269680-79c3-4d9c-8e45-883a4263a2bb"},"requestBody":null,"responseBody":null,"queryParams":null}
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AdminUserService(com.attendly.service.AdminUserService#0 bean#146)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#147)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#148)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#149)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#150)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AdminUserService(com.attendly.service.AdminUserService#0 bean#146)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#147)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#148)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#149)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:25 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#150)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserResponse name=child of com.attendly.service.AdminUserService#0 bean#146#153
2025-05-06 22:48:26 [Test worker] [845a7d88-9af1-42a5-816a-deacbcd29e28] DEBUG i.m.i.r.states.AnsweringState - Answering UserResponse(id=1, name=홍길동, email=hong@example.com, phoneNumber=010-1234-5678, role=LEADER, departmentId=1, departmentName=청년부, birthDate=null, createdAt=2025-05-06T22:48:25.982741, updatedAt=2025-05-06T22:48:25.982751) on AdminUserService(com.attendly.service.AdminUserService#0 bean#146).getUser(1)
2025-05-06 22:48:26 [Test worker] [845a7d88-9af1-42a5-816a-deacbcd29e28] INFO  c.a.a.interceptor.ApiLogInterceptor - GET /api/admin/users/1 - 200 (4 ms)
2025-05-06 22:48:26 [Test worker] [845a7d88-9af1-42a5-816a-deacbcd29e28] DEBUG c.a.a.interceptor.ApiLogInterceptor - API 상세 정보: {"requestId":"845a7d88-9af1-42a5-816a-deacbcd29e28","apiPath":"/api/admin/users/1","method":"GET","status":200,"duration":4,"requestHeaders":{},"responseHeaders":{"X-Request-ID":"845a7d88-9af1-42a5-816a-deacbcd29e28","Content-Type":"application/json","X-Content-Type-Options":"nosniff","X-XSS-Protection":"0","Cache-Control":"no-cache, no-store, max-age=0, must-revalidate","Pragma":"no-cache","Expires":"0","X-Frame-Options":"DENY"},"requestBody":null,"responseBody":null,"queryParams":null}
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['id']
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['name']
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['email']
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['phoneNumber']
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['role']
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AdminUserService(com.attendly.service.AdminUserService#0 bean#146)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#147)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#148)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#149)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#150)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AdminUserService(com.attendly.service.AdminUserService#0 bean#146)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#147)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#148)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#149)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#150)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserBulkCreateResponse name=child of com.attendly.service.AdminUserService#0 bean#146#154
2025-05-06 22:48:26 [Test worker] [65ac79f4-1002-4d29-b36c-c5174cbe47ce] DEBUG i.m.i.r.states.AnsweringState - Answering UserBulkCreateResponse(createdCount=2, failedCount=0, failedEmails=[]) on AdminUserService(com.attendly.service.AdminUserService#0 bean#146).bulkCreateUsers(UserBulkCreateRequest(users=[UserCreateRequest(name=홍길동, email=hong@example.com, phoneNumber=null, password=Password123!, role=LEADER, birthDate=null, departmentId=1), UserCreateRequest(name=김철수, email=kim@example.com, phoneNumber=null, password=Password123!, role=MEMBER, birthDate=null, departmentId=1)]))
2025-05-06 22:48:26 [Test worker] [65ac79f4-1002-4d29-b36c-c5174cbe47ce] INFO  c.a.a.interceptor.ApiLogInterceptor - POST /api/admin/users/bulk - 201 (11 ms)
2025-05-06 22:48:26 [Test worker] [65ac79f4-1002-4d29-b36c-c5174cbe47ce] DEBUG c.a.a.interceptor.ApiLogInterceptor - API 상세 정보: {"requestId":"65ac79f4-1002-4d29-b36c-c5174cbe47ce","apiPath":"/api/admin/users/bulk","method":"POST","status":201,"duration":11,"requestHeaders":{"Content-Type":"application/json;charset=UTF-8","Content-Length":"296"},"responseHeaders":{"X-Request-ID":"65ac79f4-1002-4d29-b36c-c5174cbe47ce","Content-Type":"application/json","X-Content-Type-Options":"nosniff","X-XSS-Protection":"0","Cache-Control":"no-cache, no-store, max-age=0, must-revalidate","Pragma":"no-cache","Expires":"0","X-Frame-Options":"DENY"},"requestBody":null,"responseBody":null,"queryParams":null}
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['createdCount']
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['failedCount']
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['failedEmails'].length()
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AdminUserService(com.attendly.service.AdminUserService#0 bean#146)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#147)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#148)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#149)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#150)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AdminUserService(com.attendly.service.AdminUserService#0 bean#146)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#147)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#148)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#149)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#150)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Page name=child of com.attendly.service.AdminUserService#0 bean#146#155
2025-05-06 22:48:26 [Test worker] [b526f8ef-0ca7-42b4-8cd5-4a8d96c52d5a] DEBUG i.m.i.r.states.AnsweringState - Answering Page 1 of 1 containing com.attendly.api.dto.UserResponse instances on AdminUserService(com.attendly.service.AdminUserService#0 bean#146).getAllUsers(Page request [number: 0, size 10, sort: id: DESC])
2025-05-06 22:48:26 [Test worker] [b526f8ef-0ca7-42b4-8cd5-4a8d96c52d5a] WARN  o.s.d.w.c.SpringDataJacksonConfiguration$PageModule$WarningLoggingModifier - Serializing PageImpl instances as-is is not supported, meaning that there is no guarantee about the stability of the resulting JSON structure!
	For a stable JSON structure, please use Spring Data's PagedModel (globally via @EnableSpringDataWebSupport(pageSerializationMode = VIA_DTO))
	or Spring HATEOAS and Spring Data's PagedResourcesAssembler as documented in https://docs.spring.io/spring-data/commons/reference/repositories/core-extensions.html#core.web.pageables.

2025-05-06 22:48:26 [Test worker] [b526f8ef-0ca7-42b4-8cd5-4a8d96c52d5a] INFO  c.a.a.interceptor.ApiLogInterceptor - GET /api/admin/users - 200 (9 ms)
2025-05-06 22:48:26 [Test worker] [b526f8ef-0ca7-42b4-8cd5-4a8d96c52d5a] DEBUG c.a.a.interceptor.ApiLogInterceptor - API 상세 정보: {"requestId":"b526f8ef-0ca7-42b4-8cd5-4a8d96c52d5a","apiPath":"/api/admin/users","method":"GET","status":200,"duration":9,"requestHeaders":{},"responseHeaders":{"X-Request-ID":"b526f8ef-0ca7-42b4-8cd5-4a8d96c52d5a","Content-Type":"application/json","X-Content-Type-Options":"nosniff","X-XSS-Protection":"0","Cache-Control":"no-cache, no-store, max-age=0, must-revalidate","Pragma":"no-cache","Expires":"0","X-Frame-Options":"DENY"},"requestBody":null,"responseBody":null,"queryParams":null}
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['content'].length()
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['content'][0]['id']
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['content'][0]['name']
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['content'][0]['email']
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['content'][0]['phoneNumber']
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['content'][1]['id']
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['content'][1]['name']
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['content'][1]['email']
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['content'][1]['phoneNumber']
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['totalElements']
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AdminUserService(com.attendly.service.AdminUserService#0 bean#146)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#147)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#148)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#149)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#150)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AdminUserService(com.attendly.service.AdminUserService#0 bean#146)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#147)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#148)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#149)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#150)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserResponse name=child of com.attendly.service.AdminUserService#0 bean#146#156
2025-05-06 22:48:26 [Test worker] [8717a021-2792-4c04-b289-42e4d8a5d9c2] DEBUG i.m.i.r.states.AnsweringState - Answering UserResponse(id=1, name=홍길동, email=hong@example.com, phoneNumber=010-1234-5678, role=LEADER, departmentId=1, departmentName=청년부, birthDate=null, createdAt=2025-05-06T22:48:26.109394, updatedAt=2025-05-06T22:48:26.109400) on AdminUserService(com.attendly.service.AdminUserService#0 bean#146).createUser(UserCreateRequest(name=홍길동, email=hong@example.com, phoneNumber=null, password=Password123!, role=LEADER, birthDate=null, departmentId=1))
2025-05-06 22:48:26 [Test worker] [8717a021-2792-4c04-b289-42e4d8a5d9c2] INFO  c.a.a.interceptor.ApiLogInterceptor - POST /api/admin/users - 201 (4 ms)
2025-05-06 22:48:26 [Test worker] [8717a021-2792-4c04-b289-42e4d8a5d9c2] DEBUG c.a.a.interceptor.ApiLogInterceptor - API 상세 정보: {"requestId":"8717a021-2792-4c04-b289-42e4d8a5d9c2","apiPath":"/api/admin/users","method":"POST","status":201,"duration":4,"requestHeaders":{"Content-Type":"application/json;charset=UTF-8","Content-Length":"142"},"responseHeaders":{"X-Request-ID":"8717a021-2792-4c04-b289-42e4d8a5d9c2","Content-Type":"application/json","X-Content-Type-Options":"nosniff","X-XSS-Protection":"0","Cache-Control":"no-cache, no-store, max-age=0, must-revalidate","Pragma":"no-cache","Expires":"0","X-Frame-Options":"DENY"},"requestBody":null,"responseBody":null,"queryParams":null}
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['id']
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['name']
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['email']
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['phoneNumber']
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['role']
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['departmentId']
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['departmentName']
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AdminUserService(com.attendly.service.AdminUserService#0 bean#146)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#147)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#148)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#149)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#150)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AdminUserService(com.attendly.service.AdminUserService#0 bean#146)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#147)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#148)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#149)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#150)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserResponse name=child of com.attendly.service.AdminUserService#0 bean#146#157
2025-05-06 22:48:26 [Test worker] [51ea9787-3297-41df-b907-7ca42f0ae7ff] DEBUG i.m.i.r.states.AnsweringState - Answering UserResponse(id=1, name=홍길동(수정), email=hong_updated@example.com, phoneNumber=010-1234-5678, role=ADMIN, departmentId=1, departmentName=청년부, birthDate=null, createdAt=2025-05-06T22:48:26.120993, updatedAt=2025-05-06T22:48:26.120998) on AdminUserService(com.attendly.service.AdminUserService#0 bean#146).updateUser(1, UserUpdateRequest(name=홍길동(수정), email=hong_updated@example.com, phoneNumber=null, birthDate=null, role=ADMIN, departmentId=null))
2025-05-06 22:48:26 [Test worker] [51ea9787-3297-41df-b907-7ca42f0ae7ff] INFO  c.a.a.interceptor.ApiLogInterceptor - PUT /api/admin/users/1 - 200 (3 ms)
2025-05-06 22:48:26 [Test worker] [51ea9787-3297-41df-b907-7ca42f0ae7ff] DEBUG c.a.a.interceptor.ApiLogInterceptor - API 상세 정보: {"requestId":"51ea9787-3297-41df-b907-7ca42f0ae7ff","apiPath":"/api/admin/users/1","method":"PUT","status":200,"duration":3,"requestHeaders":{"Content-Type":"application/json;charset=UTF-8","Content-Length":"134"},"responseHeaders":{"X-Request-ID":"51ea9787-3297-41df-b907-7ca42f0ae7ff","Content-Type":"application/json","X-Content-Type-Options":"nosniff","X-XSS-Protection":"0","Cache-Control":"no-cache, no-store, max-age=0, must-revalidate","Pragma":"no-cache","Expires":"0","X-Frame-Options":"DENY"},"requestBody":null,"responseBody":null,"queryParams":null}
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['id']
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['name']
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['email']
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['phoneNumber']
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG c.j.j.internal.path.CompiledPath - Evaluating path: $['role']
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AdminUserService(com.attendly.service.AdminUserService#0 bean#146)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#147)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#148)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#149)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#150)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AdminUserService(com.attendly.service.AdminUserService#0 bean#146)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [JwtTokenProvider(com.attendly.security.JwtTokenProvider#0 bean#147)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [AuthenticationManager(authenticationManager bean#148)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [UserDetailsService(org.springframework.security.core.userdetails.UserDetailsService#0 bean#149)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG io.mockk.impl.stub.CommonClearer - Clearing [SystemLogService(com.attendly.service.SystemLogService#0 bean#150)] mocks ClearOptions(answers=true, recordedCalls=true, childMocks=true, verificationMarks=true, exclusionRules=true)
2025-05-06 22:48:26 [Test worker] [d3eed5e4-7e2f-4203-81e8-f340a69bfb30] INFO  c.a.a.interceptor.ApiLogInterceptor -   - 200 (0 ms)
2025-05-06 22:48:26 [Test worker] [d3eed5e4-7e2f-4203-81e8-f340a69bfb30] DEBUG c.a.a.interceptor.ApiLogInterceptor - API 상세 정보: {"requestId":"d3eed5e4-7e2f-4203-81e8-f340a69bfb30","apiPath":"","method":"","status":200,"duration":0,"requestHeaders":{},"responseHeaders":{"X-Request-ID":"d3eed5e4-7e2f-4203-81e8-f340a69bfb30"},"requestBody":null,"responseBody":null,"queryParams":null}
2025-05-06 22:48:26 [Test worker] [6bdbab9c-c3fd-4856-a330-d09e7038e064] WARN  c.a.a.interceptor.ApiLogInterceptor - GET /api/users/999 - 404 (0 ms)
2025-05-06 22:48:26 [Test worker] [6bdbab9c-c3fd-4856-a330-d09e7038e064] DEBUG c.a.a.interceptor.ApiLogInterceptor - API 상세 정보: {"requestId":"6bdbab9c-c3fd-4856-a330-d09e7038e064","apiPath":"/api/users/999","method":"GET","status":404,"duration":0,"requestHeaders":{},"responseHeaders":{"Content-Type":"application/json","X-Request-ID":"6bdbab9c-c3fd-4856-a330-d09e7038e064"},"requestBody":null,"responseBody":"{\"error\":\"User not found\",\"status\":404}","queryParams":null}
2025-05-06 22:48:26 [Test worker] [f3454ac5-e964-4478-817b-dcf71bc6611d] INFO  c.a.a.interceptor.ApiLogInterceptor - POST /api/users - 201 (0 ms)
2025-05-06 22:48:26 [Test worker] [f3454ac5-e964-4478-817b-dcf71bc6611d] DEBUG c.a.a.interceptor.ApiLogInterceptor - API 상세 정보: {"requestId":"f3454ac5-e964-4478-817b-dcf71bc6611d","apiPath":"/api/users","method":"POST","status":201,"duration":0,"requestHeaders":{"Content-Type":"application/json"},"responseHeaders":{"Content-Type":"application/json","X-Request-ID":"f3454ac5-e964-4478-817b-dcf71bc6611d"},"requestBody":null,"responseBody":"{\"id\":1,\"name\":\"홍길동\",\"email\":\"hong@example.com\"}","queryParams":null}
2025-05-06 22:48:26 [Test worker] [b6c4ad67-dafd-48f1-9a0a-f2fd5507b4cb] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for ProceedingJoinPoint name=#158
2025-05-06 22:48:26 [Test worker] [b6c4ad67-dafd-48f1-9a0a-f2fd5507b4cb] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Signature name=#159
2025-05-06 22:48:26 [Test worker] [b6c4ad67-dafd-48f1-9a0a-f2fd5507b4cb] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Signature name=child of #158#160
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #158#161
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Signature(#159) on ProceedingJoinPoint(#158).getSignature()
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering com.example.TestClass on Signature(#159).getDeclaringTypeName()
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Signature(#159) on ProceedingJoinPoint(#158).getSignature()
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering testMethod on Signature(#159).getName()
2025-05-06 22:48:26 [Test worker] [09490712-2b5e-42b5-a6fc-c51ed30686f8] DEBUG com.attendly.aspect.MdcAspect - Async 메소드 실행: com.example.TestClass.testMethod (requestId: 09490712-2b5e-42b5-a6fc-c51ed30686f8)
2025-05-06 22:48:26 [Test worker] [09490712-2b5e-42b5-a6fc-c51ed30686f8] DEBUG i.m.i.r.states.AnsweringState - Throwing java.lang.RuntimeException: Test exception on ProceedingJoinPoint(#158).proceed()
2025-05-06 22:48:26 [Test worker] [09490712-2b5e-42b5-a6fc-c51ed30686f8] ERROR com.attendly.aspect.MdcAspect - Async 메소드 실행 중 오류 발생: com.example.TestClass.testMethod (requestId: 09490712-2b5e-42b5-a6fc-c51ed30686f8)
java.lang.RuntimeException: Test exception
	at com.attendly.aspect.MdcAspectTest.예외 발생 시에도 MDC에서 requestId를 제거한다(MdcAspectTest.kt:75)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)
	at java.base/java.lang.reflect.Method.invoke(Unknown Source)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:767)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$8(TestMethodTestDescriptor.java:217)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:156)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(Unknown Source)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(Unknown Source)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:124)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:99)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:94)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)
	at java.base/java.lang.reflect.Method.invoke(Unknown Source)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:92)
	at jdk.proxy1/jdk.proxy1.$Proxy4.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:200)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:132)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:103)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:63)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:121)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
2025-05-06 22:48:26 [Test worker] [09490712-2b5e-42b5-a6fc-c51ed30686f8] DEBUG com.attendly.aspect.MdcAspect - Async 메소드 실행 완료: com.example.TestClass.testMethod (requestId: 09490712-2b5e-42b5-a6fc-c51ed30686f8)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for ProceedingJoinPoint name=#162
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Signature name=#163
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Signature name=child of #162#164
2025-05-06 22:48:26 [Test worker] [original-request-id] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #162#165
2025-05-06 22:48:26 [Test worker] [original-request-id] DEBUG i.m.i.r.states.AnsweringState - Answering Signature(#163) on ProceedingJoinPoint(#162).getSignature()
2025-05-06 22:48:26 [Test worker] [original-request-id] DEBUG i.m.i.r.states.AnsweringState - Answering com.example.TestClass on Signature(#163).getDeclaringTypeName()
2025-05-06 22:48:26 [Test worker] [original-request-id] DEBUG i.m.i.r.states.AnsweringState - Answering Signature(#163) on ProceedingJoinPoint(#162).getSignature()
2025-05-06 22:48:26 [Test worker] [original-request-id] DEBUG i.m.i.r.states.AnsweringState - Answering testMethod on Signature(#163).getName()
2025-05-06 22:48:26 [Test worker] [2050795d-9f97-496b-bc82-5cf90f2fd7b4] DEBUG com.attendly.aspect.MdcAspect - Async 메소드 실행: com.example.TestClass.testMethod (requestId: 2050795d-9f97-496b-bc82-5cf90f2fd7b4)
2025-05-06 22:48:26 [Test worker] [2050795d-9f97-496b-bc82-5cf90f2fd7b4] DEBUG i.m.i.r.states.AnsweringState - Answering test result on ProceedingJoinPoint(#162).proceed()
2025-05-06 22:48:26 [Test worker] [2050795d-9f97-496b-bc82-5cf90f2fd7b4] DEBUG com.attendly.aspect.MdcAspect - Async 메소드 실행 완료: com.example.TestClass.testMethod (requestId: 2050795d-9f97-496b-bc82-5cf90f2fd7b4)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for ProceedingJoinPoint name=#166
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Signature name=#167
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Signature name=child of #166#168
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #166#169
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Signature(#167) on ProceedingJoinPoint(#166).getSignature()
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering com.example.TestClass on Signature(#167).getDeclaringTypeName()
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Signature(#167) on ProceedingJoinPoint(#166).getSignature()
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering testMethod on Signature(#167).getName()
2025-05-06 22:48:26 [Test worker] [95271d3e-7eb2-4302-bc19-d5226156081f] DEBUG com.attendly.aspect.MdcAspect - Scheduled 메소드 실행: com.example.TestClass.testMethod (requestId: 95271d3e-7eb2-4302-bc19-d5226156081f)
2025-05-06 22:48:26 [Test worker] [95271d3e-7eb2-4302-bc19-d5226156081f] DEBUG i.m.i.r.states.AnsweringState - Answering test result on ProceedingJoinPoint(#166).proceed()
2025-05-06 22:48:26 [Test worker] [95271d3e-7eb2-4302-bc19-d5226156081f] DEBUG com.attendly.aspect.MdcAspect - Scheduled 메소드 실행 완료: com.example.TestClass.testMethod (requestId: 95271d3e-7eb2-4302-bc19-d5226156081f)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for ProceedingJoinPoint name=#170
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Signature name=#171
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Signature name=child of #170#172
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #170#173
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Signature(#171) on ProceedingJoinPoint(#170).getSignature()
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering com.example.TestClass on Signature(#171).getDeclaringTypeName()
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Signature(#171) on ProceedingJoinPoint(#170).getSignature()
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering testMethod on Signature(#171).getName()
2025-05-06 22:48:26 [Test worker] [99e89a53-fc80-4dc3-9c82-b2c8fc0bd642] DEBUG com.attendly.aspect.MdcAspect - Async 메소드 실행: com.example.TestClass.testMethod (requestId: 99e89a53-fc80-4dc3-9c82-b2c8fc0bd642)
2025-05-06 22:48:26 [Test worker] [99e89a53-fc80-4dc3-9c82-b2c8fc0bd642] DEBUG i.m.i.r.states.AnsweringState - Answering test result on ProceedingJoinPoint(#170).proceed()
2025-05-06 22:48:26 [Test worker] [99e89a53-fc80-4dc3-9c82-b2c8fc0bd642] DEBUG com.attendly.aspect.MdcAspect - Async 메소드 실행 완료: com.example.TestClass.testMethod (requestId: 99e89a53-fc80-4dc3-9c82-b2c8fc0bd642)
2025-05-06 22:48:26 [Test worker] [NONE] WARN  o.s.b.t.j.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer - 

Found multiple occurrences of org.json.JSONObject on the class path:

	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/org.json/json/20230618/1ae16df7d556d02713e241086f878399e99260d6/json-20230618.jar!/org/json/JSONObject.class
	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/com.vaadin.external.google/android-json/0.0.20131108.vaadin1/fa26d351fe62a6a17f5cda1287c1c6110dec413f/android-json-0.0.20131108.vaadin1.jar!/org/json/JSONObject.class

You may wish to exclude one of them to ensure predictable runtime behavior

2025-05-06 22:48:26 [Test worker] [NONE] INFO  c.a.d.r.AttendanceRepositoryCustomTest - Starting AttendanceRepositoryCustomTest using Java 21.0.6 with PID 47231 (started by user in /Users/user/study/attendly-api)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG c.a.d.r.AttendanceRepositoryCustomTest - Running with Spring Boot v3.4.5, Spring v6.2.6
2025-05-06 22:48:26 [Test worker] [NONE] INFO  c.a.d.r.AttendanceRepositoryCustomTest - The following 1 profile is active: "test"
2025-05-06 22:48:26 [Test worker] [NONE] WARN  org.hibernate.orm.deprecation - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists attendance cascade 
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists batch_job_logs cascade 
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists batch_jobs cascade 
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists department cascade 
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_group cascade 
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_leader_history cascade 
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_member_history cascade 
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists leader_delegation cascade 
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists system_log cascade 
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists system_settings cascade 
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade 
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists village cascade 
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists village_leader cascade 
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table attendance (
        qt_count integer not null,
        week_start date not null,
        created_at timestamp(6) not null,
        created_by bigint not null,
        gbs_id bigint not null,
        id bigint generated by default as identity,
        member_id bigint not null,
        updated_at timestamp(6) not null,
        ministry enum ('A','B','C') not null,
        worship enum ('O','X') not null,
        primary key (id)
    )
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table batch_job_logs (
        batch_job_id bigint not null,
        id bigint generated by default as identity,
        timestamp timestamp(6) not null,
        level varchar(10) not null,
        message TEXT not null,
        primary key (id)
    )
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table batch_jobs (
        created_at timestamp(6) not null,
        finished_at timestamp(6),
        id bigint generated by default as identity,
        schedule_time timestamp(6),
        started_at timestamp(6),
        error_message TEXT,
        parameters TEXT,
        job_type enum ('DATA_BACKUP','GBS_REORGANIZATION','REMINDER','STATISTICS_GENERATION') not null,
        status enum ('CANCELLED','COMPLETED','FAILED','QUEUED','RUNNING') not null,
        primary key (id)
    )
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table department (
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        name varchar(50) not null,
        primary key (id)
    )
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table gbs_group (
        term_end_dt date not null,
        term_start_dt date not null,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        village_id bigint not null,
        name varchar(50) not null,
        primary key (id)
    )
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table gbs_leader_history (
        end_dt date,
        start_dt date not null,
        created_at timestamp(6) not null,
        gbs_id bigint not null,
        id bigint generated by default as identity,
        leader_id bigint not null,
        updated_at timestamp(6) not null,
        primary key (id)
    )
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table gbs_member_history (
        end_dt date,
        start_dt date not null,
        created_at timestamp(6) not null,
        gbs_id bigint not null,
        id bigint generated by default as identity,
        member_id bigint not null,
        updated_at timestamp(6) not null,
        primary key (id)
    )
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table leader_delegation (
        end_dt date,
        start_dt date not null,
        created_at timestamp(6) not null,
        delegatee_id bigint not null,
        delegator_id bigint not null,
        gbs_id bigint not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        primary key (id)
    )
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table system_log (
        id bigint generated by default as identity,
        timestamp timestamp(6) not null,
        user_id bigint,
        level varchar(10) not null,
        category varchar(20) not null,
        ip_address varchar(39),
        server_instance varchar(50),
        message varchar(1000) not null,
        additional_info TEXT,
        user_agent varchar(255),
        primary key (id)
    )
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table system_settings (
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        setting_key varchar(50) not null unique,
        description varchar(200),
        setting_value varchar(1000) not null,
        primary key (id)
    )
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table users (
        birth_date date,
        created_at timestamp(6) not null,
        department_id bigint not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        phone_number varchar(20),
        name varchar(50) not null,
        email varchar(100) unique,
        password varchar(100),
        role enum ('ADMIN','LEADER','MEMBER','MINISTER','VILLAGE_LEADER') not null,
        primary key (id)
    )
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table village (
        created_at timestamp(6) not null,
        department_id bigint not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        name varchar(50) not null,
        primary key (id)
    )
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table village_leader (
        end_dt date,
        start_dt date not null,
        created_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        user_id bigint not null,
        village_id bigint not null,
        primary key (user_id, village_id)
    )
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists attendance 
       add constraint FKg7dtnois2g6ghgu4bl5gym92u 
       foreign key (created_by) 
       references users
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists attendance 
       add constraint FKjn82a3qvj1ho9ajauog7v0f12 
       foreign key (gbs_id) 
       references gbs_group
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists attendance 
       add constraint FK8f5fy874njy44gc8df63m187j 
       foreign key (member_id) 
       references users
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists batch_job_logs 
       add constraint FKsoyil2u66we091nme35nm6ste 
       foreign key (batch_job_id) 
       references batch_jobs
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_group 
       add constraint FKqvo83ldaqku2vayubiutcly4e 
       foreign key (village_id) 
       references village
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_leader_history 
       add constraint FKjls4dwfsilybq2sa0x35ml3f9 
       foreign key (gbs_id) 
       references gbs_group
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_leader_history 
       add constraint FK810qej66ysfs5j8cqtqbtsr1h 
       foreign key (leader_id) 
       references users
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_member_history 
       add constraint FK21l70t0cajgfj6rehvc9s21tc 
       foreign key (gbs_id) 
       references gbs_group
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_member_history 
       add constraint FKasr4qspnvhydc2xbei8rlysxy 
       foreign key (member_id) 
       references users
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists leader_delegation 
       add constraint FKs9xr3vr71pux3puk06pwiivfl 
       foreign key (delegatee_id) 
       references users
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists leader_delegation 
       add constraint FKqg0jdq2i5pfckjlqr5xfhkguc 
       foreign key (delegator_id) 
       references users
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists leader_delegation 
       add constraint FKjr2i1o6vb363gnkm6qahsaji6 
       foreign key (gbs_id) 
       references gbs_group
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint FKfi832e3qv89fq376fuh8920y4 
       foreign key (department_id) 
       references department
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists village 
       add constraint FKmp8tdn2nuthupcstb37lgifs4 
       foreign key (department_id) 
       references department
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists village_leader 
       add constraint FK446snb5j15qqkonffm6tyepm0 
       foreign key (user_id) 
       references users
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists village_leader 
       add constraint FK9rpuj47r5r477bys6jmfthoeo 
       foreign key (village_id) 
       references village
2025-05-06 22:48:26 [Test worker] [NONE] INFO  c.a.d.r.AttendanceRepositoryCustomTest - Started AttendanceRepositoryCustomTest in 0.244 seconds (process running for 7.511)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        attendance
        (created_at, created_by, gbs_id, member_id, ministry, qt_count, updated_at, week_start, worship, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        attendance
        (created_at, created_by, gbs_id, member_id, ministry, qt_count, updated_at, week_start, worship, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        attendance
        (created_at, created_by, gbs_id, member_id, ministry, qt_count, updated_at, week_start, worship, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.gbs_id,
        gg1_0.id,
        gg1_0.created_at,
        gg1_0.name,
        gg1_0.term_end_dt,
        gg1_0.term_start_dt,
        gg1_0.updated_at,
        gg1_0.village_id,
        a1_0.member_id,
        m1_0.id,
        m1_0.birth_date,
        m1_0.created_at,
        m1_0.department_id,
        m1_0.email,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.role,
        m1_0.updated_at,
        a1_0.ministry,
        a1_0.qt_count,
        a1_0.updated_at,
        a1_0.week_start,
        a1_0.worship 
    from
        attendance a1_0 
    join
        users m1_0 
            on m1_0.id=a1_0.member_id 
    join
        gbs_group gg1_0 
            on gg1_0.id=a1_0.gbs_id 
    where
        gg1_0.village_id=? 
        and a1_0.week_start=?
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        attendance
        (created_at, created_by, gbs_id, member_id, ministry, qt_count, updated_at, week_start, worship, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        attendance
        (created_at, created_by, gbs_id, member_id, ministry, qt_count, updated_at, week_start, worship, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        attendance
        (created_at, created_by, gbs_id, member_id, ministry, qt_count, updated_at, week_start, worship, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        attendance a1_0 
    where
        a1_0.gbs_id in (?, ?) 
        and a1_0.week_start=? 
        and a1_0.worship=?
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        attendance
        (created_at, created_by, gbs_id, member_id, ministry, qt_count, updated_at, week_start, worship, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        attendance
        (created_at, created_by, gbs_id, member_id, ministry, qt_count, updated_at, week_start, worship, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        attendance
        (created_at, created_by, gbs_id, member_id, ministry, qt_count, updated_at, week_start, worship, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.gbs_id,
        gg1_0.id,
        gg1_0.created_at,
        gg1_0.name,
        gg1_0.term_end_dt,
        gg1_0.term_start_dt,
        gg1_0.updated_at,
        gg1_0.village_id,
        a1_0.member_id,
        m1_0.id,
        m1_0.birth_date,
        m1_0.created_at,
        m1_0.department_id,
        m1_0.email,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.role,
        m1_0.updated_at,
        a1_0.ministry,
        a1_0.qt_count,
        a1_0.updated_at,
        a1_0.week_start,
        a1_0.worship 
    from
        attendance a1_0 
    join
        users m1_0 
            on m1_0.id=a1_0.member_id 
    join
        gbs_group gg1_0 
            on gg1_0.id=a1_0.gbs_id 
    where
        gg1_0.village_id=? 
        and a1_0.week_start=?
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        attendance
        (created_at, created_by, gbs_id, member_id, ministry, qt_count, updated_at, week_start, worship, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        attendance
        (created_at, created_by, gbs_id, member_id, ministry, qt_count, updated_at, week_start, worship, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        attendance
        (created_at, created_by, gbs_id, member_id, ministry, qt_count, updated_at, week_start, worship, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.gbs_id,
        a1_0.member_id,
        m1_0.id,
        m1_0.birth_date,
        m1_0.created_at,
        m1_0.department_id,
        m1_0.email,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.role,
        m1_0.updated_at,
        a1_0.ministry,
        a1_0.qt_count,
        a1_0.updated_at,
        a1_0.week_start,
        a1_0.worship 
    from
        attendance a1_0 
    join
        users m1_0 
            on m1_0.id=a1_0.member_id 
    where
        a1_0.gbs_id=? 
        and a1_0.week_start=?
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        attendance
        (created_at, created_by, gbs_id, member_id, ministry, qt_count, updated_at, week_start, worship, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        attendance
        (created_at, created_by, gbs_id, member_id, ministry, qt_count, updated_at, week_start, worship, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        attendance
        (created_at, created_by, gbs_id, member_id, ministry, qt_count, updated_at, week_start, worship, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.gbs_id,
        gg1_0.id,
        gg1_0.created_at,
        gg1_0.name,
        gg1_0.term_end_dt,
        gg1_0.term_start_dt,
        gg1_0.updated_at,
        gg1_0.village_id,
        a1_0.member_id,
        m1_0.id,
        m1_0.birth_date,
        m1_0.created_at,
        m1_0.department_id,
        m1_0.email,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.role,
        m1_0.updated_at,
        a1_0.ministry,
        a1_0.qt_count,
        a1_0.updated_at,
        a1_0.week_start,
        a1_0.worship 
    from
        attendance a1_0 
    join
        users m1_0 
            on m1_0.id=a1_0.member_id 
    join
        gbs_group gg1_0 
            on gg1_0.id=a1_0.gbs_id 
    where
        gg1_0.village_id=? 
        and a1_0.week_start=?
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        attendance
        (created_at, created_by, gbs_id, member_id, ministry, qt_count, updated_at, week_start, worship, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.gbs_id,
        a1_0.member_id,
        a1_0.ministry,
        a1_0.qt_count,
        a1_0.updated_at,
        a1_0.week_start,
        a1_0.worship 
    from
        attendance a1_0 
    where
        a1_0.gbs_id=? 
        and a1_0.week_start=?
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        attendance
        (created_at, created_by, gbs_id, member_id, ministry, qt_count, updated_at, week_start, worship, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.gbs_id,
        a1_0.member_id,
        a1_0.ministry,
        a1_0.qt_count,
        a1_0.updated_at,
        a1_0.week_start,
        a1_0.worship 
    from
        attendance a1_0 
    where
        a1_0.member_id=? 
        and a1_0.week_start between ? and ?
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        attendance
        (created_at, created_by, gbs_id, member_id, ministry, qt_count, updated_at, week_start, worship, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.gbs_id,
        a1_0.member_id,
        a1_0.ministry,
        a1_0.qt_count,
        a1_0.updated_at,
        a1_0.week_start,
        a1_0.worship 
    from
        attendance a1_0 
    where
        a1_0.gbs_id=? 
        and a1_0.week_start=?
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        attendance
        (created_at, created_by, gbs_id, member_id, ministry, qt_count, updated_at, week_start, worship, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.gbs_id,
        a1_0.member_id,
        a1_0.ministry,
        a1_0.qt_count,
        a1_0.updated_at,
        a1_0.week_start,
        a1_0.worship 
    from
        attendance a1_0 
    where
        a1_0.member_id=? 
        and a1_0.week_start between ? and ?
2025-05-06 22:48:26 [Test worker] [NONE] WARN  o.s.b.t.j.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer - 

Found multiple occurrences of org.json.JSONObject on the class path:

	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/org.json/json/20230618/1ae16df7d556d02713e241086f878399e99260d6/json-20230618.jar!/org/json/JSONObject.class
	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/com.vaadin.external.google/android-json/0.0.20131108.vaadin1/fa26d351fe62a6a17f5cda1287c1c6110dec413f/android-json-0.0.20131108.vaadin1.jar!/org/json/JSONObject.class

You may wish to exclude one of them to ensure predictable runtime behavior

2025-05-06 22:48:26 [Test worker] [NONE] INFO  c.a.d.r.GbsGroupRepositoryCustomTest - Starting GbsGroupRepositoryCustomTest using Java 21.0.6 with PID 47231 (started by user in /Users/user/study/attendly-api)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG c.a.d.r.GbsGroupRepositoryCustomTest - Running with Spring Boot v3.4.5, Spring v6.2.6
2025-05-06 22:48:26 [Test worker] [NONE] INFO  c.a.d.r.GbsGroupRepositoryCustomTest - The following 1 profile is active: "test"
2025-05-06 22:48:26 [Test worker] [NONE] WARN  org.hibernate.orm.deprecation - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists attendance cascade 
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists batch_job_logs cascade 
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists batch_jobs cascade 
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists department cascade 
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_group cascade 
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_leader_history cascade 
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_member_history cascade 
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists leader_delegation cascade 
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists system_log cascade 
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists system_settings cascade 
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade 
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists village cascade 
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists village_leader cascade 
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table attendance (
        qt_count integer not null,
        week_start date not null,
        created_at timestamp(6) not null,
        created_by bigint not null,
        gbs_id bigint not null,
        id bigint generated by default as identity,
        member_id bigint not null,
        updated_at timestamp(6) not null,
        ministry enum ('A','B','C') not null,
        worship enum ('O','X') not null,
        primary key (id)
    )
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table batch_job_logs (
        batch_job_id bigint not null,
        id bigint generated by default as identity,
        timestamp timestamp(6) not null,
        level varchar(10) not null,
        message TEXT not null,
        primary key (id)
    )
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table batch_jobs (
        created_at timestamp(6) not null,
        finished_at timestamp(6),
        id bigint generated by default as identity,
        schedule_time timestamp(6),
        started_at timestamp(6),
        error_message TEXT,
        parameters TEXT,
        job_type enum ('DATA_BACKUP','GBS_REORGANIZATION','REMINDER','STATISTICS_GENERATION') not null,
        status enum ('CANCELLED','COMPLETED','FAILED','QUEUED','RUNNING') not null,
        primary key (id)
    )
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table department (
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        name varchar(50) not null,
        primary key (id)
    )
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table gbs_group (
        term_end_dt date not null,
        term_start_dt date not null,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        village_id bigint not null,
        name varchar(50) not null,
        primary key (id)
    )
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table gbs_leader_history (
        end_dt date,
        start_dt date not null,
        created_at timestamp(6) not null,
        gbs_id bigint not null,
        id bigint generated by default as identity,
        leader_id bigint not null,
        updated_at timestamp(6) not null,
        primary key (id)
    )
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table gbs_member_history (
        end_dt date,
        start_dt date not null,
        created_at timestamp(6) not null,
        gbs_id bigint not null,
        id bigint generated by default as identity,
        member_id bigint not null,
        updated_at timestamp(6) not null,
        primary key (id)
    )
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table leader_delegation (
        end_dt date,
        start_dt date not null,
        created_at timestamp(6) not null,
        delegatee_id bigint not null,
        delegator_id bigint not null,
        gbs_id bigint not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        primary key (id)
    )
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table system_log (
        id bigint generated by default as identity,
        timestamp timestamp(6) not null,
        user_id bigint,
        level varchar(10) not null,
        category varchar(20) not null,
        ip_address varchar(39),
        server_instance varchar(50),
        message varchar(1000) not null,
        additional_info TEXT,
        user_agent varchar(255),
        primary key (id)
    )
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table system_settings (
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        setting_key varchar(50) not null unique,
        description varchar(200),
        setting_value varchar(1000) not null,
        primary key (id)
    )
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table users (
        birth_date date,
        created_at timestamp(6) not null,
        department_id bigint not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        phone_number varchar(20),
        name varchar(50) not null,
        email varchar(100) unique,
        password varchar(100),
        role enum ('ADMIN','LEADER','MEMBER','MINISTER','VILLAGE_LEADER') not null,
        primary key (id)
    )
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table village (
        created_at timestamp(6) not null,
        department_id bigint not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        name varchar(50) not null,
        primary key (id)
    )
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table village_leader (
        end_dt date,
        start_dt date not null,
        created_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        user_id bigint not null,
        village_id bigint not null,
        primary key (user_id, village_id)
    )
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists attendance 
       add constraint FKg7dtnois2g6ghgu4bl5gym92u 
       foreign key (created_by) 
       references users
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists attendance 
       add constraint FKjn82a3qvj1ho9ajauog7v0f12 
       foreign key (gbs_id) 
       references gbs_group
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists attendance 
       add constraint FK8f5fy874njy44gc8df63m187j 
       foreign key (member_id) 
       references users
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists batch_job_logs 
       add constraint FKsoyil2u66we091nme35nm6ste 
       foreign key (batch_job_id) 
       references batch_jobs
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_group 
       add constraint FKqvo83ldaqku2vayubiutcly4e 
       foreign key (village_id) 
       references village
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_leader_history 
       add constraint FKjls4dwfsilybq2sa0x35ml3f9 
       foreign key (gbs_id) 
       references gbs_group
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_leader_history 
       add constraint FK810qej66ysfs5j8cqtqbtsr1h 
       foreign key (leader_id) 
       references users
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_member_history 
       add constraint FK21l70t0cajgfj6rehvc9s21tc 
       foreign key (gbs_id) 
       references gbs_group
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_member_history 
       add constraint FKasr4qspnvhydc2xbei8rlysxy 
       foreign key (member_id) 
       references users
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists leader_delegation 
       add constraint FKs9xr3vr71pux3puk06pwiivfl 
       foreign key (delegatee_id) 
       references users
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists leader_delegation 
       add constraint FKqg0jdq2i5pfckjlqr5xfhkguc 
       foreign key (delegator_id) 
       references users
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists leader_delegation 
       add constraint FKjr2i1o6vb363gnkm6qahsaji6 
       foreign key (gbs_id) 
       references gbs_group
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint FKfi832e3qv89fq376fuh8920y4 
       foreign key (department_id) 
       references department
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists village 
       add constraint FKmp8tdn2nuthupcstb37lgifs4 
       foreign key (department_id) 
       references department
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists village_leader 
       add constraint FK446snb5j15qqkonffm6tyepm0 
       foreign key (user_id) 
       references users
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists village_leader 
       add constraint FK9rpuj47r5r477bys6jmfthoeo 
       foreign key (village_id) 
       references village
2025-05-06 22:48:26 [Test worker] [NONE] INFO  c.a.d.r.GbsGroupRepositoryCustomTest - Started GbsGroupRepositoryCustomTest in 0.181 seconds (process running for 7.887)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        gg1_0.id,
        gg1_0.created_at,
        gg1_0.name,
        gg1_0.term_end_dt,
        gg1_0.term_start_dt,
        gg1_0.updated_at,
        gg1_0.village_id,
        v1_0.id,
        v1_0.created_at,
        v1_0.department_id,
        v1_0.name,
        v1_0.updated_at 
    from
        gbs_group gg1_0 
    join
        village v1_0 
            on v1_0.id=gg1_0.village_id 
    where
        v1_0.id=? 
        and gg1_0.term_start_dt<=? 
        and gg1_0.term_end_dt>=?
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        gg1_0.id,
        gg1_0.created_at,
        gg1_0.name,
        gg1_0.term_end_dt,
        gg1_0.term_start_dt,
        gg1_0.updated_at,
        gg1_0.village_id,
        v1_0.id,
        v1_0.created_at,
        v1_0.department_id,
        v1_0.name,
        v1_0.updated_at 
    from
        gbs_group gg1_0 
    join
        village v1_0 
            on v1_0.id=gg1_0.village_id 
    where
        v1_0.id=? 
        and gg1_0.term_start_dt<=? 
        and gg1_0.term_end_dt>=?
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        gg1_0.id,
        gg1_0.created_at,
        gg1_0.name,
        gg1_0.term_end_dt,
        gg1_0.term_start_dt,
        gg1_0.updated_at,
        gg1_0.village_id 
    from
        gbs_group gg1_0 
    where
        gg1_0.village_id=?
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_leader_history
        (created_at, end_dt, gbs_id, leader_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_leader_history
        (created_at, end_dt, gbs_id, leader_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        l1_0.id,
        l1_0.birth_date,
        l1_0.created_at,
        l1_0.department_id,
        l1_0.email,
        l1_0.name,
        l1_0.password,
        l1_0.phone_number,
        l1_0.role,
        l1_0.updated_at 
    from
        gbs_leader_history glh1_0 
    join
        users l1_0 
            on l1_0.id=glh1_0.leader_id 
    where
        glh1_0.gbs_id=? 
        and glh1_0.end_dt is null
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.name,
        d1_0.updated_at 
    from
        department d1_0 
    where
        d1_0.id=?
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        vl1_0.user_id,
        vl1_0.village_id,
        vl1_0.created_at,
        vl1_0.end_dt,
        vl1_0.start_dt,
        vl1_0.updated_at 
    from
        village_leader vl1_0 
    where
        vl1_0.user_id=?
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_leader_history
        (created_at, end_dt, gbs_id, leader_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_leader_history
        (created_at, end_dt, gbs_id, leader_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        glh1_0.id,
        glh1_0.created_at,
        glh1_0.end_dt,
        glh1_0.gbs_id,
        glh1_0.leader_id,
        glh1_0.start_dt,
        glh1_0.updated_at 
    from
        gbs_leader_history glh1_0 
    where
        glh1_0.gbs_id=? 
        and glh1_0.leader_id=? 
        and glh1_0.end_dt is null
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        gg1_0.id,
        gg1_0.created_at,
        gg1_0.name,
        gg1_0.term_end_dt,
        gg1_0.term_start_dt,
        gg1_0.updated_at,
        gg1_0.village_id 
    from
        gbs_group gg1_0 
    where
        gg1_0.id=?
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        v1_0.id,
        v1_0.created_at,
        v1_0.department_id,
        v1_0.name,
        v1_0.updated_at,
        vl1_0.user_id,
        vl1_0.village_id,
        vl1_0.created_at,
        vl1_0.end_dt,
        vl1_0.start_dt,
        vl1_0.updated_at 
    from
        village v1_0 
    left join
        village_leader vl1_0 
            on v1_0.id=vl1_0.village_id 
    where
        v1_0.id=?
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.name,
        d1_0.updated_at 
    from
        department d1_0 
    where
        d1_0.id=?
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.birth_date,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.name,
        u1_0.password,
        u1_0.phone_number,
        u1_0.role,
        u1_0.updated_at,
        vl1_0.user_id,
        vl1_0.village_id,
        vl1_0.created_at,
        vl1_0.end_dt,
        vl1_0.start_dt,
        vl1_0.updated_at 
    from
        users u1_0 
    left join
        village_leader vl1_0 
            on u1_0.id=vl1_0.user_id 
    where
        u1_0.id=?
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_leader_history
        (created_at, end_dt, gbs_id, leader_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_leader_history
        (created_at, end_dt, gbs_id, leader_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        glh1_0.id,
        glh1_0.created_at,
        glh1_0.end_dt,
        glh1_0.gbs_id,
        glh1_0.leader_id,
        glh1_0.start_dt,
        glh1_0.updated_at 
    from
        gbs_leader_history glh1_0 
    where
        glh1_0.gbs_id=? 
        and glh1_0.leader_id=? 
        and glh1_0.end_dt is null
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        gg1_0.id,
        gg1_0.created_at,
        gg1_0.name,
        gg1_0.term_end_dt,
        gg1_0.term_start_dt,
        gg1_0.updated_at,
        gg1_0.village_id 
    from
        gbs_group gg1_0 
    where
        gg1_0.id=?
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        v1_0.id,
        v1_0.created_at,
        v1_0.department_id,
        v1_0.name,
        v1_0.updated_at,
        vl1_0.user_id,
        vl1_0.village_id,
        vl1_0.created_at,
        vl1_0.end_dt,
        vl1_0.start_dt,
        vl1_0.updated_at 
    from
        village v1_0 
    left join
        village_leader vl1_0 
            on v1_0.id=vl1_0.village_id 
    where
        v1_0.id=?
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.created_at,
        d1_0.name,
        d1_0.updated_at 
    from
        department d1_0 
    where
        d1_0.id=?
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.birth_date,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.name,
        u1_0.password,
        u1_0.phone_number,
        u1_0.role,
        u1_0.updated_at,
        vl1_0.user_id,
        vl1_0.village_id,
        vl1_0.created_at,
        vl1_0.end_dt,
        vl1_0.start_dt,
        vl1_0.updated_at 
    from
        users u1_0 
    left join
        village_leader vl1_0 
            on u1_0.id=vl1_0.user_id 
    where
        u1_0.id=?
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_member_history
        (created_at, end_dt, gbs_id, member_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_member_history
        (created_at, end_dt, gbs_id, member_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:26 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        count(gmh1_0.id) 
    from
        gbs_member_history gmh1_0 
    where
        gmh1_0.gbs_id=? 
        and gmh1_0.start_dt<=? 
        and (
            gmh1_0.end_dt is null 
            or gmh1_0.end_dt>=?
        )
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_member_history
        (created_at, end_dt, gbs_id, member_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_member_history
        (created_at, end_dt, gbs_id, member_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        gmh1_0.id,
        gmh1_0.created_at,
        gmh1_0.end_dt,
        gmh1_0.gbs_id,
        gmh1_0.member_id,
        m1_0.id,
        m1_0.birth_date,
        m1_0.created_at,
        m1_0.department_id,
        m1_0.email,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.role,
        m1_0.updated_at,
        gmh1_0.start_dt,
        gmh1_0.updated_at 
    from
        gbs_member_history gmh1_0 
    join
        users m1_0 
            on m1_0.id=gmh1_0.member_id 
    where
        gmh1_0.gbs_id=? 
        and gmh1_0.start_dt<=? 
        and (
            gmh1_0.end_dt is null 
            or gmh1_0.end_dt>=?
        )
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_member_history
        (created_at, end_dt, gbs_id, member_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_member_history
        (created_at, end_dt, gbs_id, member_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_member_history
        (created_at, end_dt, gbs_id, member_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        gmh1_0.id,
        gmh1_0.created_at,
        gmh1_0.end_dt,
        gmh1_0.gbs_id,
        gmh1_0.member_id,
        m1_0.id,
        m1_0.birth_date,
        m1_0.created_at,
        m1_0.department_id,
        m1_0.email,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.role,
        m1_0.updated_at,
        gmh1_0.start_dt,
        gmh1_0.updated_at 
    from
        gbs_member_history gmh1_0 
    join
        users m1_0 
            on m1_0.id=gmh1_0.member_id 
    where
        gmh1_0.gbs_id=? 
        and gmh1_0.start_dt<=? 
        and (
            gmh1_0.end_dt is null 
            or gmh1_0.end_dt>=?
        )
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        leader_delegation
        (created_at, delegatee_id, delegator_id, end_dt, gbs_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        ld1_0.id,
        ld1_0.created_at,
        ld1_0.delegatee_id,
        ld1_0.delegator_id,
        ld1_0.end_dt,
        ld1_0.gbs_id,
        ld1_0.start_dt,
        ld1_0.updated_at 
    from
        leader_delegation ld1_0 
    where
        ld1_0.delegatee_id=? 
        and ld1_0.start_dt<=? 
        and (
            ld1_0.end_dt is null 
            or ld1_0.end_dt>=?
        )
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        leader_delegation
        (created_at, delegatee_id, delegator_id, end_dt, gbs_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        ld1_0.id,
        ld1_0.created_at,
        ld1_0.delegatee_id,
        ld1_0.delegator_id,
        ld1_0.end_dt,
        ld1_0.gbs_id,
        ld1_0.start_dt,
        ld1_0.updated_at 
    from
        leader_delegation ld1_0 
    where
        ld1_0.delegator_id=? 
        and ld1_0.start_dt<=? 
        and (
            ld1_0.end_dt is null 
            or ld1_0.end_dt>=?
        )
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        leader_delegation
        (created_at, delegatee_id, delegator_id, end_dt, gbs_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        ld1_0.id,
        ld1_0.created_at,
        ld1_0.delegatee_id,
        ld1_0.delegator_id,
        ld1_0.end_dt,
        ld1_0.gbs_id,
        ld1_0.start_dt,
        ld1_0.updated_at 
    from
        leader_delegation ld1_0 
    where
        ld1_0.delegatee_id=? 
        and ld1_0.gbs_id=? 
        and ld1_0.start_dt<=? 
        and (
            ld1_0.end_dt is null 
            or ld1_0.end_dt>=?
        )
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        leader_delegation
        (created_at, delegatee_id, delegator_id, end_dt, gbs_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        ld1_0.id,
        ld1_0.created_at,
        ld1_0.delegatee_id,
        ld1_0.delegator_id,
        ld1_0.end_dt,
        ld1_0.gbs_id,
        ld1_0.start_dt,
        ld1_0.updated_at 
    from
        leader_delegation ld1_0 
    where
        ld1_0.delegatee_id=? 
        and ld1_0.start_dt<=? 
        and (
            ld1_0.end_dt is null 
            or ld1_0.end_dt>=?
        )
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        leader_delegation
        (created_at, delegatee_id, delegator_id, end_dt, gbs_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        ld1_0.id,
        ld1_0.created_at,
        ld1_0.delegatee_id,
        ld1_0.delegator_id,
        ld1_0.end_dt,
        ld1_0.gbs_id,
        ld1_0.start_dt,
        ld1_0.updated_at 
    from
        leader_delegation ld1_0 
    where
        ld1_0.delegatee_id=? 
        and ld1_0.start_dt<=? 
        and (
            ld1_0.end_dt is null 
            or ld1_0.end_dt>=?
        )
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        leader_delegation
        (created_at, delegatee_id, delegator_id, end_dt, gbs_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        ld1_0.id,
        ld1_0.created_at,
        ld1_0.delegatee_id,
        ld1_0.delegator_id,
        ld1_0.end_dt,
        ld1_0.gbs_id,
        ld1_0.start_dt,
        ld1_0.updated_at 
    from
        leader_delegation ld1_0 
    where
        ld1_0.delegatee_id=? 
        and ld1_0.gbs_id=? 
        and ld1_0.start_dt<=? 
        and (
            ld1_0.end_dt is null 
            or ld1_0.end_dt>=?
        )
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        leader_delegation
        (created_at, delegatee_id, delegator_id, end_dt, gbs_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        ld1_0.id,
        ld1_0.created_at,
        ld1_0.delegatee_id,
        ld1_0.delegator_id,
        ld1_0.end_dt,
        ld1_0.gbs_id,
        ld1_0.start_dt,
        ld1_0.updated_at 
    from
        leader_delegation ld1_0 
    where
        ld1_0.delegatee_id=? 
        and ld1_0.gbs_id=? 
        and ld1_0.start_dt<=? 
        and (
            ld1_0.end_dt is null 
            or ld1_0.end_dt>=?
        )
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        leader_delegation
        (created_at, delegatee_id, delegator_id, end_dt, gbs_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        ld1_0.id,
        ld1_0.created_at,
        ld1_0.delegatee_id,
        ld1_0.delegator_id,
        ld1_0.end_dt,
        ld1_0.gbs_id,
        ld1_0.start_dt,
        ld1_0.updated_at 
    from
        leader_delegation ld1_0 
    where
        ld1_0.delegatee_id=? 
        and ld1_0.gbs_id=? 
        and ld1_0.start_dt<=? 
        and (
            ld1_0.end_dt is null 
            or ld1_0.end_dt>=?
        )
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        leader_delegation
        (created_at, delegatee_id, delegator_id, end_dt, gbs_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        ld1_0.id,
        ld1_0.created_at,
        ld1_0.delegatee_id,
        ld1_0.delegator_id,
        ld1_0.end_dt,
        ld1_0.gbs_id,
        ld1_0.start_dt,
        ld1_0.updated_at 
    from
        leader_delegation ld1_0 
    where
        ld1_0.gbs_id=? 
        and ld1_0.start_dt<=? 
        and (
            ld1_0.end_dt is null 
            or ld1_0.end_dt>=?
        )
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        leader_delegation
        (created_at, delegatee_id, delegator_id, end_dt, gbs_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        leader_delegation
        (created_at, delegatee_id, delegator_id, end_dt, gbs_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        ld1_0.id,
        ld1_0.created_at,
        ld1_0.delegatee_id,
        ld1_0.delegator_id,
        ld1_0.end_dt,
        ld1_0.gbs_id,
        ld1_0.start_dt,
        ld1_0.updated_at 
    from
        leader_delegation ld1_0 
    where
        ld1_0.delegatee_id=? 
        and ld1_0.start_dt<=? 
        and (
            ld1_0.end_dt is null 
            or ld1_0.end_dt>=?
        )
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        leader_delegation
        (created_at, delegatee_id, delegator_id, end_dt, gbs_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        ld1_0.id,
        ld1_0.created_at,
        ld1_0.delegatee_id,
        ld1_0.delegator_id,
        ld1_0.end_dt,
        ld1_0.gbs_id,
        ld1_0.start_dt,
        ld1_0.updated_at 
    from
        leader_delegation ld1_0 
    where
        ld1_0.gbs_id=? 
        and ld1_0.start_dt<=? 
        and (
            ld1_0.end_dt is null 
            or ld1_0.end_dt>=?
        )
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        leader_delegation
        (created_at, delegatee_id, delegator_id, end_dt, gbs_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        ld1_0.id,
        ld1_0.created_at,
        ld1_0.delegatee_id,
        ld1_0.delegator_id,
        ld1_0.end_dt,
        ld1_0.gbs_id,
        ld1_0.start_dt,
        ld1_0.updated_at 
    from
        leader_delegation ld1_0 
    where
        ld1_0.delegator_id=? 
        and ld1_0.start_dt<=? 
        and (
            ld1_0.end_dt is null 
            or ld1_0.end_dt>=?
        )
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        leader_delegation
        (created_at, delegatee_id, delegator_id, end_dt, gbs_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        ld1_0.id,
        ld1_0.created_at,
        ld1_0.delegatee_id,
        ld1_0.delegator_id,
        ld1_0.end_dt,
        ld1_0.gbs_id,
        ld1_0.start_dt,
        ld1_0.updated_at 
    from
        leader_delegation ld1_0 
    where
        ld1_0.gbs_id=? 
        and ld1_0.start_dt<=? 
        and (
            ld1_0.end_dt is null 
            or ld1_0.end_dt>=?
        )
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        leader_delegation
        (created_at, delegatee_id, delegator_id, end_dt, gbs_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        leader_delegation
        (created_at, delegatee_id, delegator_id, end_dt, gbs_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        ld1_0.id,
        ld1_0.created_at,
        ld1_0.delegatee_id,
        ld1_0.delegator_id,
        ld1_0.end_dt,
        ld1_0.gbs_id,
        ld1_0.start_dt,
        ld1_0.updated_at 
    from
        leader_delegation ld1_0 
    where
        ld1_0.delegatee_id=? 
        and ld1_0.start_dt<=? 
        and (
            ld1_0.end_dt is null 
            or ld1_0.end_dt>=?
        )
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        leader_delegation
        (created_at, delegatee_id, delegator_id, end_dt, gbs_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        ld1_0.id,
        ld1_0.created_at,
        ld1_0.delegatee_id,
        ld1_0.delegator_id,
        ld1_0.end_dt,
        ld1_0.gbs_id,
        ld1_0.start_dt,
        ld1_0.updated_at 
    from
        leader_delegation ld1_0 
    where
        ld1_0.delegatee_id=? 
        and ld1_0.gbs_id=? 
        and ld1_0.start_dt<=? 
        and (
            ld1_0.end_dt is null 
            or ld1_0.end_dt>=?
        )
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        leader_delegation
        (created_at, delegatee_id, delegator_id, end_dt, gbs_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        ld1_0.id,
        ld1_0.created_at,
        ld1_0.delegatee_id,
        ld1_0.delegator_id,
        ld1_0.end_dt,
        ld1_0.gbs_id,
        ld1_0.start_dt,
        ld1_0.updated_at 
    from
        leader_delegation ld1_0 
    where
        ld1_0.gbs_id=? 
        and ld1_0.start_dt<=? 
        and (
            ld1_0.end_dt is null 
            or ld1_0.end_dt>=?
        )
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        department
        (created_at, name, updated_at, id) 
    values
        (?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        village
        (created_at, department_id, name, updated_at, id) 
    values
        (?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        gbs_group
        (created_at, name, term_end_dt, term_start_dt, updated_at, village_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (birth_date, created_at, department_id, email, name, password, phone_number, role, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        leader_delegation
        (created_at, delegatee_id, delegator_id, end_dt, gbs_id, start_dt, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        ld1_0.id,
        ld1_0.created_at,
        ld1_0.delegatee_id,
        ld1_0.delegator_id,
        ld1_0.end_dt,
        ld1_0.gbs_id,
        ld1_0.start_dt,
        ld1_0.updated_at 
    from
        leader_delegation ld1_0 
    where
        ld1_0.delegatee_id=? 
        and ld1_0.gbs_id=? 
        and ld1_0.start_dt<=? 
        and (
            ld1_0.end_dt is null 
            or ld1_0.end_dt>=?
        )
2025-05-06 22:48:27 [Test worker] [NONE] WARN  o.s.b.t.j.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer - 

Found multiple occurrences of org.json.JSONObject on the class path:

	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/org.json/json/20230618/1ae16df7d556d02713e241086f878399e99260d6/json-20230618.jar!/org/json/JSONObject.class
	jar:file:/Users/user/.gradle/caches/modules-2/files-2.1/com.vaadin.external.google/android-json/0.0.20131108.vaadin1/fa26d351fe62a6a17f5cda1287c1c6110dec413f/android-json-0.0.20131108.vaadin1.jar!/org/json/JSONObject.class

You may wish to exclude one of them to ensure predictable runtime behavior

2025-05-06 22:48:27 [Test worker] [NONE] INFO  c.a.d.r.SystemLogRepositoryTest - Starting SystemLogRepositoryTest using Java 21.0.6 with PID 47231 (started by user in /Users/user/study/attendly-api)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG c.a.d.r.SystemLogRepositoryTest - Running with Spring Boot v3.4.5, Spring v6.2.6
2025-05-06 22:48:27 [Test worker] [NONE] INFO  c.a.d.r.SystemLogRepositoryTest - The following 1 profile is active: "test"
2025-05-06 22:48:27 [Test worker] [NONE] WARN  org.hibernate.orm.deprecation - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists attendance cascade 
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists batch_job_logs cascade 
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists batch_jobs cascade 
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists department cascade 
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_group cascade 
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_leader_history cascade 
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_member_history cascade 
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists leader_delegation cascade 
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists system_log cascade 
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists system_settings cascade 
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade 
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists village cascade 
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists village_leader cascade 
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table attendance (
        qt_count integer not null,
        week_start date not null,
        created_at timestamp(6) not null,
        created_by bigint not null,
        gbs_id bigint not null,
        id bigint generated by default as identity,
        member_id bigint not null,
        updated_at timestamp(6) not null,
        ministry enum ('A','B','C') not null,
        worship enum ('O','X') not null,
        primary key (id)
    )
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table batch_job_logs (
        batch_job_id bigint not null,
        id bigint generated by default as identity,
        timestamp timestamp(6) not null,
        level varchar(10) not null,
        message TEXT not null,
        primary key (id)
    )
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table batch_jobs (
        created_at timestamp(6) not null,
        finished_at timestamp(6),
        id bigint generated by default as identity,
        schedule_time timestamp(6),
        started_at timestamp(6),
        error_message TEXT,
        parameters TEXT,
        job_type enum ('DATA_BACKUP','GBS_REORGANIZATION','REMINDER','STATISTICS_GENERATION') not null,
        status enum ('CANCELLED','COMPLETED','FAILED','QUEUED','RUNNING') not null,
        primary key (id)
    )
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table department (
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        name varchar(50) not null,
        primary key (id)
    )
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table gbs_group (
        term_end_dt date not null,
        term_start_dt date not null,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        village_id bigint not null,
        name varchar(50) not null,
        primary key (id)
    )
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table gbs_leader_history (
        end_dt date,
        start_dt date not null,
        created_at timestamp(6) not null,
        gbs_id bigint not null,
        id bigint generated by default as identity,
        leader_id bigint not null,
        updated_at timestamp(6) not null,
        primary key (id)
    )
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table gbs_member_history (
        end_dt date,
        start_dt date not null,
        created_at timestamp(6) not null,
        gbs_id bigint not null,
        id bigint generated by default as identity,
        member_id bigint not null,
        updated_at timestamp(6) not null,
        primary key (id)
    )
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table leader_delegation (
        end_dt date,
        start_dt date not null,
        created_at timestamp(6) not null,
        delegatee_id bigint not null,
        delegator_id bigint not null,
        gbs_id bigint not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        primary key (id)
    )
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table system_log (
        id bigint generated by default as identity,
        timestamp timestamp(6) not null,
        user_id bigint,
        level varchar(10) not null,
        category varchar(20) not null,
        ip_address varchar(39),
        server_instance varchar(50),
        message varchar(1000) not null,
        additional_info TEXT,
        user_agent varchar(255),
        primary key (id)
    )
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table system_settings (
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        setting_key varchar(50) not null unique,
        description varchar(200),
        setting_value varchar(1000) not null,
        primary key (id)
    )
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table users (
        birth_date date,
        created_at timestamp(6) not null,
        department_id bigint not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        phone_number varchar(20),
        name varchar(50) not null,
        email varchar(100) unique,
        password varchar(100),
        role enum ('ADMIN','LEADER','MEMBER','MINISTER','VILLAGE_LEADER') not null,
        primary key (id)
    )
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table village (
        created_at timestamp(6) not null,
        department_id bigint not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        name varchar(50) not null,
        primary key (id)
    )
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    create table village_leader (
        end_dt date,
        start_dt date not null,
        created_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        user_id bigint not null,
        village_id bigint not null,
        primary key (user_id, village_id)
    )
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists attendance 
       add constraint FKg7dtnois2g6ghgu4bl5gym92u 
       foreign key (created_by) 
       references users
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists attendance 
       add constraint FKjn82a3qvj1ho9ajauog7v0f12 
       foreign key (gbs_id) 
       references gbs_group
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists attendance 
       add constraint FK8f5fy874njy44gc8df63m187j 
       foreign key (member_id) 
       references users
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists batch_job_logs 
       add constraint FKsoyil2u66we091nme35nm6ste 
       foreign key (batch_job_id) 
       references batch_jobs
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_group 
       add constraint FKqvo83ldaqku2vayubiutcly4e 
       foreign key (village_id) 
       references village
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_leader_history 
       add constraint FKjls4dwfsilybq2sa0x35ml3f9 
       foreign key (gbs_id) 
       references gbs_group
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_leader_history 
       add constraint FK810qej66ysfs5j8cqtqbtsr1h 
       foreign key (leader_id) 
       references users
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_member_history 
       add constraint FK21l70t0cajgfj6rehvc9s21tc 
       foreign key (gbs_id) 
       references gbs_group
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists gbs_member_history 
       add constraint FKasr4qspnvhydc2xbei8rlysxy 
       foreign key (member_id) 
       references users
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists leader_delegation 
       add constraint FKs9xr3vr71pux3puk06pwiivfl 
       foreign key (delegatee_id) 
       references users
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists leader_delegation 
       add constraint FKqg0jdq2i5pfckjlqr5xfhkguc 
       foreign key (delegator_id) 
       references users
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists leader_delegation 
       add constraint FKjr2i1o6vb363gnkm6qahsaji6 
       foreign key (gbs_id) 
       references gbs_group
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint FKfi832e3qv89fq376fuh8920y4 
       foreign key (department_id) 
       references department
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists village 
       add constraint FKmp8tdn2nuthupcstb37lgifs4 
       foreign key (department_id) 
       references department
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists village_leader 
       add constraint FK446snb5j15qqkonffm6tyepm0 
       foreign key (user_id) 
       references users
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    alter table if exists village_leader 
       add constraint FK9rpuj47r5r477bys6jmfthoeo 
       foreign key (village_id) 
       references village
2025-05-06 22:48:27 [Test worker] [NONE] INFO  c.a.d.r.SystemLogRepositoryTest - Started SystemLogRepositoryTest in 0.182 seconds (process running for 8.332)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        sl1_0.id,
        sl1_0.additional_info,
        sl1_0.category,
        sl1_0.ip_address,
        sl1_0.level,
        sl1_0.message,
        sl1_0.server_instance,
        sl1_0.timestamp,
        sl1_0.user_agent,
        sl1_0.user_id 
    from
        system_log sl1_0 
    where
        lower(sl1_0.message) like lower(('%'||?||'%')) escape '' 
    fetch
        first ? rows only
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        sl1_0.id,
        sl1_0.additional_info,
        sl1_0.category,
        sl1_0.ip_address,
        sl1_0.level,
        sl1_0.message,
        sl1_0.server_instance,
        sl1_0.timestamp,
        sl1_0.user_agent,
        sl1_0.user_id 
    from
        system_log sl1_0 
    where
        lower(sl1_0.message) like lower(('%'||?||'%')) escape '' 
    fetch
        first ? rows only
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        sl1_0.id,
        sl1_0.additional_info,
        sl1_0.category,
        sl1_0.ip_address,
        sl1_0.level,
        sl1_0.message,
        sl1_0.server_instance,
        sl1_0.timestamp,
        sl1_0.user_agent,
        sl1_0.user_id 
    from
        system_log sl1_0 
    where
        sl1_0.timestamp between ? and ? 
    fetch
        first ? rows only
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        sl1_0.id,
        sl1_0.additional_info,
        sl1_0.category,
        sl1_0.ip_address,
        sl1_0.level,
        sl1_0.message,
        sl1_0.server_instance,
        sl1_0.timestamp,
        sl1_0.user_agent,
        sl1_0.user_id 
    from
        system_log sl1_0 
    where
        sl1_0.category=? 
    fetch
        first ? rows only
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        sl1_0.id,
        sl1_0.additional_info,
        sl1_0.category,
        sl1_0.ip_address,
        sl1_0.level,
        sl1_0.message,
        sl1_0.server_instance,
        sl1_0.timestamp,
        sl1_0.user_agent,
        sl1_0.user_id 
    from
        system_log sl1_0 
    where
        sl1_0.category=? 
    fetch
        first ? rows only
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    insert 
    into
        system_log
        (additional_info, category, ip_address, level, message, server_instance, timestamp, user_agent, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        sl1_0.id,
        sl1_0.additional_info,
        sl1_0.category,
        sl1_0.ip_address,
        sl1_0.level,
        sl1_0.message,
        sl1_0.server_instance,
        sl1_0.timestamp,
        sl1_0.user_agent,
        sl1_0.user_id 
    from
        system_log sl1_0 
    where
        sl1_0.level=? 
    fetch
        first ? rows only
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG org.hibernate.SQL - 
    select
        sl1_0.id,
        sl1_0.additional_info,
        sl1_0.category,
        sl1_0.ip_address,
        sl1_0.level,
        sl1_0.message,
        sl1_0.server_instance,
        sl1_0.timestamp,
        sl1_0.user_agent,
        sl1_0.user_id 
    from
        system_log sl1_0 
    where
        sl1_0.level=? 
    fetch
        first ? rows only
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#174
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Department name=#175
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #174#176
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=1, name='테스트 사용자', role=MEMBER)] on UserRepository(#174).findByEmail(test@example.com)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#177
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #177#178
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on UserRepository(#177).findByEmail(nonexistent@example.com)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for FilterChain name=filterChain#179
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for JwtTokenProvider name=jwtTokenProvider#180
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for HttpServletRequest name=request#181
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for HttpServletResponse name=response#182
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsService name=userDetailsService#183
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering null on HttpServletRequest(request#181).getHeader(Authorization)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering kotlin.Unit on FilterChain(filterChain#179).doFilter(HttpServletRequest(request#181), HttpServletResponse(response#182))
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Unit name=child of filterChain#179#184
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for FilterChain name=filterChain#185
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for JwtTokenProvider name=jwtTokenProvider#186
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for HttpServletRequest name=request#187
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for HttpServletResponse name=response#188
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsService name=userDetailsService#189
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.JvmStaticMockFactory - Creating static mockk for SecurityContextHolder
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG io.mockk.proxy.jvm.StaticProxyMaker - Transforming class org.springframework.security.core.context.SecurityContextHolder for static method interception
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#190
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=child of static SecurityContextHolder#191
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #190#192
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetails name=child of userDetailsService#189#193
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Bearer test-jwt-token on HttpServletRequest(request#187).getHeader(Authorization)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering testuser on JwtTokenProvider(jwtTokenProvider#186).extractUsername(test-jwt-token)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering SecurityContext(#190) on class org.springframework.security.core.context.SecurityContextHolder.getContext()
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering null on SecurityContext(#190).getAuthentication()
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering org.springframework.security.core.userdetails.User [Username=testuser, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[]] on UserDetailsService(userDetailsService#189).loadUserByUsername(testuser)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering false on JwtTokenProvider(jwtTokenProvider#186).validateToken(test-jwt-token, org.springframework.security.core.userdetails.User [Username=testuser, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[]])
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering kotlin.Unit on FilterChain(filterChain#185).doFilter(HttpServletRequest(request#187), HttpServletResponse(response#188))
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Unit name=child of filterChain#185#194
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Unit name=child of #190#195
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for FilterChain name=filterChain#196
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for JwtTokenProvider name=jwtTokenProvider#197
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for HttpServletRequest name=request#198
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for HttpServletResponse name=response#199
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsService name=userDetailsService#200
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering null on class org.springframework.security.core.context.SecurityContextHolder.clearContext()
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#201
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=child of static SecurityContextHolder#202
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #201#203
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetails name=child of userDetailsService#200#204
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Bearer test-jwt-token on HttpServletRequest(request#198).getHeader(Authorization)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering testuser on JwtTokenProvider(jwtTokenProvider#197).extractUsername(test-jwt-token)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering SecurityContext(#201) on class org.springframework.security.core.context.SecurityContextHolder.getContext()
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering null on SecurityContext(#201).getAuthentication()
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering org.springframework.security.core.userdetails.User [Username=testuser, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[]] on UserDetailsService(userDetailsService#200).loadUserByUsername(testuser)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering true on JwtTokenProvider(jwtTokenProvider#197).validateToken(test-jwt-token, org.springframework.security.core.userdetails.User [Username=testuser, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[]])
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering  on HttpServletRequest(request#198).getRemoteAddr()
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for HttpSession name=child of request#198#205
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering HttpSession(child of request#198#205) on HttpServletRequest(request#198).getSession(false)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering  on HttpSession(child of request#198#205).getId()
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering SecurityContext(#201) on class org.springframework.security.core.context.SecurityContextHolder.getContext()
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering kotlin.Unit on SecurityContext(#201).setAuthentication(UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=testuser, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[]], Credentials=[PROTECTED], Authenticated=true, Details=WebAuthenticationDetails [RemoteIpAddress=, SessionId=], Granted Authorities=[]])
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering kotlin.Unit on FilterChain(filterChain#196).doFilter(HttpServletRequest(request#198), HttpServletResponse(response#199))
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Unit name=child of filterChain#196#206
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Unit name=child of #201#207
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for FilterChain name=filterChain#208
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for JwtTokenProvider name=jwtTokenProvider#209
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for HttpServletRequest name=request#210
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for HttpServletResponse name=response#211
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsService name=userDetailsService#212
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering null on class org.springframework.security.core.context.SecurityContextHolder.clearContext()
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Bearer test-jwt-token on HttpServletRequest(request#210).getHeader(Authorization)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Throwing java.lang.RuntimeException: Token extraction failed on JwtTokenProvider(jwtTokenProvider#209).extractUsername(test-jwt-token)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering kotlin.Unit on FilterChain(filterChain#208).doFilter(HttpServletRequest(request#210), HttpServletResponse(response#211))
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Unit name=child of filterChain#208#213
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetails name=child of userDetailsService#212#214
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for FilterChain name=filterChain#215
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for JwtTokenProvider name=jwtTokenProvider#216
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for HttpServletRequest name=request#217
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for HttpServletResponse name=response#218
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsService name=userDetailsService#219
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering null on class org.springframework.security.core.context.SecurityContextHolder.clearContext()
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering InvalidFormat on HttpServletRequest(request#217).getHeader(Authorization)
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering kotlin.Unit on FilterChain(filterChain#215).doFilter(HttpServletRequest(request#217), HttpServletResponse(response#218))
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Unit name=child of filterChain#215#220
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.JvmStaticMockFactory - Disposing object mockk for Companion hashcode=10dbcf46
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.JvmStaticMockFactory - Disposing static mockk for class org.springframework.security.core.context.SecurityContextHolder
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#221
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#222
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #222#223
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on UserDetailsAdapter(#222).getId()
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering test@example.com on UserDetailsAdapter(#222).getUsername()
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#224
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering other@example.com on UserDetailsAdapter(#224).getUsername()
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#225
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#226
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #226#227
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on UserDetailsAdapter(#226).getId()
2025-05-06 22:48:27 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering test@example.com on UserDetailsAdapter(#226).getUsername()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#228
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#229
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #229#230
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on UserDetailsAdapter(#229).getId()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering test@example.com on UserDetailsAdapter(#229).getUsername()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#231
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#232
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #232#233
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on UserDetailsAdapter(#232).getId()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering test@example.com on UserDetailsAdapter(#232).getUsername()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#234
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#235
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #235#236
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on UserDetailsAdapter(#235).getId()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering test@example.com on UserDetailsAdapter(#235).getUsername()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#237
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#238
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #238#239
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on UserDetailsAdapter(#238).getId()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering test@example.com on UserDetailsAdapter(#238).getUsername()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#240
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#241
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #241#242
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on UserDetailsAdapter(#241).getId()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering test@example.com on UserDetailsAdapter(#241).getUsername()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering test@example.com on UserDetailsAdapter(#241).getUsername()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#243
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#244
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #244#245
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on UserDetailsAdapter(#244).getId()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering test@example.com on UserDetailsAdapter(#244).getUsername()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceService name=#246
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#247
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#248
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#249
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#250
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #250#251
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#252
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #252#253
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#254
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #254#255
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#256
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #256#257
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#258
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #258#259
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=#260
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=#261
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=child of #261#262
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #254#263
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #249#264
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#265
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #265#266
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #248#267
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Authentication(#248) on SecurityContext(#249).getAuthentication()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering UserDetailsAdapter(#265) on Authentication(#248).getPrincipal()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#256) on UserDetailsAdapter(#265).getUser()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#256).getRole()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#256).getRole()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#256).getRole()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#256).getRole()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 4 on User(#256).getId()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering false on AttendanceService(#246).hasLeaderAccess(1, 4)
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceService name=#268
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#269
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#270
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#271
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#272
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #272#273
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#274
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #274#275
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#276
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #276#277
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#278
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #278#279
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#280
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #280#281
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=#282
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=#283
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=child of #283#284
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #276#285
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #271#286
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#287
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #287#288
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #270#289
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Authentication(#270) on SecurityContext(#271).getAuthentication()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering UserDetailsAdapter(#287) on Authentication(#270).getPrincipal()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#278) on UserDetailsAdapter(#287).getUser()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#278).getRole()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#278).getRole()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#278).getRole()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#278).getRole()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 4 on User(#278).getId()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering true on AttendanceService(#268).hasLeaderAccess(1, 4)
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceService name=#290
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#291
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#292
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#293
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#294
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #294#295
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#296
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #296#297
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#298
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #298#299
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#300
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #300#301
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#302
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #302#303
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=#304
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=#305
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=child of #305#306
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #298#307
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #293#308
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#309
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #309#310
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #292#311
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Authentication(#292) on SecurityContext(#293).getAuthentication()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering UserDetailsAdapter(#309) on Authentication(#292).getPrincipal()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#300) on UserDetailsAdapter(#309).getUser()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#300).getRole()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#300).getRole()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#300).getRole()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceService name=#312
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#313
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#314
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#315
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#316
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #316#317
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#318
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #318#319
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#320
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #320#321
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#322
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #322#323
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#324
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #324#325
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=#326
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=#327
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=child of #327#328
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #320#329
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #315#330
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #314#331
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Authentication(#314) on SecurityContext(#315).getAuthentication()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering null on Authentication(#314).getPrincipal()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceService name=#332
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#333
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#334
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#335
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#336
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #336#337
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#338
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #338#339
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#340
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #340#341
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#342
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #342#343
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#344
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #344#345
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=#346
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=#347
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=child of #347#348
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #340#349
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #335#350
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#351
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #351#352
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #334#353
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Authentication(#334) on SecurityContext(#335).getAuthentication()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering UserDetailsAdapter(#351) on Authentication(#334).getPrincipal()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#340) on UserDetailsAdapter(#351).getUser()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VILLAGE_LEADER on User(#340).getRole()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VILLAGE_LEADER on User(#340).getRole()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VILLAGE_LEADER on User(#340).getRole()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VillageLeader(#347) on User(#340).getVillageLeader()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Village(#346) on VillageLeader(#347).getVillage()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on Village(#346).getId()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceService name=#354
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#355
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#356
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#357
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#358
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #358#359
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#360
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #360#361
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#362
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #362#363
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#364
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #364#365
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#366
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #366#367
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=#368
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=#369
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=child of #369#370
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #362#371
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #357#372
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#373
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #373#374
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #356#375
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Authentication(#356) on SecurityContext(#357).getAuthentication()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering UserDetailsAdapter(#373) on Authentication(#356).getPrincipal()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#362) on UserDetailsAdapter(#373).getUser()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VILLAGE_LEADER on User(#362).getRole()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VILLAGE_LEADER on User(#362).getRole()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VILLAGE_LEADER on User(#362).getRole()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceService name=#376
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#377
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#378
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#379
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#380
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #380#381
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#382
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #382#383
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#384
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #384#385
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#386
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #386#387
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#388
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #388#389
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=#390
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=#391
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=child of #391#392
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #384#393
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #379#394
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#395
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #395#396
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #378#397
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Authentication(#378) on SecurityContext(#379).getAuthentication()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering UserDetailsAdapter(#395) on Authentication(#378).getPrincipal()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#382) on UserDetailsAdapter(#395).getUser()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering MINISTER on User(#382).getRole()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering MINISTER on User(#382).getRole()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceService name=#398
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#399
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#400
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#401
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#402
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #402#403
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#404
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #404#405
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#406
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #406#407
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#408
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #408#409
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#410
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #410#411
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=#412
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=#413
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=child of #413#414
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #406#415
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #401#416
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#417
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #417#418
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #400#419
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Authentication(#400) on SecurityContext(#401).getAuthentication()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering UserDetailsAdapter(#417) on Authentication(#400).getPrincipal()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#402) on UserDetailsAdapter(#417).getUser()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering ADMIN on User(#402).getRole()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceService name=#420
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#421
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#422
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#423
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#424
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #424#425
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#426
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #426#427
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#428
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #428#429
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#430
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #430#431
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#432
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #432#433
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=#434
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=#435
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=child of #435#436
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #428#437
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #423#438
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#439
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #439#440
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #422#441
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Authentication(#422) on SecurityContext(#423).getAuthentication()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering UserDetailsAdapter(#439) on Authentication(#422).getPrincipal()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#428) on UserDetailsAdapter(#439).getUser()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VILLAGE_LEADER on User(#428).getRole()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VILLAGE_LEADER on User(#428).getRole()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VILLAGE_LEADER on User(#428).getRole()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VillageLeader(#435) on User(#428).getVillageLeader()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Village(#434) on VillageLeader(#435).getVillage()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on Village(#434).getId()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceService name=#442
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#443
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#444
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#445
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#446
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #446#447
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#448
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #448#449
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#450
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #450#451
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#452
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #452#453
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#454
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #454#455
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=#456
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=#457
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=child of #457#458
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #450#459
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #445#460
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#461
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #461#462
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #444#463
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Authentication(#444) on SecurityContext(#445).getAuthentication()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering UserDetailsAdapter(#461) on Authentication(#444).getPrincipal()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#454) on UserDetailsAdapter(#461).getUser()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering MEMBER on User(#454).getRole()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering MEMBER on User(#454).getRole()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering MEMBER on User(#454).getRole()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering MEMBER on User(#454).getRole()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceService name=#464
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#465
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#466
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#467
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#468
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #468#469
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#470
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #470#471
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#472
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #472#473
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#474
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #474#475
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#476
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #476#477
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=#478
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=#479
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=child of #479#480
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #472#481
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #467#482
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#483
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #483#484
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #466#485
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering UserDetailsAdapter(#483) on Authentication(#466).getPrincipal()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#470) on UserDetailsAdapter(#483).getUser()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering MINISTER on User(#470).getRole()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceService name=#486
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#487
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#488
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#489
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#490
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #490#491
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#492
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #492#493
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#494
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #494#495
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#496
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #496#497
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#498
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #498#499
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=#500
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=#501
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=child of #501#502
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #494#503
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #489#504
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#505
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #505#506
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #488#507
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Authentication(#488) on SecurityContext(#489).getAuthentication()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering UserDetailsAdapter(#505) on Authentication(#488).getPrincipal()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#490) on UserDetailsAdapter(#505).getUser()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering ADMIN on User(#490).getRole()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceService name=#508
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#509
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#510
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#511
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#512
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #512#513
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#514
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #514#515
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#516
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #516#517
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#518
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #518#519
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#520
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #520#521
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=#522
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=#523
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=child of #523#524
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #516#525
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #511#526
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #510#527
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering null on Authentication(#510).getPrincipal()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceService name=#528
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#529
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#530
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#531
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#532
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #532#533
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#534
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #534#535
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#536
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #536#537
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#538
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #538#539
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#540
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #540#541
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=#542
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=#543
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=child of #543#544
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #536#545
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #531#546
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #530#547
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Authentication(#530) on SecurityContext(#531).getAuthentication()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering null on Authentication(#530).getPrincipal()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceService name=#548
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#549
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#550
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#551
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#552
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #552#553
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#554
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #554#555
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#556
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #556#557
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#558
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #558#559
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#560
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #560#561
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=#562
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=#563
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=child of #563#564
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #556#565
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #551#566
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#567
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #567#568
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #550#569
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering UserDetailsAdapter(#567) on Authentication(#550).getPrincipal()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#552) on UserDetailsAdapter(#567).getUser()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering ADMIN on User(#552).getRole()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceService name=#570
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#571
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#572
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#573
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#574
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #574#575
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#576
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #576#577
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#578
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #578#579
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#580
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #580#581
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#582
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #582#583
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=#584
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=#585
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=child of #585#586
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #578#587
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #573#588
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserDetailsAdapter name=#589
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #589#590
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #572#591
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Authentication(#572) on SecurityContext(#573).getAuthentication()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering UserDetailsAdapter(#589) on Authentication(#572).getPrincipal()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(#576) on UserDetailsAdapter(#589).getUser()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering MINISTER on User(#576).getRole()
2025-05-06 22:48:29 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering MINISTER on User(#576).getRole()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for BatchJobRepository name=#592
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for ObjectMapper name=#593
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #592#594
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[BatchJob(id=1, jobType=GBS_REORGANIZATION, status=COMPLETED)] on BatchJobRepository(#592).findById(1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for BatchJobRepository name=#595
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for ObjectMapper name=#596
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for BatchJob name=child of #595#597
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering {"key1":"value1","key2":"value2"} on ObjectMapper(#596).writeValueAsString({key1=value1, key2=value2})
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering BatchJob(id=1, jobType=GBS_REORGANIZATION, status=QUEUED) on BatchJobRepository(#595).save(BatchJob(id=null, jobType=GBS_REORGANIZATION, status=QUEUED))
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for BatchJobRepository name=#598
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for ObjectMapper name=#599
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #598#600
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on BatchJobRepository(#598).findById(999)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for BatchJobRepository name=#601
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for ObjectMapper name=#602
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #601#603
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[BatchJob(id=1, jobType=GBS_REORGANIZATION, status=RUNNING)] on BatchJobRepository(#601).findById(1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for BatchJobRepository name=#604
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for ObjectMapper name=#605
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #604#606
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on BatchJobRepository(#604).findById(999)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for BatchJobRepository name=#607
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for ObjectMapper name=#608
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #607#609
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on BatchJobRepository(#607).findById(999)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=#610
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#611
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=#612
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#613
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#614
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=#615
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #611#616
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on VillageRepository(#611).findById(999)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=#617
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#618
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=#619
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#620
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#621
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=#622
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #619#623
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on GbsGroupRepository(#619).findById(999)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=#624
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#625
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=#626
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#627
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#628
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=#629
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering false on DepartmentRepository(#624).existsById(999)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=#630
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#631
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=#632
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#633
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#634
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=#635
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #631#636
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on VillageRepository(#631).findById(999)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=#637
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#638
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=#639
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#640
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#641
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=#642
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #637#643
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on DepartmentRepository(#637).findById(999)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=#644
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#645
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=#646
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#647
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#648
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=#649
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #646#650
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #647#651
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[GbsGroup(id=1, name='1GBS')] on GbsGroupRepository(#646).findById(1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on UserRepository(#647).findById(999)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=#652
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#653
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=#654
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#655
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#656
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=#657
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #652#658
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on DepartmentRepository(#652).findById(999)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=#659
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#660
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=#661
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#662
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#663
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=#664
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #659#665
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on DepartmentRepository(#659).findById(999)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=#666
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#667
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=#668
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#669
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#670
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=#671
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #666#672
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on DepartmentRepository(#666).findById(999)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=#673
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=#674
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=#675
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#676
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#677
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=#678
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #675#679
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on GbsGroupRepository(#675).findById(999)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#680
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=#681
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for PasswordEncoder name=#682
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Page name=child of #680#683
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Page 1 of 1 containing com.attendly.domain.entity.User instances on UserRepository(#680).findAll(Page request [number: 0, size 10, sort: UNSORTED])
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#684
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=#685
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for PasswordEncoder name=#686
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering true on UserRepository(#684).existsById(1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering kotlin.Unit on UserRepository(#684).deleteById(1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Unit name=child of #684#687
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#688
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=#689
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for PasswordEncoder name=#690
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #689#691
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #688#692
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #688#693
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on UserRepository(#688).findByEmail(hong@example.com)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[Department(id=1, name='청년부')] on DepartmentRepository(#689).findById(1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering encodedPassword on PasswordEncoder(#690).encode(Password123!)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=1, name='홍길동', role=LEADER) on UserRepository(#688).save(User(id=null, name='홍길동', role=LEADER))
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#694
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=#695
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for PasswordEncoder name=#696
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering false on UserRepository(#694).existsById(999)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Unit name=child of #694#697
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#698
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=#699
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for PasswordEncoder name=#700
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #698#701
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #698#702
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=1, name='홍길동', role=LEADER)] on UserRepository(#698).findById(1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering newEncodedPassword on PasswordEncoder(#700).encode(NewPassword123!)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=1, name='홍길동', role=LEADER) on UserRepository(#698).save(User(id=1, name='홍길동', role=LEADER))
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#703
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=#704
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for PasswordEncoder name=#705
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #703#706
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=2, name='기존사용자', role=MEMBER)] on UserRepository(#703).findByEmail(hong@example.com)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #704#707
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #703#708
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#709
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=#710
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for PasswordEncoder name=#711
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #709#712
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #709#713
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of #709#714
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=1, name='홍길동', role=LEADER)] on UserRepository(#709).findById(1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on UserRepository(#709).findByEmail(hong_updated@example.com)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=1, name='홍길동(수정)', role=ADMIN) on UserRepository(#709).save(User(id=1, name='홍길동(수정)', role=ADMIN))
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#715
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=#716
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for PasswordEncoder name=#717
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #715#718
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=1, name='홍길동', role=LEADER)] on UserRepository(#715).findById(1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#719
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=authentication#720
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#721
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#722
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#723
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#724
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=securityContext#725
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#726
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#727
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of villageRepository#727#728
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of gbsGroupRepository#721#729
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#719#730
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of gbsLeaderHistoryRepository#722#731
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[Village(id=1, name='테스트 마을')] on VillageRepository(villageRepository#727).findById(1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [GbsGroup(id=1, name='테스트 GBS')] on GbsGroupRepository(gbsGroupRepository#721).findActiveGroupsByVillageId(1, 2025-05-05)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [Attendance(id=1, member=2, week=2025-05-05)] on AttendanceRepository(attendanceRepository#719).findDetailsByGbsIdAndWeek(1, 2025-05-05)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=4, name='리더', role=LEADER) on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#722).findLeaderByGbsIdAndDate(1, 2025-05-05)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 5 on GbsMemberHistoryRepository(gbsMemberHistoryRepository#723).countActiveMembers(1, 2025-05-05)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#732
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=authentication#733
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#734
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#735
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#736
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#737
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=securityContext#738
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#739
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#740
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistory name=child of gbsLeaderHistoryRepository#735#741
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsLeaderHistory(id=1, gbsGroup=1, leader=1) on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#735).findByGbsGroupIdAndLeaderIdAndEndDateIsNull(1, 1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#742
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=authentication#743
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#744
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#745
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#746
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#747
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=securityContext#748
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#749
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#750
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of villageRepository#750#751
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of gbsGroupRepository#744#752
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#742#753
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of gbsLeaderHistoryRepository#745#754
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[Village(id=1, name='테스트 마을')] on VillageRepository(villageRepository#750).findById(1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [GbsGroup(id=1, name='테스트 GBS')] on GbsGroupRepository(gbsGroupRepository#744).findActiveGroupsByVillageId(1, 2025-05-05)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [Attendance(id=1, member=2, week=2025-05-05)] on AttendanceRepository(attendanceRepository#742).findDetailsByGbsIdAndWeek(1, 2025-05-05)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=4, name='리더', role=LEADER) on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#745).findLeaderByGbsIdAndDate(1, 2025-05-05)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 10 on GbsMemberHistoryRepository(gbsMemberHistoryRepository#746).countActiveMembers(1, 2025-05-05)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#755
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=authentication#756
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#757
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#758
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#759
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#760
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=securityContext#761
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#762
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#763
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistory name=child of gbsLeaderHistoryRepository#758#764
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of leaderDelegationRepository#760#765
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering null on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#758).findByGbsGroupIdAndLeaderIdAndEndDateIsNull(1, 1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [LeaderDelegation(id=1, delegator=2, delegatee=1, gbsGroup=1)] on LeaderDelegationRepository(leaderDelegationRepository#760).findActiveDelegationsByDelegateeAndGbs(1, 1, 2025-05-06)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#766
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=authentication#767
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#768
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#769
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#770
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#771
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=securityContext#772
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#773
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#774
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistory name=child of gbsLeaderHistoryRepository#769#775
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of leaderDelegationRepository#771#776
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering null on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#769).findByGbsGroupIdAndLeaderIdAndEndDateIsNull(1, 1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on LeaderDelegationRepository(leaderDelegationRepository#771).findActiveDelegationsByDelegateeAndGbs(1, 1, 2025-05-06)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#777
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=authentication#778
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#779
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#780
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#781
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#782
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=securityContext#783
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#784
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#785
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of securityContext#783#786
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of authentication#778#787
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of gbsGroupRepository#779#788
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistory name=child of gbsLeaderHistoryRepository#780#789
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of leaderDelegationRepository#782#790
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Authentication(authentication#778) on SecurityContext(securityContext#783).getAuthentication()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering com.attendly.security.UserDetailsAdapter@6ff5a9e8 on Authentication(authentication#778).getPrincipal()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[GbsGroup(id=1, name='테스트 GBS')] on GbsGroupRepository(gbsGroupRepository#779).findById(1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering null on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#780).findByGbsGroupIdAndLeaderIdAndEndDateIsNull(1, 1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on LeaderDelegationRepository(leaderDelegationRepository#782).findActiveDelegationsByDelegateeAndGbs(1, 1, 2025-05-06)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#791
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=authentication#792
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#793
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#794
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#795
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#796
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=securityContext#797
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#798
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#799
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of securityContext#797#800
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of authentication#792#801
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of gbsGroupRepository#793#802
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistory name=child of gbsLeaderHistoryRepository#794#803
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#791#804
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of userRepository#798#805
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of userRepository#798#806
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of gbsMemberHistoryRepository#795#807
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#791#808
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Authentication(authentication#792) on SecurityContext(securityContext#797).getAuthentication()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering com.attendly.security.UserDetailsAdapter@570e3e42 on Authentication(authentication#792).getPrincipal()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[GbsGroup(id=1, name='테스트 GBS')] on GbsGroupRepository(gbsGroupRepository#793).findById(1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsLeaderHistory(id=1, gbsGroup=1, leader=1) on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#794).findByGbsGroupIdAndLeaderIdAndEndDateIsNull(1, 1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on AttendanceRepository(attendanceRepository#791).findByGbsGroupAndWeekStart(GbsGroup(id=1, name='테스트 GBS'), 2025-05-05)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=2, name='조원1', role=MEMBER)] on UserRepository(userRepository#798).findById(2)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [GbsMemberHistory(id=1, gbsGroup=1, member=2), GbsMemberHistory(id=2, gbsGroup=1, member=3)] on GbsMemberHistoryRepository(gbsMemberHistoryRepository#795).findActiveMembers(GbsMemberHistorySearchCondition(gbsId=1, startDate=2025-05-06, endDate=2025-05-06))
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=3, name='조원2', role=MEMBER)] on UserRepository(userRepository#798).findById(3)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [GbsMemberHistory(id=1, gbsGroup=1, member=2), GbsMemberHistory(id=2, gbsGroup=1, member=3)] on GbsMemberHistoryRepository(gbsMemberHistoryRepository#795).findActiveMembers(GbsMemberHistorySearchCondition(gbsId=1, startDate=2025-05-06, endDate=2025-05-06))
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [Attendance(id=1, member=2, week=2025-05-05), Attendance(id=2, member=3, week=2025-05-05)] on AttendanceRepository(attendanceRepository#791).saveAll([Attendance(id=null, member=2, week=2025-05-05), Attendance(id=null, member=3, week=2025-05-05)])
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#809
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=authentication#810
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#811
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#812
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#813
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#814
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=securityContext#815
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#816
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#817
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of securityContext#815#818
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of authentication#810#819
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of gbsGroupRepository#811#820
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#809#821
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of userRepository#816#822
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of gbsMemberHistoryRepository#813#823
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#809#824
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Authentication(authentication#810) on SecurityContext(securityContext#815).getAuthentication()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering com.attendly.security.UserDetailsAdapter@6bdc3482 on Authentication(authentication#810).getPrincipal()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[GbsGroup(id=1, name='테스트 GBS')] on GbsGroupRepository(gbsGroupRepository#811).findById(1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on AttendanceRepository(attendanceRepository#809).findByGbsGroupAndWeekStart(GbsGroup(id=1, name='테스트 GBS'), 2025-05-05)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=2, name='조원', role=MEMBER)] on UserRepository(userRepository#816).findById(2)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [GbsMemberHistory(id=1, gbsGroup=1, member=2)] on GbsMemberHistoryRepository(gbsMemberHistoryRepository#813).findActiveMembers(GbsMemberHistorySearchCondition(gbsId=1, startDate=2025-05-06, endDate=2025-05-06))
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [Attendance(id=1, member=2, week=2025-05-05)] on AttendanceRepository(attendanceRepository#809).saveAll([Attendance(id=null, member=2, week=2025-05-05)])
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#825
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=authentication#826
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#827
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#828
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#829
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#830
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=securityContext#831
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#832
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#833
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of securityContext#831#834
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of authentication#826#835
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of gbsGroupRepository#827#836
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistory name=child of gbsLeaderHistoryRepository#828#837
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#825#838
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of userRepository#832#839
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of gbsMemberHistoryRepository#829#840
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Authentication(authentication#826) on SecurityContext(securityContext#831).getAuthentication()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering com.attendly.security.UserDetailsAdapter@2f1f7e7a on Authentication(authentication#826).getPrincipal()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[GbsGroup(id=1, name='테스트 GBS')] on GbsGroupRepository(gbsGroupRepository#827).findById(1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsLeaderHistory(id=1, gbsGroup=1, leader=1) on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#828).findByGbsGroupIdAndLeaderIdAndEndDateIsNull(1, 1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on AttendanceRepository(attendanceRepository#825).findByGbsGroupAndWeekStart(GbsGroup(id=1, name='테스트 GBS'), 2025-05-05)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=5, name='타GBS 조원', role=MEMBER)] on UserRepository(userRepository#832).findById(5)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on GbsMemberHistoryRepository(gbsMemberHistoryRepository#829).findActiveMembers(GbsMemberHistorySearchCondition(gbsId=1, startDate=2025-05-06, endDate=2025-05-06))
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#841
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=authentication#842
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#843
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#844
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#845
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#846
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=securityContext#847
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#848
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#849
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of gbsGroupRepository#843#850
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#841#851
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[GbsGroup(id=1, name='테스트 GBS')] on GbsGroupRepository(gbsGroupRepository#843).findById(1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [Attendance(id=1, member=2, week=2025-05-05)] on AttendanceRepository(attendanceRepository#841).findByGbsGroupAndWeekStart(GbsGroup(id=1, name='테스트 GBS'), 2025-05-05)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#852
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#853
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#854
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#855
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#856
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#857
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#858
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of villageRepository#858#859
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of gbsGroupRepository#853#860
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of gbsLeaderHistoryRepository#854#861
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#852#862
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of gbsGroupRepository#853#863
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of gbsLeaderHistoryRepository#854#864
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#852#865
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of gbsGroupRepository#853#866
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of gbsLeaderHistoryRepository#854#867
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#852#868
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[Village(id=2, name='R village')] on VillageRepository(villageRepository#858).findById(2)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [GbsGroup(id=2, name='GBS1')] on GbsGroupRepository(gbsGroupRepository#853).findActiveGroupsByVillageId(2, 2023-01-08)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on AttendanceRepository(attendanceRepository#852).findDetailsByGbsIdAndWeek(2, 2023-01-08)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=10, name='과거리더1', role=LEADER) on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#854).findLeaderByGbsIdAndDate(2, 2023-01-08)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 2 on GbsMemberHistoryRepository(gbsMemberHistoryRepository#855).countActiveMembers(2, 2023-01-08)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[Village(id=2, name='R village')] on VillageRepository(villageRepository#858).findById(2)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [GbsGroup(id=2, name='GBS1')] on GbsGroupRepository(gbsGroupRepository#853).findActiveGroupsByVillageId(2, 2023-06-01)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on AttendanceRepository(attendanceRepository#852).findDetailsByGbsIdAndWeek(2, 2023-06-01)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=10, name='과거리더1', role=LEADER) on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#854).findLeaderByGbsIdAndDate(2, 2023-06-01)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 3 on GbsMemberHistoryRepository(gbsMemberHistoryRepository#855).countActiveMembers(2, 2023-06-01)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[Village(id=2, name='R village')] on VillageRepository(villageRepository#858).findById(2)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [GbsGroup(id=2, name='GBS1')] on GbsGroupRepository(gbsGroupRepository#853).findActiveGroupsByVillageId(2, 2025-05-06)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on AttendanceRepository(attendanceRepository#852).findDetailsByGbsIdAndWeek(2, 2025-05-06)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=11, name='현재리더1', role=LEADER) on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#854).findLeaderByGbsIdAndDate(2, 2025-05-06)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 4 on GbsMemberHistoryRepository(gbsMemberHistoryRepository#855).countActiveMembers(2, 2025-05-06)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#869
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#870
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#871
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#872
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#873
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#874
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#875
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of villageRepository#875#876
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of gbsGroupRepository#870#877
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of gbsLeaderHistoryRepository#871#878
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#869#879
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of gbsLeaderHistoryRepository#871#880
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#869#881
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[Village(id=2, name='R village')] on VillageRepository(villageRepository#875).findById(2)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [GbsGroup(id=2, name='GBS1'), GbsGroup(id=3, name='GBS2')] on GbsGroupRepository(gbsGroupRepository#870).findActiveGroupsByVillageId(2, 2023-01-08)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [Attendance(id=1, member=13, week=2023-01-08), Attendance(id=2, member=14, week=2023-01-08)] on AttendanceRepository(attendanceRepository#869).findDetailsByGbsIdAndWeek(2, 2023-01-08)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=10, name='과거리더1', role=LEADER) on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#871).findLeaderByGbsIdAndDate(2, 2023-01-08)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 2 on GbsMemberHistoryRepository(gbsMemberHistoryRepository#872).countActiveMembers(2, 2023-01-08)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [Attendance(id=3, member=15, week=2023-01-08), Attendance(id=4, member=16, week=2023-01-08)] on AttendanceRepository(attendanceRepository#869).findDetailsByGbsIdAndWeek(3, 2023-01-08)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=12, name='리더2', role=LEADER) on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#871).findLeaderByGbsIdAndDate(3, 2023-01-08)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 2 on GbsMemberHistoryRepository(gbsMemberHistoryRepository#872).countActiveMembers(3, 2023-01-08)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#882
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#883
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#884
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#885
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#886
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#887
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#888
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of villageRepository#888#889
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of gbsGroupRepository#883#890
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of gbsLeaderHistoryRepository#884#891
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#882#892
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of gbsLeaderHistoryRepository#884#893
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#882#894
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of gbsGroupRepository#883#895
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of gbsLeaderHistoryRepository#884#896
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#882#897
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[Village(id=2, name='R village')] on VillageRepository(villageRepository#888).findById(2)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [GbsGroup(id=2, name='GBS1'), GbsGroup(id=3, name='GBS2')] on GbsGroupRepository(gbsGroupRepository#883).findActiveGroupsByVillageId(2, 2023-01-08)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on AttendanceRepository(attendanceRepository#882).findDetailsByGbsIdAndWeek(2, 2023-01-08)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=10, name='과거리더1', role=LEADER) on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#884).findLeaderByGbsIdAndDate(2, 2023-01-08)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 2 on GbsMemberHistoryRepository(gbsMemberHistoryRepository#885).countActiveMembers(2, 2023-01-08)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on AttendanceRepository(attendanceRepository#882).findDetailsByGbsIdAndWeek(3, 2023-01-08)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=12, name='리더2', role=LEADER) on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#884).findLeaderByGbsIdAndDate(3, 2023-01-08)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 2 on GbsMemberHistoryRepository(gbsMemberHistoryRepository#885).countActiveMembers(3, 2023-01-08)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[Village(id=2, name='R village')] on VillageRepository(villageRepository#888).findById(2)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [GbsGroup(id=2, name='GBS1')] on GbsGroupRepository(gbsGroupRepository#883).findActiveGroupsByVillageId(2, 2025-05-06)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on AttendanceRepository(attendanceRepository#882).findDetailsByGbsIdAndWeek(2, 2025-05-06)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=11, name='현재리더1', role=LEADER) on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#884).findLeaderByGbsIdAndDate(2, 2025-05-06)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 3 on GbsMemberHistoryRepository(gbsMemberHistoryRepository#885).countActiveMembers(2, 2025-05-06)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#898
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#899
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#900
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#901
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#902
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#903
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#904
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of villageRepository#904#905
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of gbsGroupRepository#899#906
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of gbsLeaderHistoryRepository#900#907
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#898#908
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of gbsLeaderHistoryRepository#900#909
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#898#910
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of gbsGroupRepository#899#911
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of gbsLeaderHistoryRepository#900#912
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#898#913
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[Village(id=2, name='R village')] on VillageRepository(villageRepository#904).findById(2)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [GbsGroup(id=2, name='GBS1'), GbsGroup(id=3, name='GBS2')] on GbsGroupRepository(gbsGroupRepository#899).findActiveGroupsByVillageId(2, 2023-01-08)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on AttendanceRepository(attendanceRepository#898).findDetailsByGbsIdAndWeek(2, 2023-01-08)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=10, name='과거리더1', role=LEADER) on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#900).findLeaderByGbsIdAndDate(2, 2023-01-08)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 2 on GbsMemberHistoryRepository(gbsMemberHistoryRepository#901).countActiveMembers(2, 2023-01-08)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on AttendanceRepository(attendanceRepository#898).findDetailsByGbsIdAndWeek(3, 2023-01-08)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=12, name='리더2', role=LEADER) on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#900).findLeaderByGbsIdAndDate(3, 2023-01-08)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 2 on GbsMemberHistoryRepository(gbsMemberHistoryRepository#901).countActiveMembers(3, 2023-01-08)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[Village(id=2, name='R village')] on VillageRepository(villageRepository#904).findById(2)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [GbsGroup(id=2, name='GBS1')] on GbsGroupRepository(gbsGroupRepository#899).findActiveGroupsByVillageId(2, 2025-05-06)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on AttendanceRepository(attendanceRepository#898).findDetailsByGbsIdAndWeek(2, 2025-05-06)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=11, name='현재리더1', role=LEADER) on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#900).findLeaderByGbsIdAndDate(2, 2025-05-06)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 3 on GbsMemberHistoryRepository(gbsMemberHistoryRepository#901).countActiveMembers(2, 2025-05-06)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#914
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#915
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=organizationService#916
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=userService#917
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=#918
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#919
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#920
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=#921
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#922
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #922#923
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of #922#924
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #922#925
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistory name=child of #919#926
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistory name=#927
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegation name=child of #920#928
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMembersListResponse name=child of #918#929
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#922).getRole()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#922).getRole()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#922).getRole()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#922).getRole()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on User(#922).getId()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsLeaderHistory(#927) on GbsLeaderHistoryRepository(#919).findCurrentLeaderHistoryByGbsIdAndLeaderId(1, 1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on User(#922).getId()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering null on LeaderDelegationRepository(#920).findActiveByGbsIdAndDelegateeId(1, 1, 2025-05-06)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsMembersListResponse(gbsId=1, gbsName=테스트 GBS, memberCount=2, members=[GbsMemberResponse(id=1, name=조원1, email=member1@example.com, birthDate=2000-01-01, joinDate=2025-05-06, phoneNumber=null), GbsMemberResponse(id=2, name=조원2, email=member2@example.com, birthDate=2000-02-02, joinDate=2025-05-06, phoneNumber=null)]) on OrganizationService(#918).getGbsMembers(1, 2025-05-06)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#930
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#931
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=organizationService#932
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=userService#933
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=#934
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#935
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#936
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=#937
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#938
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #938#939
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of #938#940
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #938#941
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Department name=#942
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Department name=#943
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroup name=child of #934#944
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMembersListResponse name=child of #934#945
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VILLAGE_LEADER on User(#938).getRole()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VILLAGE_LEADER on User(#938).getRole()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VILLAGE_LEADER on User(#938).getRole()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering <error "io.mockk.MockKException: No other calls allowed in stdObjectAnswer than equals/hashCode/toString"> on User(#938).getVillageLeader()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsGroup(id=1, name='테스트 GBS') on OrganizationService(#934).getGbsGroupById(1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering <error "io.mockk.MockKException: No other calls allowed in stdObjectAnswer than equals/hashCode/toString"> on User(#938).getVillageLeader()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsMembersListResponse(gbsId=1, gbsName=테스트 GBS, memberCount=2, members=[GbsMemberResponse(id=1, name=조원1, email=member1@example.com, birthDate=2000-01-01, joinDate=2025-05-06, phoneNumber=null), GbsMemberResponse(id=2, name=조원2, email=member2@example.com, birthDate=2000-02-02, joinDate=2025-05-06, phoneNumber=null)]) on OrganizationService(#934).getGbsMembers(1, 2025-05-06)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#946
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#947
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=organizationService#948
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=userService#949
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=#950
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#951
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#952
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=#953
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#954
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #954#955
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of #954#956
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #954#957
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 200 on User(#954).getId()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#954).getRole()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#954).getRole()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#954).getRole()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#958
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#959
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=organizationService#960
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=userService#961
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=#962
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#963
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#964
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=#965
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#966
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #966#967
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of #966#968
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #966#969
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMembersListResponse name=child of #962#970
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering MINISTER on User(#966).getRole()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering MINISTER on User(#966).getRole()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsMembersListResponse(gbsId=1, gbsName=테스트 GBS, memberCount=2, members=[GbsMemberResponse(id=1, name=조원1, email=member1@example.com, birthDate=2000-01-01, joinDate=2025-05-06, phoneNumber=null), GbsMemberResponse(id=2, name=조원2, email=member2@example.com, birthDate=2000-02-02, joinDate=2025-05-06, phoneNumber=null)]) on OrganizationService(#962).getGbsMembers(1, 2025-05-06)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#971
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#972
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=organizationService#973
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=userService#974
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=#975
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#976
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#977
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=#978
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#979
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #979#980
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of #979#981
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #979#982
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistory name=child of #976#983
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegation name=child of #977#984
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegation name=#985
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMembersListResponse name=child of #975#986
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#979).getRole()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#979).getRole()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#979).getRole()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#979).getRole()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 200 on User(#979).getId()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering null on GbsLeaderHistoryRepository(#976).findCurrentLeaderHistoryByGbsIdAndLeaderId(1, 200)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 200 on User(#979).getId()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LeaderDelegation(#985) on LeaderDelegationRepository(#977).findActiveByGbsIdAndDelegateeId(1, 200, 2025-05-06)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsMembersListResponse(gbsId=1, gbsName=테스트 GBS, memberCount=2, members=[GbsMemberResponse(id=1, name=조원1, email=member1@example.com, birthDate=2000-01-01, joinDate=2025-05-06, phoneNumber=null), GbsMemberResponse(id=2, name=조원2, email=member2@example.com, birthDate=2000-02-02, joinDate=2025-05-06, phoneNumber=null)]) on OrganizationService(#975).getGbsMembers(1, 2025-05-06)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#987
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#988
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=organizationService#989
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=userService#990
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=#991
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#992
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#993
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=#994
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#995
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #995#996
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of #995#997
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #995#998
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMembersListResponse name=child of #991#999
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering ADMIN on User(#995).getRole()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsMembersListResponse(gbsId=1, gbsName=테스트 GBS, memberCount=2, members=[GbsMemberResponse(id=1, name=조원1, email=member1@example.com, birthDate=2000-01-01, joinDate=2025-05-06, phoneNumber=null), GbsMemberResponse(id=2, name=조원2, email=member2@example.com, birthDate=2000-02-02, joinDate=2025-05-06, phoneNumber=null)]) on OrganizationService(#991).getGbsMembers(1, 2025-05-06)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1000
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#1001
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=organizationService#1002
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=userService#1003
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=#1004
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#1005
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#1006
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=#1007
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#1008
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #1008#1009
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of #1008#1010
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #1008#1011
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMembersListResponse name=child of #1004#1012
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMembersListResponse name=child of #1004#1013
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of #1005#1014
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on User(#1008).getId()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on User(#1008).getId()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering <error "io.mockk.MockKException: No other calls allowed in stdObjectAnswer than equals/hashCode/toString"> on GbsLeaderHistoryRepository(#1005).findByLeaderIdWithDetailsOrderByStartDateDesc(1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsMembersListResponse(gbsId=2, gbsName=테스트 GBS, memberCount=2, members=[GbsMemberResponse(id=1, name=조원1, email=member1@example.com, birthDate=2000-01-01, joinDate=2025-05-06, phoneNumber=null), GbsMemberResponse(id=2, name=조원2, email=member2@example.com, birthDate=2000-02-02, joinDate=2025-05-06, phoneNumber=null)]) on OrganizationService(#1004).getGbsMembers(2, 2025-05-06)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsMembersListResponse(gbsId=1, gbsName=테스트 GBS, memberCount=2, members=[GbsMemberResponse(id=1, name=조원1, email=member1@example.com, birthDate=2000-01-01, joinDate=2025-05-06, phoneNumber=null), GbsMemberResponse(id=2, name=조원2, email=member2@example.com, birthDate=2000-02-02, joinDate=2025-05-06, phoneNumber=null)]) on OrganizationService(#1004).getGbsMembers(1, 2022-12-31)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 테스트 사용자 on User(#1008).getName()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 테스트 사용자 on User(#1008).getName()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1015
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#1016
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=organizationService#1017
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=userService#1018
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=#1019
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#1020
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#1021
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=#1022
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#1023
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #1023#1024
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of #1023#1025
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #1023#1026
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistory name=child of #1020#1027
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegation name=child of #1021#1028
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#1023).getRole()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#1023).getRole()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#1023).getRole()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LEADER on User(#1023).getRole()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on User(#1023).getId()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering null on GbsLeaderHistoryRepository(#1020).findCurrentLeaderHistoryByGbsIdAndLeaderId(1, 1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on User(#1023).getId()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering null on LeaderDelegationRepository(#1021).findActiveByGbsIdAndDelegateeId(1, 1, 2025-05-06)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1029
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#1030
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=organizationService#1031
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=userService#1032
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=#1033
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#1034
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#1035
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=#1036
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#1037
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #1037#1038
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of #1037#1039
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #1037#1040
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Department name=#1041
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Department name=#1042
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroup name=child of #1033#1043
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VILLAGE_LEADER on User(#1037).getRole()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VILLAGE_LEADER on User(#1037).getRole()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VILLAGE_LEADER on User(#1037).getRole()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering <error "io.mockk.MockKException: No other calls allowed in stdObjectAnswer than equals/hashCode/toString"> on User(#1037).getVillageLeader()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsGroup(id=1, name='테스트 GBS') on OrganizationService(#1033).getGbsGroupById(1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering <error "io.mockk.MockKException: No other calls allowed in stdObjectAnswer than equals/hashCode/toString"> on User(#1037).getVillageLeader()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VILLAGE_LEADER on User(#1037).getRole()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1044
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#1045
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=organizationService#1046
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=userService#1047
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=#1048
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#1049
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#1050
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=#1051
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=#1052
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Role name=child of #1052#1053
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of #1052#1054
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageLeader name=child of #1052#1055
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Department name=#1056
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistory name=child of #1049#1057
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering <error "io.mockk.MockKException: No other calls allowed in stdObjectAnswer than equals/hashCode/toString"> on GbsLeaderHistoryRepository(#1049).findByLeaderIdAndEndDateIsNull(1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 1 on User(#1052).getId()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 리더1 on User(#1052).getName()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1058
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=leaderDelegationRepository#1059
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=organizationService#1060
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=userService#1061
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=#1062
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=#1063
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#1064
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserService name=#1065
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistory name=child of #1063#1066
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering null on GbsLeaderHistoryRepository(#1063).findByLeaderIdAndEndDateIsNull(1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#1067
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#1068
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=#1069
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #1068#1070
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #1068#1071
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #1069#1072
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=1, name='위임자', role=LEADER)] on UserRepository(#1068).findById(1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=2, name='위임받는자', role=MEMBER)] on UserRepository(#1068).findById(2)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[GbsGroup(id=3, name='GBS 그룹')] on GbsGroupRepository(#1069).findById(3)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#1073
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#1074
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=#1075
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of #1073#1076
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of #1073#1077
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on LeaderDelegationRepository(#1073).findActiveByDelegateIdAndDate(2, 2025-05-06)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on LeaderDelegationRepository(#1073).findActiveByUserIdAndDate(2, 2025-05-06, true)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#1078
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#1079
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=#1080
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #1079#1081
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #1079#1082
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #1080#1083
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=1, name='위임자', role=LEADER)] on UserRepository(#1079).findById(1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=2, name='위임받는자', role=MEMBER)] on UserRepository(#1079).findById(2)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on GbsGroupRepository(#1080).findById(999)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#1084
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#1085
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=#1086
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #1085#1087
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #1085#1088
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #1086#1089
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=1, name='위임자', role=LEADER)] on UserRepository(#1085).findById(1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=2, name='위임받는자', role=MEMBER)] on UserRepository(#1085).findById(2)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[GbsGroup(id=3, name='GBS 그룹')] on GbsGroupRepository(#1086).findById(3)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#1090
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#1091
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=#1092
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #1091#1093
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #1091#1094
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #1092#1095
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegation name=child of #1090#1096
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=1, name='위임자', role=LEADER)] on UserRepository(#1091).findById(1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=2, name='위임받는자', role=MEMBER)] on UserRepository(#1091).findById(2)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[GbsGroup(id=3, name='GBS 그룹')] on GbsGroupRepository(#1092).findById(3)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LeaderDelegation(id=99, delegator=1, delegatee=2, gbsGroup=3) on LeaderDelegationRepository(#1090).findActiveByGbsGroupIdAndDate(3, 2025-05-07)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#1097
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#1098
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=#1099
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #1098#1100
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #1098#1101
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #1099#1102
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegation name=child of #1097#1103
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegation name=child of #1097#1104
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=1, name='위임자', role=LEADER)] on UserRepository(#1098).findById(1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=2, name='위임받는자', role=MEMBER)] on UserRepository(#1098).findById(2)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[GbsGroup(id=3, name='GBS 그룹')] on GbsGroupRepository(#1099).findById(3)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering null on LeaderDelegationRepository(#1097).findActiveByGbsGroupIdAndDate(3, 2025-05-07)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering LeaderDelegation(id=1, delegator=1, delegatee=2, gbsGroup=3) on LeaderDelegationRepository(#1097).save(LeaderDelegation(id=null, delegator=1, delegatee=2, gbsGroup=3))
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#1105
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#1106
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=#1107
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #1106#1108
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on UserRepository(#1106).findById(999)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#1109
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#1110
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=#1111
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #1110#1112
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #1110#1113
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=1, name='위임자', role=LEADER)] on UserRepository(#1110).findById(1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on UserRepository(#1110).findById(999)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for LeaderDelegationRepository name=#1114
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=#1115
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=#1116
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of #1114#1117
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of #1114#1118
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [LeaderDelegation(id=1, delegator=1, delegatee=2, gbsGroup=3)] on LeaderDelegationRepository(#1114).findActiveByDelegateIdAndDate(2, 2025-05-06)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [LeaderDelegation(id=2, delegator=2, delegatee=3, gbsGroup=3)] on LeaderDelegationRepository(#1114).findActiveByUserIdAndDate(2, 2025-05-06, true)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1119
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#1120
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1121
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#1122
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#1123
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of departmentRepository#1119#1124
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [Department(id=1, name='청년부')] on DepartmentRepository(departmentRepository#1119).findAll()
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1125
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#1126
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1127
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#1128
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#1129
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of villageRepository#1129#1130
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[Village(id=1, name='1마을')] on VillageRepository(villageRepository#1129).findById(1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1131
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#1132
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1133
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#1134
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#1135
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of departmentRepository#1131#1136
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on DepartmentRepository(departmentRepository#1131).findById(999)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1137
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#1138
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1139
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#1140
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#1141
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of gbsLeaderHistoryRepository#1139#1142
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering null on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#1139).findCurrentLeaderByGbsId(999)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1143
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#1144
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1145
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#1146
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#1147
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of departmentRepository#1143#1148
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[Department(id=1, name='청년부')] on DepartmentRepository(departmentRepository#1143).findById(1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1149
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#1150
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1151
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#1152
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#1153
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of gbsGroupRepository#1150#1154
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[GbsGroup(id=1, name='1GBS')] on GbsGroupRepository(gbsGroupRepository#1150).findById(1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1155
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#1156
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1157
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#1158
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#1159
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of gbsGroupRepository#1156#1160
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [GbsGroup(id=1, name='1GBS')] on GbsGroupRepository(gbsGroupRepository#1156).findActiveGroupsByVillageId(1, 2025-05-06)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1161
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#1162
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1163
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#1164
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#1165
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of gbsGroupRepository#1162#1166
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on GbsGroupRepository(gbsGroupRepository#1162).findById(999)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1167
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#1168
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1169
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#1170
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#1171
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of villageRepository#1171#1172
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of gbsGroupRepository#1168#1173
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[Village(id=1, name='1마을')] on VillageRepository(villageRepository#1171).findById(1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [GbsGroup(id=1, name='1GBS')] on GbsGroupRepository(gbsGroupRepository#1168).findByVillage(Village(id=1, name='1마을'))
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1174
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#1175
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1176
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#1177
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#1178
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of villageRepository#1178#1179
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on VillageRepository(villageRepository#1178).findById(999)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1180
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#1181
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1182
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#1183
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#1184
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of gbsLeaderHistoryRepository#1182#1185
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=1, name='홍길동', role=LEADER) on GbsLeaderHistoryRepository(gbsLeaderHistoryRepository#1182).findCurrentLeaderByGbsId(1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1186
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#1187
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1188
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#1189
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageRepository name=villageRepository#1190
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of departmentRepository#1186#1191
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of villageRepository#1190#1192
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[Department(id=1, name='청년부')] on DepartmentRepository(departmentRepository#1186).findById(1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [Village(id=1, name='1마을')] on VillageRepository(villageRepository#1190).findByDepartment(Department(id=1, name='청년부'))
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#1193
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#1194
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1195
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#1196
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=organizationService#1197
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Department name=child of organizationService#1197#1198
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of organizationService#1197#1199
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Department(id=1, name='청년부') on OrganizationService(organizationService#1197).getDepartmentById(1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on OrganizationService(organizationService#1197).getVillagesByDepartment(1)
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#1200
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#1201
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1202
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#1203
2025-05-06 22:48:30 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=organizationService#1204
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroup name=child of organizationService#1204#1205
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsGroup(id=1, name='1GBS') on OrganizationService(organizationService#1204).getGbsGroupById(1)
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 홍길동 on OrganizationService(organizationService#1204).getCurrentLeaderForGbs(1)
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 0 on GbsMemberHistoryRepository(gbsMemberHistoryRepository#1203).countActiveMembers(1, 2025-05-06)
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#1206
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#1207
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1208
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#1209
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=organizationService#1210
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Department name=child of organizationService#1210#1211
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of organizationService#1210#1212
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating spyk for StatisticsService name=#1213
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for VillageStatistics name=child of #1213#1214
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Department(id=1, name='청년부') on OrganizationService(organizationService#1210).getDepartmentById(1)
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [Village(id=1, name='1마을')] on OrganizationService(organizationService#1210).getVillagesByDepartment(1)
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VillageStatistics(villageId=1, villageName=1마을, gbsStats=[], totalMembers=10, attendedMembers=8, attendanceRate=80.0, averageQtCount=4.0) on StatisticsService(#1213).getVillageStatistics(1, 2023-01-01, 2023-01-31)
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering DepartmentStatistics(departmentId=1, departmentName=청년부, startDate=2023-01-01, endDate=2023-01-31, villageStats=[VillageStatistics(villageId=1, villageName=1마을, gbsStats=[], totalMembers=10, attendedMembers=8, attendanceRate=80.0, averageQtCount=4.0)], totalMembers=10, attendedMembers=8, attendanceRate=80.0, averageQtCount=4.0) on StatisticsService(#1213).getDepartmentStatistics(1, 2023-01-01, 2023-01-31)
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#1215
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#1216
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1217
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#1218
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=organizationService#1219
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#1220
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#1221
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1222
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#1223
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=organizationService#1224
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=child of organizationService#1224#1225
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of organizationService#1224#1226
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Village(id=1, name='1마을') on OrganizationService(organizationService#1224).getVillageById(1)
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [] on OrganizationService(organizationService#1224).getActiveGbsGroupsByVillage(1, 2025-05-06)
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#1227
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#1228
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1229
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#1230
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=organizationService#1231
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Village name=child of organizationService#1231#1232
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of organizationService#1231#1233
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating spyk for StatisticsService name=#1234
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsStatistics name=child of #1234#1235
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Village(id=1, name='1마을') on OrganizationService(organizationService#1231).getVillageById(1)
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [GbsGroup(id=1, name='1GBS')] on OrganizationService(organizationService#1231).getActiveGbsGroupsByVillage(1, 2025-05-06)
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsStatistics(gbsId=1, gbsName=1GBS, leaderName=홍길동, totalMembers=10, attendedMembers=8, attendanceRate=80.0, averageQtCount=4.0, weeklyStats=[]) on StatisticsService(#1234).getGbsStatistics(1, 2023-01-01, 2023-01-31)
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering VillageStatistics(villageId=1, villageName=1마을, gbsStats=[GbsStatistics(gbsId=1, gbsName=1GBS, leaderName=홍길동, totalMembers=10, attendedMembers=8, attendanceRate=80.0, averageQtCount=4.0, weeklyStats=[])], totalMembers=10, attendedMembers=8, attendanceRate=80.0, averageQtCount=4.0) on StatisticsService(#1234).getVillageStatistics(1, 2023-01-01, 2023-01-31)
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for AttendanceRepository name=attendanceRepository#1236
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroupRepository name=gbsGroupRepository#1237
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsLeaderHistoryRepository name=gbsLeaderHistoryRepository#1238
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsMemberHistoryRepository name=gbsMemberHistoryRepository#1239
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for OrganizationService name=organizationService#1240
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsGroup name=child of organizationService#1240#1241
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#1236#1242
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of attendanceRepository#1236#1243
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating spyk for StatisticsService name=#1244
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for GbsStatistics name=child of #1244#1245
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering GbsStatistics(gbsId=1, gbsName=1GBS, leaderName=홍길동, totalMembers=10, attendedMembers=3, attendanceRate=30.0, averageQtCount=3.5, weeklyStats=[WeeklyStatistics(weekStart=2023-01-01, totalMembers=10, attendedMembers=2, attendanceRate=20.0, averageQtCount=3.5), WeeklyStatistics(weekStart=2023-01-08, totalMembers=10, attendedMembers=1, attendanceRate=10.0, averageQtCount=3.5)]) on StatisticsService(#1244).getGbsStatistics(1, 2023-01-01, 2023-01-31)
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogRepository name=#1246
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for ObjectMapper name=#1247
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#1248
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#1249
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #1248#1250
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Page name=child of #1246#1251
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Page 1 of 1 containing com.attendly.domain.entity.SystemLog instances on SystemLogRepository(#1246).searchLogs(INFO, TEST, null, null, null, null, Page request [number: 0, size 10, sort: UNSORTED])
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogRepository name=#1252
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for ObjectMapper name=#1253
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#1254
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#1255
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #1254#1256
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogRepository name=#1257
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for ObjectMapper name=#1258
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#1259
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#1260
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #1259#1261
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of #1257#1262
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[com.attendly.domain.entity.SystemLog@698fbfa6] on SystemLogRepository(#1257).findById(1)
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLogRepository name=#1263
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for ObjectMapper name=#1264
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SecurityContext name=#1265
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#1266
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=child of #1265#1267
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for HttpServletRequest name=#1268
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Any name=child of #1266#1269
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for SystemLog name=child of #1263#1270
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Authentication(#1266) on SecurityContext(#1265).getAuthentication()
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering true on Authentication(#1266).isAuthenticated()
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering org.springframework.security.core.userdetails.User [Username=1, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[]] on Authentication(#1266).getPrincipal()
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering 127.0.0.1 on HttpServletRequest(#1268).getRemoteAddr()
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Test User Agent on HttpServletRequest(#1268).getHeader(User-Agent)
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering com.attendly.domain.entity.SystemLog@356a4aef on SystemLogRepository(#1263).save(com.attendly.domain.entity.SystemLog@6dfb52e2)
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1271
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for PasswordEncoder name=passwordEncoder#1272
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#1273
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of userRepository#1273#1274
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of departmentRepository#1271#1275
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on UserRepository(userRepository#1273).findByEmail(test@example.com)
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on DepartmentRepository(departmentRepository#1271).findById(1)
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of userRepository#1273#1276
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1277
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for PasswordEncoder name=passwordEncoder#1278
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#1279
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#1280
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of userRepository#1279#1281
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering test@example.com on Authentication(#1280).getName()
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=1, name='홍길동', role=LEADER)] on UserRepository(userRepository#1279).findByEmail(test@example.com)
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1282
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for PasswordEncoder name=passwordEncoder#1283
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#1284
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of userRepository#1284#1285
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of departmentRepository#1282#1286
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of userRepository#1284#1287
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on UserRepository(userRepository#1284).findByEmail(test@example.com)
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[Department(id=1, name='대학부')] on DepartmentRepository(departmentRepository#1282).findById(1)
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering encoded_password on PasswordEncoder(passwordEncoder#1283).encode(password123)
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering User(id=1, name='홍길동', role=LEADER) on UserRepository(userRepository#1284).save(User(id=null, name='홍길동', role=LEADER))
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1288
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for PasswordEncoder name=passwordEncoder#1289
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#1290
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Authentication name=#1291
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of userRepository#1290#1292
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering nonexistent@example.com on Authentication(#1291).getName()
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional.empty on UserRepository(userRepository#1290).findByEmail(nonexistent@example.com)
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1293
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for PasswordEncoder name=passwordEncoder#1294
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#1295
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of userRepository#1295#1296
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=1, name='홍길동', role=LEADER)] on UserRepository(userRepository#1295).findById(1)
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1297
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for PasswordEncoder name=passwordEncoder#1298
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#1299
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of userRepository#1299#1300
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of userRepository#1299#1301
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [User(id=1, name='Leader User', role=LEADER)] on UserRepository(userRepository#1299).findByRole(LEADER)
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [User(id=2, name='Member User', role=MEMBER)] on UserRepository(userRepository#1299).findByRole(MEMBER)
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1302
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for PasswordEncoder name=passwordEncoder#1303
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#1304
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of userRepository#1304#1305
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=1, name='홍길동', role=LEADER)] on UserRepository(userRepository#1304).findByEmail(test@example.com)
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1306
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for PasswordEncoder name=passwordEncoder#1307
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#1308
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of userRepository#1308#1309
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for List name=child of userRepository#1308#1310
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [User(id=1, name='Leader User', role=LEADER)] on UserRepository(userRepository#1308).findByRole(LEADER)
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering [User(id=1, name='Leader User', role=LEADER)] on UserRepository(userRepository#1308).findByRole(VILLAGE_LEADER)
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1311
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for PasswordEncoder name=passwordEncoder#1312
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#1313
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for DepartmentRepository name=departmentRepository#1314
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for PasswordEncoder name=passwordEncoder#1315
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for UserRepository name=userRepository#1316
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of userRepository#1316#1317
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.r.states.AnsweringState - Answering Optional[User(id=2, name='기존 사용자', role=MEMBER)] on UserRepository(userRepository#1316).findByEmail(test@example.com)
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for Optional name=child of departmentRepository#1314#1318
2025-05-06 22:48:31 [Test worker] [NONE] DEBUG i.m.i.i.AbstractMockFactory - Creating mockk for User name=child of userRepository#1316#1319
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists attendance cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists batch_job_logs cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists batch_jobs cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists department cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_group cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_leader_history cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_member_history cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists leader_delegation cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists system_log cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists system_settings cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists village cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists village_leader cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists attendance cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists batch_job_logs cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists batch_jobs cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists department cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_group cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_leader_history cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_member_history cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists leader_delegation cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists system_log cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists system_settings cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists village cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists village_leader cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists attendance cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists batch_job_logs cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists batch_jobs cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists department cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_group cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_leader_history cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_member_history cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists leader_delegation cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists system_log cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists system_settings cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists village cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists village_leader cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists attendance cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists batch_job_logs cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists batch_jobs cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists department cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_group cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_leader_history cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists gbs_member_history cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists leader_delegation cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists system_log cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists system_settings cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists village cascade 
2025-05-06 22:48:31 [SpringApplicationShutdownHook] [NONE] DEBUG org.hibernate.SQL - 
    drop table if exists village_leader cascade 
